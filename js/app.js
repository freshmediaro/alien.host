// OS Dashboard App - Cross-browser (Chrome, Firefox, Edge, Safari)
// This app is now tested and compatible with all major browsers. If you find a browser-specific bug, please report it.
// [ ... other globally defined functions or variables if any ... ]

// --- Global mute state ---
let isMuted = false;
let previousVolume = 75; // Default volume

// --- Notifications mute state ---
let isNotificationsMuted = false;

// --- Desktop notification stacking mode ---
// Modes: 'one', 'three', 'all'
let desktopNotificationMode = 'three'; // Default to 3 notifications stacked

// Initialize volume button
const volumeBtn = document.querySelector('#volume-btn');
const volumePanel = document.querySelector('#volume-panel');

// Setup SiteBuilder App
function setupSiteBuilderApp(windowElement) {
  // Hide page-actions-row by default
  const pageActionsRows = windowElement.querySelectorAll('.page-actions-row');
  pageActionsRows.forEach(row => {
    row.style.display = 'none';
    row.style.height = '0';
    row.style.overflow = 'hidden';
    row.style.transition = 'height 0.3s ease-in-out';
  });



  // Helper function to toggle page actions row
  function togglePageActionsRow(button) {
    const parentItem = button.closest('.sitebuilder-iteam-content');
    const actionsRow = parentItem.querySelector('.page-actions-row');
    const settingsSection = parentItem.querySelector('.page-settings-section');
    const chevronIcon = button.querySelector('i.fa-chevron-down, i.fa-chevron-up');
    
    // If settings section is open, close it first
    if (settingsSection && settingsSection.style.display === 'block') {
      // Find the settings button and its icon
      const settingsButton = parentItem.querySelector('.action-btn.settings-btn');
      const settingsIcon = settingsButton ? settingsButton.querySelector('i') : null;
      
      // Close the settings section
      settingsSection.style.height = '0';
      setTimeout(() => {
        settingsSection.style.display = 'none';
      }, 300);
      
      // Change icon from X mark back to gear
      if (settingsIcon && settingsIcon.classList.contains('fa-xmark')) {
        settingsIcon.classList.remove('fa-xmark');
        settingsIcon.classList.add('fa-gear');
      }
    }
    
    // Toggle actions row
    if (actionsRow) {
      if (actionsRow.style.display === 'none' || actionsRow.style.height === '0px') {
        // Show actions row
        actionsRow.style.display = 'flex';
        setTimeout(() => {
          actionsRow.style.height = actionsRow.scrollHeight + 'px';
        }, 10);
        
        // Change chevron icon to up
        if (chevronIcon) {
          chevronIcon.classList.remove('fa-chevron-down');
          chevronIcon.classList.add('fa-chevron-up');
        }
      } else {
        // Hide actions row
        actionsRow.style.height = '0';
        setTimeout(() => {
          actionsRow.style.display = 'none';
        }, 300);
        
        // Change chevron icon to down
        if (chevronIcon) {
          chevronIcon.classList.remove('fa-chevron-up');
          chevronIcon.classList.add('fa-chevron-down');
        }
      }
    }
  }

  // Create settings section template
  const settingsSectionTemplate = `

    <div class="page-settings-row">
      <div class="page-settings-row-left">
        <div class="settings-group">
          <h3>General</h3>
          <div class="settings-item">
            <label>Page Title</label>
            <input type="text" class="settings-input" value="Portfolio">
          </div>
          <div class="settings-item">
            <label>URL Slug</label>
            <div class="settings-url-input">
              <span class="settings-url-prefix">mywebsite.com/</span>
              <input type="text" class="settings-input url-slug" value="portfolio">
            </div>
          </div>
        </div>
        <div class="settings-group">
          <div class="settings-group-header">
        <h3>Search Engine Optimization</h3> 

        <div class="toggle-switch">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>

        <div class="publishing-options-section">
          <div class="settings-item">
            <label>Meta Title</label>
            <input type="text" class="settings-input" value="Portfolio - My Website">
          </div>
          <div class="settings-item">
            <label>Meta Description</label>
            <textarea class="settings-textarea">Check out my portfolio of recent projects and work.</textarea>
          </div>
<div class="publish-section">  
 <div class="form-row-top-input">
             <label class="publish-label">SEO Exclusion</label>
             </div>
<div class="checkbox-option">
                  <input type="checkbox" id="no-index-page">
                  <label for="no-index-page">No index (exclude from search engines)</label>
                </div>
                <div class="checkbox-option" style="margin-top: 10px;">
                  <input type="checkbox" id="no-follow-page">
                  <label for="no-follow-page">No follow (do not follow links)</label>
                </div>
                                <div class="checkbox-option" style="margin-top: 10px;">
                  <input type="checkbox" id="exclude-page-from-sitemap">
                  <label for="exclude-page-from-sitemap">Exclude page from sitemap</label>
                </div>
            </div>
        </div>
        </div>
<div class="settings-group">
          <h3>Social Sharing</h3>
          <div class="settings-item">
            
          </div>
          <div class="settings-item">
            <label>Social Image</label>
            <div class="settings-image-upload">
              <i class="fas fa-upload"></i>
              <span>Upload Image</span>

              </div>
                            <div class="upload-image-description">
                <span>When a Recomandat image or an OpenGraph Image is not set for individual posts/pages/CPTs, this image will be used as a fallback thumbnail when your post is shared on Facebook. The recommended image size is 1200 x 630 pixels.
</span>
            </div>
          </div>
        </div>

      </div>


      <div class="page-settings-row-right">
        <div class="settings-group">
          <h3>Publishing Options</h3>

<div class="publishing-options-section">
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Status</label>
            <div class="schedule-publish-btn">Schedule</div>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Published</option>
                <option value="draft" style="color: #333 !important;">Draft</option>
                <option value="archived" style="color: #333 !important;">Staff Review</option>
              </select>
            </div>
          </div>
          
          <div class="publish-section">
            <label class="publish-label">Schedule publishing</label>
            <div class="date-picker-container">
              <input type="text" class="form-control date-input" value="05-01-2025">
              <button class="calendar-button">
                <i class="fas fa-calendar-alt"></i>
              </button>
            </div>
          </div>
</div>

</div>




        <div class="settings-group">
        <div class="settings-group-header">
        <h3>Visibility</h3> 

        <div class="toggle-switch">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>
<div class="publishing-options-section">


<div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Language</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">English</option>
                                <option value="draft" style="color: #333 !important;">Spanish</option>
                <option value="draft" style="color: #333 !important;">French</option>
                <option value="archived" style="color: #333 !important;">German</option>
              </select>
            </div>
          </div>
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Parent Page</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Main page (no parent)</option>
                <option value="Homepage" style="color: #333 !important;">Home</option>
                <option value="draft" style="color: #333 !important;">About</option>
                <option value="archived" style="color: #333 !important;">Contact</option>
              </select>
            </div>
          </div>
        
</div>
</div>

        <div class="settings-group">
        <div class="settings-group-header">
        <h3>Custom Style</h3> 

        <div class="toggle-switch">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>

<div class="publishing-options-section">
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Header</label>
            <div class="schedule-publish-btn">New header</div>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Default</option>
                <option value="Homepage" style="color: #333 !important;">Header design 1</option>
                <option value="draft" style="color: #333 !important;">Header design 2</option>
                <option value="archived" style="color: #333 !important;">Header design 3</option>
                <option value="separator" style="color: #333 !important;" disabled>────────────────────────</option>
                                <option value="archived" style="color: #333 !important; margin-bottom: 10px;">! Without Header</option>
              </select>
            </div>
          </div>

                  <div class="settings-group">
        <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Template</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Default</option>
                                <option value="draft" style="color: #333 !important;">Boxed</option>
                <option value="draft" style="color: #333 !important;">Sidebar</option>
                <option value="archived" style="color: #333 !important;">Full Width</option>
              </select>
            </div>
          </div>

                  <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Footer</label>
            <div class="schedule-publish-btn">New footer</div>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Default</option>
                <option value="draft" style="color: #333 !important;">Footer design 1</option>
                <option value="draft" style="color: #333 !important;">Footer design 2</option>
                <option value="archived" style="color: #333 !important;">Footer design 3</option>
                                <option value="separator" style="color: #333 !important;" disabled>────────────────────────</option>
                                <option value="nofoooter" style="color: #333 !important;">Without Footer</option>
              </select>
            </div>
          </div>
        <div class="settings-group">
                  <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Override Logo</label>
            <div class="schedule-publish-btn">Other formats</div>
            </div>
            <div class="upload-container">
<input type="file" id="avatar" name="avatar" accept="image/png, image/jpeg" />
            </div>
          </div>

                            <div class="publish-section">  
 <div class="form-row-top-input">
             <label class="publish-label">Breadcrumbs</label>
             </div>
<div class="checkbox-option">
                  <input type="checkbox" id="enable-breadcrumbs" checked="">
                  <label for="enable-breadcrumbs">Enable breadcrumbs for this page</label>
                </div>
            </div>
          </div>




          
</div></div>



</div>



          
        <div class="settings-group">
<div class="settings-group-header">
        <h3>Privacy</h3> 

        <div class="toggle-switch">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>
<div class="publishing-options-section">
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Password protected</label>
            <div class="schedule-publish-btn">Schedule</div>
            </div>
<div class="date-picker-container">
              <input type="text" class="form-control date-input" value=" ">
              <button class="calendar-button">
                <i class="fas fa-lock"></i>
              </button>
            </div>
          </div>
        <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Private</label>
            </div>
            <div class="checkbox-option">
                  <input type="checkbox" id="private-page" checked="">
                  <label for="private-page">Private (exclude from sitemap)</label>
                </div>
          </div>
</div>
</div>



</div> 
      </div>
    </div>

      

<div class="page-settings-footer">



    <div class="settings-actions">
      <div class="page-settings-footer-left">
            <div class="page-settings-header-right">
<span>Page ID: #25690-EN</span>
      </div>
      <div class="page-settings-header-left">
      <span class="published">Published 2022/01/19 at 4:27 pm</span>
      <span class="published">Last edited 2022/01/19 at 4:27 pm</span>
      </div>

      </div>
      <div class="page-settings-footer-right">
      <button class="settings-cancel-btn">Cancel</button>
      <button class="settings-save-btn">Save Changes</button>
      </div>
    </div>


    
    </div>
  `;

  // Add settings section to each sitebuilder-iteam-content
  const sitebuilderItemContents = windowElement.querySelectorAll('.sitebuilder-iteam-content');
  sitebuilderItemContents.forEach(item => {
    const settingsSection = document.createElement('div');
    settingsSection.className = 'page-settings-section';
    settingsSection.innerHTML = settingsSectionTemplate;
    settingsSection.style.display = 'none';
    settingsSection.style.height = '0';
    settingsSection.style.overflow = 'hidden';
    settingsSection.style.transition = 'height 0.3s ease-in-out';
    item.appendChild(settingsSection);
    
    // Initialize publishing options sections - hide by default
    setTimeout(() => {
      const toggles = settingsSection.querySelectorAll('.settings-group-header .toggle-switch input');
      toggles.forEach(toggle => {
        // Set toggle to unchecked by default
        toggle.checked = false;
        
        const publishingSection = toggle.closest('.settings-group-header').nextElementSibling;
        if (publishingSection && publishingSection.classList.contains('publishing-options-section')) {
          publishingSection.style.display = 'none';
          publishingSection.style.height = '0';
        }
      });
    }, 0);
  });

  // Add event listeners to edit buttons
  const editButtons = windowElement.querySelectorAll('.action-btn.edit-btn');
  editButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.stopPropagation(); // Prevent event from bubbling up to parent
      togglePageActionsRow(this);
    });
  });

  // Add event listeners to settings buttons
  const settingsButtons = windowElement.querySelectorAll('.action-btn.settings-btn');
  settingsButtons.forEach(button => {
    button.addEventListener('click', function() {
      const parentItem = this.closest('.sitebuilder-iteam-content');
      const actionsRow = parentItem.querySelector('.page-actions-row');
      const settingsSection = parentItem.querySelector('.page-settings-section');
      const editButton = parentItem.querySelector('.action-btn.edit-btn');
      const chevronIcon = editButton ? editButton.querySelector('i.fa-chevron-down, i.fa-chevron-up') : null;
      
      // Get the icon element in the settings button
      const settingsIcon = this.querySelector('i');
      
      // If actions row is open, close it first
      if (actionsRow && (actionsRow.style.display === 'flex' || actionsRow.style.height !== '0px')) {
        actionsRow.style.height = '0';
        setTimeout(() => {
          actionsRow.style.display = 'none';
        }, 300);
        
        // Change chevron icon to down
        if (chevronIcon) {
          chevronIcon.classList.remove('fa-chevron-up');
          chevronIcon.classList.add('fa-chevron-down');
        }
      }
      
      // Toggle settings section
      if (settingsSection) {
        if (settingsSection.style.display === 'none' || settingsSection.style.height === '0px') {
          // Show settings section
          settingsSection.style.display = 'block';
          setTimeout(() => {
            settingsSection.style.height = 'auto';
          }, 10);
          
          // Change icon from gear to X mark
          if (settingsIcon && settingsIcon.classList.contains('fa-gear')) {
            settingsIcon.classList.remove('fa-gear');
            settingsIcon.classList.add('fa-xmark');
          }
        } else {
          // Hide settings section
          settingsSection.style.height = '0';
          setTimeout(() => {
            settingsSection.style.display = 'none';
          }, 300);
          
          // Change icon from X mark back to gear
          if (settingsIcon && settingsIcon.classList.contains('fa-xmark')) {
            settingsIcon.classList.remove('fa-xmark');
            settingsIcon.classList.add('fa-gear');
          }
        }
      }
    });
  });

  // Add event listeners to settings cancel buttons
  const cancelButtons = windowElement.querySelectorAll('.settings-cancel-btn');
  cancelButtons.forEach(button => {
    button.addEventListener('click', function() {
      const settingsSection = this.closest('.page-settings-section');
      if (settingsSection) {
        // Find the parent item and the settings button
        const parentItem = settingsSection.closest('.sitebuilder-iteam-content');
        const settingsButton = parentItem ? parentItem.querySelector('.action-btn.settings-btn') : null;
        const settingsIcon = settingsButton ? settingsButton.querySelector('i') : null;
        
        // Close the settings section
        settingsSection.style.height = '0';
        setTimeout(() => {
          settingsSection.style.display = 'none';
        }, 300);
        
        // Change icon from X mark back to gear
        if (settingsIcon && settingsIcon.classList.contains('fa-xmark')) {
          settingsIcon.classList.remove('fa-xmark');
          settingsIcon.classList.add('fa-gear');
        }
      }
    });
  });
  
  // Add toggle switch functionality for publishing options sections
  const toggleSwitches = windowElement.querySelectorAll('.settings-group-header .toggle-switch input');
  toggleSwitches.forEach(toggle => {
    // Get the corresponding publishing-options-section
    const settingsGroupHeader = toggle.closest('.settings-group-header');
    const settingsGroup = settingsGroupHeader.nextElementSibling;
    
    if (settingsGroup && settingsGroup.classList.contains('publishing-options-section')) {
      // Set initial state based on toggle - default to unchecked/hidden
      toggle.checked = false;
      settingsGroup.style.display = 'none';
      settingsGroup.style.height = '0';
      
      // Make the entire header clickable
      settingsGroupHeader.addEventListener('click', function(e) {
        // Don't toggle if clicking directly on the checkbox (it handles its own state)
        if (e.target !== toggle) {
          toggle.checked = !toggle.checked;
          
          // Trigger the change event
          const changeEvent = new Event('change');
          toggle.dispatchEvent(changeEvent);
        }
      });
      
      // Add event listener for toggle changes
      toggle.addEventListener('change', function() {
        if (this.checked) {
          settingsGroup.style.display = 'block';
          settingsGroup.style.height = '0';
          setTimeout(() => {
            settingsGroup.style.height = settingsGroup.scrollHeight + 'px';
          }, 10);
        } else {
          settingsGroup.style.height = '0';
          setTimeout(() => {
            settingsGroup.style.display = 'none';
          }, 300);
        }
      });
    }
  });
  

  
  // Add click handlers to published-url elements
  const publishedUrlElements = windowElement.querySelectorAll('.published-url');
  publishedUrlElements.forEach(urlElement => {
    // Make the URL visually appear as a link

    
    urlElement.addEventListener('click', function(e) {
      e.stopPropagation(); // Prevent event bubbling
      
      // Get the URL from the element
      const url = this.textContent || this.innerText;
      
      // Generate a unique window ID
      const windowId = `url-window-${Date.now()}`;
      
      // Create a window from the generic window template
      const urlWindow = createWindowFromTemplate('window', windowId, false);
      
      if (!urlWindow) return;
      
      // Set window title and icon, and add window controls
      const windowHeader = urlWindow.querySelector('.window-header');
      if (windowHeader) {
        windowHeader.innerHTML = `
          <button class="menu-toggle">
            <i class="fas fa-bars"></i>
          </button>
          <div class="window-title">
            <div class="window-icon blue-icon">
              <i class="fas fa-globe"></i>
            </div>
            <span>${url}</span>
          </div>
          <div class="window-controls">
            <button class="window-minimize" title="Minimize"><i class="fas fa-minus"></i></button>
            <button class="window-popout" title="Pop out"><i class="fas fa-up-right-from-square"></i></button>
            <button class="window-maximize" title="Maximize"><i class="fas fa-expand"></i></button>
            <button class="window-close" title="Close"><i class="fas fa-times"></i></button>
          </div>
        `;
      }
      
          // Add browser class to the window for specific styling
          urlWindow.classList.add('browser-window');
      // Add iframe content with proper window structure
      const windowContent = urlWindow.querySelector('.window-content');
      if (windowContent) {
        // Set proper flex layout on window-content
        windowContent.style.display = 'flex';
        windowContent.style.flexDirection = 'column';
        windowContent.style.height = '100%';
        
        windowContent.innerHTML = `
          <div class="sidebar-overlay"></div>
          <div class="window-main-content" style="width: 100%; height: 100%; display: flex; flex-direction: column; flex: 1;">
            <div class="window-toolbar" style="display: flex; align-items: center; gap: 10px; padding: 8px 12px; border-bottom: 1px solid var(--border-color); flex-shrink: 0;">
              <button disabled class="toolbar-button" style="opacity: 0.5;"><i class="fas fa-arrow-left"></i></button>
              <button disabled class="toolbar-button" style="opacity: 0.5;"><i class="fas fa-arrow-right"></i></button>
              <button class="toolbar-button refresh-btn" title="Refresh"><i class="fas fa-redo"></i></button>
              <div class="browser-url-address" style="flex: 1; background: var(--input-bg); border-radius: 20px; padding: 8px 12px; display: flex; align-items: center; border: 1px solid var(--border-color);">
                <i class="fas fa-lock" style="margin-right: 8px; color: var(--os-gray);"></i>
                <span style="color: var(--text-color); font-size: 13px;">${url}</span>
              </div>
              <button class="toolbar-button" style="opacity: 0.5;"><i class="fas fa-ellipsis-h"></i></button>
            </div>
            <div class="window-app-content" style="flex: 1; position: relative; overflow: hidden; min-height: 0;">
              <iframe src="https://${url}" style="width: 100%; height: 100%; border: none; background: white; display: block;" frameborder="0" allowfullscreen sandbox="allow-same-origin allow-scripts allow-popups allow-forms allow-top-navigation"></iframe>
            </div>
          </div>
        `;
        
        // Add event handler for refresh button
        const refreshBtn = windowContent.querySelector('.refresh-btn');
        if (refreshBtn) {
          refreshBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            const iframe = windowContent.querySelector('iframe');
            if (iframe) {
              iframe.src = iframe.src; // Reload the iframe
            }
          });
        }
        
      }
      
      // Add event handlers for window controls
      const windowControls = urlWindow.querySelector('.window-controls');
      if (windowControls) {
        // Minimize button
        const minimizeBtn = windowControls.querySelector('.window-minimize');
        if (minimizeBtn) {
          minimizeBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            const currentTaskbarIcon = openWindows[windowId] ? openWindows[windowId].taskbarIcon : null;
            toggleMinimizeWindow(urlWindow, currentTaskbarIcon);
          });
        }
        
        // Maximize button
        const maximizeBtn = windowControls.querySelector('.window-maximize');
        if (maximizeBtn) {
          maximizeBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            if (window.innerWidth <= 767) return; // MOBILE_BREAKPOINT
            
            const isMaximized = urlWindow.classList.contains('maximized');
            if (isMaximized) {
              // Restore
              urlWindow.classList.remove('maximized');
              maximizeBtn.innerHTML = '<i class="fas fa-expand"></i>';
              maximizeBtn.title = 'Maximize';
              
              // Restore to previous size
              urlWindow.style.width = urlWindow.dataset.prevWidth || '800px';
              urlWindow.style.height = urlWindow.dataset.prevHeight || '600px';
              urlWindow.style.left = urlWindow.dataset.prevLeft || '100px';
              urlWindow.style.top = urlWindow.dataset.prevTop || '100px';
              urlWindow.style.resize = '';
            } else {
              // Maximize
              urlWindow.dataset.prevWidth = urlWindow.style.width || urlWindow.offsetWidth + 'px';
              urlWindow.dataset.prevHeight = urlWindow.style.height || urlWindow.offsetHeight + 'px';
              urlWindow.dataset.prevLeft = urlWindow.style.left || urlWindow.offsetLeft + 'px';
              urlWindow.dataset.prevTop = urlWindow.style.top || urlWindow.offsetTop + 'px';
              
              urlWindow.style.width = '100%';
              urlWindow.style.height = '100%';
              urlWindow.style.left = '0px';
              urlWindow.style.top = '0px';
              urlWindow.style.resize = 'none';
              urlWindow.classList.add('maximized');
              
              maximizeBtn.innerHTML = '<i class="fas fa-compress"></i>';
              maximizeBtn.title = 'Restore';
            }
            makeWindowActive(urlWindow);
          });
        }
        
        // Popout button
        const popoutBtn = windowControls.querySelector('.window-popout');
        if (popoutBtn) {
          popoutBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            // Get window position and size
            const rect = urlWindow.getBoundingClientRect();
            const screenLeft = window.screenX || window.screenLeft || 0;
            const screenTop = window.screenY || window.screenTop || 0;
            const chromeHeight = (window.outerHeight - window.innerHeight) || 0;
            const left = Math.round(screenLeft + rect.left);
            const top = Math.round(screenTop + rect.top + chromeHeight);
            const width = Math.round(rect.width);
            const height = Math.round(rect.height);
            
            // Open popout window
            const popoutWin = window.open(`https://${url}`, '_blank', `width=${width},height=${height},left=${left},top=${top},menubar=no,toolbar=yes,location=yes,status=no,scrollbars=yes,resizable=yes`);
            
            if (popoutWin) {
              // Close the original browser window
              closeBtn.click();
            }
          });
        }
        
        // Close button
        const closeBtn = windowControls.querySelector('.window-close');
        if (closeBtn) {
          closeBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            const currentTaskbarIcon = openWindows[windowId] ? openWindows[windowId].taskbarIcon : null;
            
            // Close window with animation
            urlWindow._isClosing = true;
            urlWindow.classList.add('window-anim-close');
            
            urlWindow.addEventListener('animationend', function handler(ev) {
              if (ev.animationName === 'windowClose') {
                // Clean up taskbar icon
                if (currentTaskbarIcon && currentTaskbarIcon.parentNode) {
                  if (!currentTaskbarIcon.classList.contains('pinned-only')) {
                    currentTaskbarIcon.remove();
                  } else {
                    currentTaskbarIcon.classList.remove('opened-app', 'active');
                  }
                }
                
                // Clean up window
                delete openWindows[windowId];
                urlWindow.remove();
                if (activeWindow === urlWindow) activeWindow = null;
                if (typeof renderPinnedTaskbarIcons === 'function') renderPinnedTaskbarIcons();
                if (typeof updateTaskbarActiveState === 'function') updateTaskbarActiveState();
              }
            }, { once: true });
          });
        }
      }
      
      // Register the window in openWindows
      openWindows[windowId] = {
        element: urlWindow,
        name: 'browser',
        title: url,
        iconClass: 'fa-globe',
        iconBgClass: 'blue-icon',
        appTitle: url
      };
      
      makeWindowActive(urlWindow);
      if (typeof renderPinnedTaskbarIcons === 'function') renderPinnedTaskbarIcons();
    });
  });

  // Add event listeners to settings save buttons
  const saveButtons = windowElement.querySelectorAll('.settings-save-btn');
  saveButtons.forEach(button => {
    button.addEventListener('click', function() {
      const settingsSection = this.closest('.page-settings-section');
      if (settingsSection) {
        // Here you would normally save the settings to a database
        // For this demo, we'll just show a success message
        
        // Create a notification element
        const notification = document.createElement('div');
        notification.className = 'settings-notification';
        notification.innerHTML = '<i class="fas fa-check-circle"></i> Settings saved successfully';
        notification.style.position = 'fixed';
        notification.style.bottom = '20px';
        notification.style.right = '20px';
        notification.style.backgroundColor = '#10B981';
        notification.style.color = 'white';
        notification.style.padding = '12px 20px';
        notification.style.borderRadius = '6px';
        notification.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
        notification.style.zIndex = '10000';
        notification.style.display = 'flex';
        notification.style.alignItems = 'center';
        notification.style.gap = '8px';
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(20px)';
        notification.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        
        // Add to document
        document.body.appendChild(notification);
        
        // Show with animation
        setTimeout(() => {
          notification.style.opacity = '1';
          notification.style.transform = 'translateY(0)';
        }, 10);
        
        // Hide after 3 seconds
        setTimeout(() => {
          notification.style.opacity = '0';
          notification.style.transform = 'translateY(20px)';
          
          // Remove from DOM after animation
          setTimeout(() => {
            notification.remove();
          }, 300);
        }, 3000);
        
        // Find the parent item and the settings button
        const parentItem = settingsSection.closest('.sitebuilder-iteam-content');
        const settingsButton = parentItem ? parentItem.querySelector('.action-btn.settings-btn') : null;
        const settingsIcon = settingsButton ? settingsButton.querySelector('i') : null;
        
        // Close the settings section
        settingsSection.style.height = '0';
        setTimeout(() => {
          settingsSection.style.display = 'none';
        }, 300);
        
        // Change icon from X mark back to gear
        if (settingsIcon && settingsIcon.classList.contains('fa-xmark')) {
          settingsIcon.classList.remove('fa-xmark');
          settingsIcon.classList.add('fa-gear');
        }
      }
    });
  });

  // Add event listener for add-new-page-btn dropdown
  const addNewPageBtn = windowElement.querySelector('.add-new-page-btn');
  if (addNewPageBtn) {
    addNewPageBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      
      // Find the window-toolbar and sitebuilder-main-content
      const windowToolbar = windowElement.querySelector('.window-toolbar');
      const mainContent = windowElement.querySelector('.sitebuilder-main-content');
      
      if (!windowToolbar || !mainContent) return;
      
      // Check if dropdown already exists
      let addPageDropdown = windowElement.querySelector('.add-page-dropdown');
      
      if (addPageDropdown) {
        // Toggle existing dropdown
        if (addPageDropdown.style.display === 'none' || addPageDropdown.style.height === '0px') {
          // Show dropdown and scroll to top
          addPageDropdown.style.display = 'block';
          setTimeout(() => {
            addPageDropdown.style.height = addPageDropdown.scrollHeight + 'px';
          }, 10);
          
          // Scroll to top of main content to show the dropdown
          if (mainContent) {
            mainContent.scrollTo({
              top: 0,
              behavior: 'smooth'
            });
          }
        } else {
          // Hide dropdown
          addPageDropdown.style.height = '0';
          setTimeout(() => {
            addPageDropdown.style.display = 'none';
          }, 300);
        }
      } else {
        // Create new dropdown
        addPageDropdown = document.createElement('div');
        addPageDropdown.className = 'add-page-dropdown page-settings-section';
        addPageDropdown.style.display = 'none';
        addPageDropdown.style.height = '0';
        addPageDropdown.style.overflow = 'hidden';
        addPageDropdown.style.transition = 'height 0.3s ease-in-out';
        
        // Create dropdown content using the same template as page settings
        addPageDropdown.innerHTML = `
          <div class="page-settings-row-header" style="margin-bottom: 30px;">
          <h2>Add New Page</h2>
          </div>
        <div class="page-settings-row">
      <div class="page-settings-row-left">
        <div class="settings-group">
          <h3>General</h3>
          <div class="settings-item">
            <label>Page Title</label>
            <input type="text" class="settings-input" value="Portfolio">
          </div>
          <div class="settings-item">
            <label>URL Slug</label>
            <div class="settings-url-input">
              <span class="settings-url-prefix">mywebsite.com/</span>
              <input type="text" class="settings-input url-slug" value="portfolio">
            </div>
          </div>
        </div>
        <div class="settings-group">
          <div class="settings-group-header">
        <h3>Search Engine Optimization</h3> 

        <div class="toggle-switch">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>

        <div class="publishing-options-section">
          <div class="settings-item">
            <label>Meta Title</label>
            <input type="text" class="settings-input" value="Portfolio - My Website">
          </div>
          <div class="settings-item">
            <label>Meta Description</label>
            <textarea class="settings-textarea">Check out my portfolio of recent projects and work.</textarea>
          </div>
<div class="publish-section">  
 <div class="form-row-top-input">
             <label class="publish-label">SEO Exclusion</label>
             </div>
<div class="checkbox-option">
                  <input type="checkbox" id="no-index-page">
                  <label for="no-index-page">No index (exclude from search engines)</label>
                </div>
                <div class="checkbox-option" style="margin-top: 10px;">
                  <input type="checkbox" id="no-follow-page">
                  <label for="no-follow-page">No follow (do not follow links)</label>
                </div>
                                <div class="checkbox-option" style="margin-top: 10px;">
                  <input type="checkbox" id="exclude-page-from-sitemap">
                  <label for="exclude-page-from-sitemap">Exclude page from sitemap</label>
                </div>
            </div>
        </div>
        </div>
<div class="settings-group">
          <h3>Social Sharing</h3>
          <div class="settings-item">
            
          </div>
          <div class="settings-item">
            <label>Social Image</label>
            <div class="settings-image-upload">
              <i class="fas fa-upload"></i>
              <span>Upload Image</span>

              </div>
                            <div class="upload-image-description">
                <span>When a Recomandat image or an OpenGraph Image is not set for individual posts/pages/CPTs, this image will be used as a fallback thumbnail when your post is shared on Facebook. The recommended image size is 1200 x 630 pixels.
</span>
            </div>
          </div>
        </div>

      </div>


      <div class="page-settings-row-right">
        <div class="settings-group">
          <h3>Publishing Options</h3>

<div class="publishing-options-section">
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Status</label>
            <div class="schedule-publish-btn">Schedule</div>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Published</option>
                <option value="draft" style="color: #333 !important;">Draft</option>
                <option value="archived" style="color: #333 !important;">Staff Review</option>
              </select>
            </div>
          </div>
          
          <div class="publish-section">
            <label class="publish-label">Schedule publishing</label>
            <div class="date-picker-container">
              <input type="text" class="form-control date-input" value="05-01-2025">
              <button class="calendar-button">
                <i class="fas fa-calendar-alt"></i>
              </button>
            </div>
          </div>
</div>

</div>




        <div class="settings-group">
        <div class="settings-group-header">
        <h3>Visibility</h3> 

        <div class="toggle-switch">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>
<div class="publishing-options-section">


<div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Language</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">English</option>
                                <option value="draft" style="color: #333 !important;">Spanish</option>
                <option value="draft" style="color: #333 !important;">French</option>
                <option value="archived" style="color: #333 !important;">German</option>
              </select>
            </div>
          </div>
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Parent Page</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Main page (no parent)</option>
                <option value="Homepage" style="color: #333 !important;">Home</option>
                <option value="draft" style="color: #333 !important;">About</option>
                <option value="archived" style="color: #333 !important;">Contact</option>
              </select>
            </div>
          </div>
        
</div>
</div>

        <div class="settings-group">
        <div class="settings-group-header">
        <h3>Custom Style</h3> 

        <div class="toggle-switch">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>

<div class="publishing-options-section">
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Header</label>
            <div class="schedule-publish-btn">New header</div>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Default</option>
                <option value="Homepage" style="color: #333 !important;">Header design 1</option>
                <option value="draft" style="color: #333 !important;">Header design 2</option>
                <option value="archived" style="color: #333 !important;">Header design 3</option>
                <option value="separator" style="color: #333 !important;" disabled>────────────────────────</option>
                                <option value="archived" style="color: #333 !important; margin-bottom: 10px;">! Without Header</option>
              </select>
            </div>
          </div>

                  <div class="settings-group">
        <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Template</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Default</option>
                                <option value="draft" style="color: #333 !important;">Boxed</option>
                <option value="draft" style="color: #333 !important;">Sidebar</option>
                <option value="archived" style="color: #333 !important;">Full Width</option>
              </select>
            </div>
          </div>

                  <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Footer</label>
            <div class="schedule-publish-btn">New footer</div>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Default</option>
                <option value="draft" style="color: #333 !important;">Footer design 1</option>
                <option value="draft" style="color: #333 !important;">Footer design 2</option>
                <option value="archived" style="color: #333 !important;">Footer design 3</option>
                                <option value="separator" style="color: #333 !important;" disabled>────────────────────────</option>
                                <option value="nofoooter" style="color: #333 !important;">Without Footer</option>
              </select>
            </div>
          </div>
        <div class="settings-group">
                  <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Override Logo</label>
            <div class="schedule-publish-btn">Other formats</div>
            </div>
            <div class="upload-container">
<input type="file" id="avatar" name="avatar" accept="image/png, image/jpeg" />
            </div>
          </div>

                            <div class="publish-section">  
 <div class="form-row-top-input">
             <label class="publish-label">Breadcrumbs</label>
             </div>
<div class="checkbox-option">
                  <input type="checkbox" id="enable-breadcrumbs" checked="">
                  <label for="enable-breadcrumbs">Enable breadcrumbs for this page</label>
                </div>
            </div>
          </div>




          
</div></div>



</div>



          
        <div class="settings-group">
<div class="settings-group-header">
        <h3>Privacy</h3> 

        <div class="toggle-switch">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>
<div class="publishing-options-section">
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Password protected</label>
            <div class="schedule-publish-btn">Schedule</div>
            </div>
<div class="date-picker-container">
              <input type="text" class="form-control date-input" value=" ">
              <button class="calendar-button">
                <i class="fas fa-lock"></i>
              </button>
            </div>
          </div>
        <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Private</label>
            </div>
            <div class="checkbox-option">
                  <input type="checkbox" id="private-page" checked="">
                  <label for="private-page">Private (exclude from sitemap)</label>
                </div>
          </div>
</div>
</div>



</div> 
      </div>
    </div>

      

<div class="page-settings-footer">



    <div class="settings-actions">
      <div class="page-settings-footer-left">
            <div class="page-settings-header-right">
<span>Page ID: #25690-EN</span>
      </div>
      <div class="page-settings-header-left">
      <span class="published">Published 2022/01/19 at 4:27 pm</span>
      <span class="published">Last edited 2022/01/19 at 4:27 pm</span>
      </div>

      </div>
      <div class="page-settings-footer-right">
      <button class="settings-cancel-btn">Cancel</button>
      <button class="settings-save-btn">Save Changes</button>
      </div>
    </div>


    
    </div>
        `;
        
        // Insert dropdown at the beginning of sitebuilder-main-content
        mainContent.insertAdjacentElement('afterbegin', addPageDropdown);
        
        // Show dropdown with animation
        addPageDropdown.style.display = 'block';
        setTimeout(() => {
          addPageDropdown.style.height = addPageDropdown.scrollHeight + 'px';
        }, 10);
        
        // Scroll to top of main content to show the dropdown
        if (mainContent) {
          mainContent.scrollTo({
            top: 0,
            behavior: 'smooth'
          });
        }
        
        // Setup toggle switches for the dropdown content
        setupDropdownToggles(addPageDropdown);
        
        // Add event listeners for cancel and save buttons
        const cancelBtn = addPageDropdown.querySelector('.settings-cancel-btn');
        const saveBtn = addPageDropdown.querySelector('.settings-save-btn');
        
        if (cancelBtn) {
          cancelBtn.addEventListener('click', function() {
            addPageDropdown.style.height = '0';
            setTimeout(() => {
              addPageDropdown.style.display = 'none';
            }, 300);
          });
        }
        
        if (saveBtn) {
          saveBtn.addEventListener('click', function() {
            // Get form values
            const titleInput = addPageDropdown.querySelector('.settings-input');
            const slugInput = addPageDropdown.querySelector('.url-slug');
            const pageTypeSelect = addPageDropdown.querySelector('select');
            
            const title = titleInput ? titleInput.value.trim() : '';
            const slug = slugInput ? slugInput.value.trim() : '';
            const pageType = pageTypeSelect ? pageTypeSelect.value : 'page';
            
            if (!title) {
              alert('Please enter a page title');
              return;
            }
            
            // Auto-generate slug if empty
            let finalSlug = slug;
            if (!finalSlug && title) {
              finalSlug = title.toLowerCase()
                .replace(/[^a-z0-9\s-]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .trim('-');
            }
            
            // Create success notification
            const notification = document.createElement('div');
            notification.className = 'settings-notification';
            notification.innerHTML = '<i class="fas fa-check-circle"></i> Page "' + title + '" created successfully';
            notification.style.position = 'fixed';
            notification.style.bottom = '20px';
            notification.style.right = '20px';
            notification.style.backgroundColor = '#10B981';
            notification.style.color = 'white';
            notification.style.padding = '12px 20px';
            notification.style.borderRadius = '6px';
            notification.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
            notification.style.zIndex = '10000';
            notification.style.display = 'flex';
            notification.style.alignItems = 'center';
            notification.style.gap = '8px';
            notification.style.opacity = '0';
            notification.style.transform = 'translateY(20px)';
            notification.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
              notification.style.opacity = '1';
              notification.style.transform = 'translateY(0)';
            }, 10);
            
            setTimeout(() => {
              notification.style.opacity = '0';
              notification.style.transform = 'translateY(20px)';
              setTimeout(() => notification.remove(), 300);
            }, 3000);
            
            // Hide dropdown
            addPageDropdown.style.height = '0';
            setTimeout(() => {
              addPageDropdown.style.display = 'none';
            }, 300);
          });
        }
        
        // Auto-generate slug when title changes
        const titleInput = addPageDropdown.querySelector('.settings-input');
        const slugInput = addPageDropdown.querySelector('.url-slug');
        
        if (titleInput && slugInput) {
          titleInput.addEventListener('input', function() {
            if (!slugInput.value.trim()) {
              const autoSlug = this.value.toLowerCase()
                .replace(/[^a-z0-9\s-]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .trim('-');
              slugInput.value = autoSlug;
            }
          });
        }
      }
    });
  }

  // Add global click handler to close add-page-dropdown when clicking outside
  document.addEventListener('click', function(e) {
    const addPageDropdown = windowElement.querySelector('.add-page-dropdown');
    const addNewPageBtn = windowElement.querySelector('.add-new-page-btn');
    
    if (addPageDropdown && addPageDropdown.style.display !== 'none') {
      // Check if click is outside both the dropdown and the button
      if (!addPageDropdown.contains(e.target) && !addNewPageBtn.contains(e.target)) {
        addPageDropdown.style.height = '0';
        setTimeout(() => {
          addPageDropdown.style.display = 'none';
        }, 300);
      }
    }
  });

  // Function to setup toggle switches for dropdown content
  function setupDropdownToggles(dropdownElement) {
    // Add toggle switch functionality for publishing options sections
    const toggleSwitches = dropdownElement.querySelectorAll('.settings-group-header .toggle-switch input');
    toggleSwitches.forEach(toggle => {
      // Get the corresponding publishing-options-section
      const settingsGroupHeader = toggle.closest('.settings-group-header');
      const settingsGroup = settingsGroupHeader.nextElementSibling;
      
      if (settingsGroup && settingsGroup.classList.contains('publishing-options-section')) {
        // Set initial state based on toggle - default to unchecked/hidden
        toggle.checked = false;
        settingsGroup.style.display = 'none';
        settingsGroup.style.height = '0';
        
        // Make the entire header clickable
        settingsGroupHeader.addEventListener('click', function(e) {
          // Don't toggle if clicking directly on the checkbox (it handles its own state)
          if (e.target !== toggle) {
            toggle.checked = !toggle.checked;
            
            // Trigger the change event
            const changeEvent = new Event('change');
            toggle.dispatchEvent(changeEvent);
          }
        });
        
        // Add event listener for toggle changes
        toggle.addEventListener('change', function() {
          if (this.checked) {
            settingsGroup.style.display = 'block';
            settingsGroup.style.height = '0';
            setTimeout(() => {
              settingsGroup.style.height = settingsGroup.scrollHeight + 'px';
              // Update the main dropdown height to accommodate the expanded content
              setTimeout(() => {
                const mainDropdown = dropdownElement;
                if (mainDropdown && mainDropdown.style.display !== 'none') {
                  mainDropdown.style.height = mainDropdown.scrollHeight + 'px';
                }
              }, 50);
            }, 10);
          } else {
            settingsGroup.style.height = '0';
            setTimeout(() => {
              settingsGroup.style.display = 'none';
              // Update the main dropdown height after content is hidden
              setTimeout(() => {
                const mainDropdown = dropdownElement;
                if (mainDropdown && mainDropdown.style.display !== 'none') {
                  mainDropdown.style.height = mainDropdown.scrollHeight + 'px';
                }
              }, 50);
            }, 300);
          }
        });
      }
    });
  }

  // Add click event listeners to each sitebuilder-iteam-content
  sitebuilderItemContents.forEach(item => {
    item.addEventListener('click', function(e) {
      // Check if the clicked element is or is inside a published-url element
      const isPublishedUrl = e.target.classList.contains('published-url') || 
                             e.target.closest('.published-url');
      
      // Check if the clicked element is or is inside an action button
      const isActionButton = e.target.classList.contains('action-btn') || 
                             e.target.closest('.action-btn') ||
                             e.target.classList.contains('page-action-btn') ||
                             e.target.closest('.page-action-btn');
      
      // Check if the clicked element is inside a page-settings-section
      const isInsideSettings = e.target.classList.contains('page-settings-section') ||
                               e.target.closest('.page-settings-section');
      
      // If the clicked element is a published-url, let the direct click handler handle it
      if (isPublishedUrl) {
        return;
      }
      
      // If the clicked element is inside settings section, don't toggle
      if (isInsideSettings) {
        return;
      }
      
      // Handle edit button clicks specifically
      if (isActionButton) {
        const editButton = e.target.closest('.page-action-btn');
        if (editButton && editButton.textContent.includes('Edit')) {
          e.preventDefault();
          e.stopPropagation();
          openSiteBuilderEditor(editButton);
          return;
        }
      }
      
      // If the clicked element is not an action button and not a published-url,
      // toggle the page actions row (like clicking the edit button)
      if (!isActionButton) {
        const editButton = this.querySelector('.action-btn.edit-btn');
        if (editButton) {
          togglePageActionsRow(editButton);
        }
      }
    });
  });

  // Function to open the site builder editor window
  function openSiteBuilderEditor(editButton) {
    // Get page information from the clicked item
    const pageItem = editButton.closest('.sitebuilder-iteam-content');
    const pageTitle = pageItem ? pageItem.querySelector('.page-title')?.textContent || 'Untitled Page' : 'Untitled Page';
    const pageUrl = pageItem ? pageItem.querySelector('.published-url')?.textContent || '' : '';
    
    // Create a new window for the site builder editor (full screen)
    const editorWindow = document.createElement('div');
    editorWindow.className = 'window sitebuilder-editor-window';
    editorWindow.id = 'sitebuilder-editor-' + Date.now(); // Unique ID for window management
    
    editorWindow.innerHTML = `
      <div class="elementor-header window-header">
        <div class="header-left">
          <div class="elementor-logo">
            <i class="fas fa-cube"></i>
            Builder
          </div>

          <div class="header-panel-buttons">
            <button class="header-panel-btn active" data-panel="elements">
              <i class="fas fa-cube"></i>
            </button>
            <button class="header-panel-btn" data-panel="style">
              <i class="fas fa-sliders"></i>
            </button>
            <button class="header-panel-btn" data-panel="layers">
              <i class="fas fa-layer-group"></i>
            </button>
                        <button class="header-panel-btn" data-panel="page-settings-section">
              <i class="fas fa-gear"></i>
            </button>
          </div>
        </div>
        
        <div class="header-center">
          <button class="header-btn responsive-btn desktop-view active" data-view="desktop">
            <i class="fas fa-desktop"></i>
          </button>
          <button class="header-btn responsive-btn tablet-view" data-view="tablet">
            <i class="fas fa-tablet-alt"></i>
          </button>
          <button class="header-btn responsive-btn mobile-view" data-view="mobile">
            <i class="fas fa-mobile-alt"></i>
          </button>
        </div>
        
        <div class="header-right">
                  <div class="header-panel-buttons">
            <button class="header-btn" data-panel="undoo">
              <i class="fas fa-rotate-left"></i>
            </button>
            <button class="header-btn" data-panel="redoo">
              <i class="fas fa-rotate-right"></i>
            </button>
            <button class="header-btn" data-panel="show-split-lines">
              <i class="fas fa-border-none"></i>
            </button>
                        <button class="header-btn" data-panel="show-code">
              <i class="fas fa-code"></i>
            </button>
                      <button class="header-btn">
            <i class="fas fa-eye"></i>
          </button>
          </div>

          <div class="publish-button-group">
            <button class="header-btn publish-btn">
              <i class="fas fa-paper-plane" style="margin-right: 10px;"></i> Publish
            </button>
            <button class="header-btn publish-dropdown-btn">
              <i class="fas fa-chevron-down"></i>
            </button>
            <div class="publish-dropdown-menu">
              <div class="publish-dropdown-item" data-action="save-draft">
                <i class="fas fa-save"></i>
                Save as Draft
              </div>
              <div class="publish-dropdown-item" data-action="save-template">
                <i class="fas fa-sheet-plastic"></i>
                Save as Template
              </div>
              <div class="publish-dropdown-item" data-action="publish-private">
                <i class="fas fa-lock"></i>
                Publish Privately
              </div>
            </div>
          </div>
          <button class="header-btn close-btn window-close">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      
      <div class="window-content">
        <!-- Left Sidebar - Panel Container -->
        <div class="editor-sidebar">
          <!-- Elements Panel - Widget Library (No tabs, just search and widgets) -->
          <div class="sidebar-panel elements-panel active">
            <!-- Search Bar -->
            <div class="sidebar-search">
              <input type="text" placeholder="Search Widget...">
            </div>
            
            <!-- Widget Library Content -->
            <div class="elements-content">
              <!-- Basic Elements -->
              <div class="widget-category">
                <h4>Basic</h4>
                <div class="widget-grid">
                  <div class="widget-item" draggable="true" data-widget="inner-section">
                    <i class="fas fa-th-large"></i>
                    <div>Inner Section</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="heading">
                    <i class="fas fa-heading"></i>
                    <div>Heading</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="image">
                    <i class="fas fa-image"></i>
                    <div>Image</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="text">
                    <i class="fas fa-font"></i>
                    <div>Text Editor</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="video">
                    <i class="fas fa-play-circle"></i>
                    <div>Video</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="button">
                    <i class="fas fa-mouse-pointer"></i>
                    <div>Button</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="divider">
                    <i class="fas fa-minus"></i>
                    <div>Divider</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="spacer">
                    <i class="fas fa-arrows-alt-v"></i>
                    <div>Spacer</div>
                  </div>
                </div>
              </div>
              
              <!-- General Elements -->
              <div class="widget-category">
                <h4>General</h4>
                <div class="widget-grid">
                  <div class="widget-item" draggable="true" data-widget="icon-box">
                    <i class="fas fa-cube"></i>
                    <div>Image Box</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="icon">
                    <i class="fas fa-star"></i>
                    <div>Icon Box</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="gallery">
                    <i class="fas fa-images"></i>
                    <div>Image Carousel</div>
                  </div>
                  <div class="widget-item" draggable="true" data-widget="gallery">
                    <i class="fas fa-th"></i>
                    <div>Basic Gallery</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Style Panel - Element Styling (Has tabs) -->
          <div class="sidebar-panel style-panel">
            <div class="sidebar-tabs">
              <button class="sidebar-tab active" data-tab="content">
                Content
              </button>
              <button class="sidebar-tab" data-tab="style">
                Style
              </button>
              <button class="sidebar-tab" data-tab="advanced">
                Advanced
              </button>
            </div>
            
            <div class="tab-content content-tab active">
              <div class="properties-panel-inline">
                <div class="properties-content">
                  <div class="properties-header">
                    <h3>Content Settings</h3>
                  </div>
                  <div class="properties-body">
                    <p>Select an element to edit its content properties</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="tab-content style-tab">
              <div class="properties-panel-inline">
                <div class="properties-content">
                  <div class="properties-header">
                    <h3>Style Settings</h3>
                  </div>
                  <div class="properties-body">
                    <p>Select an element to edit its style properties</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="tab-content advanced-tab">
              <div class="properties-panel-inline">
                <div class="properties-content">
                  <div class="properties-header">
                    <h3>Advanced Style Settings</h3>
                  </div>
                  <div class="properties-body">
                    <p>Select an element to edit its advanced style properties</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Advanced Panel - Advanced Settings (Has tabs) -->
          <div class="sidebar-panel advanced-panel">
            <div class="sidebar-tabs">
              <button class="sidebar-tab active" data-tab="content">
                Content
              </button>
              <button class="sidebar-tab" data-tab="style">
                Style
              </button>
              <button class="sidebar-tab" data-tab="advanced">
                Advanced
              </button>
            </div>
            
            <div class="tab-content content-tab active">
              <div class="properties-panel-inline">
                <div class="properties-content">
                  <div class="properties-header">
                    <h3>Advanced Content Settings</h3>
                  </div>
                  <div class="properties-body">
                    <p>Select an element to edit its advanced content properties</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="tab-content style-tab">
              <div class="properties-panel-inline">
                <div class="properties-content">
                  <div class="properties-header">
                    <h3>Advanced Style Settings</h3>
                  </div>
                  <div class="properties-body">
                    <p>Select an element to edit its advanced style properties</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="tab-content advanced-tab">
              <div class="properties-panel-inline">
                <div class="properties-content">
                  <div class="properties-header">
                    <h3>Advanced Configuration</h3>
                  </div>
                  <div class="properties-body">
                    <p>Select an element to edit its advanced configuration</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Page Settings Panel - Page Configuration -->
          <div class="sidebar-panel page-settings-section-panel">
            <div class="page-settings-panel-content">
              <div class="page-settings-header">
                <h3>Page Settings</h3>
              </div>
              <div class="page-settings-body">
                <div class="page-settings-row">
                  <div class="page-settings-row-left">
                    <div class="settings-group">
                      <h3>General</h3>
                      <div class="settings-item">
                        <label>Page Title</label>
                        <input type="text" class="settings-input" value="Portfolio">
                      </div>
                      <div class="settings-item">
                        <label>URL Slug</label>
                        <div class="settings-url-input">
                          <span class="settings-url-prefix">mywebsite.com/</span>
                          <input type="text" class="settings-input url-slug" value="portfolio">
                        </div>
                      </div>
                    </div>

<div class="settings-group">
                      <h3>Publishing Options</h3>
                      <div class="publishing-options-section">
                        <div class="publish-section">
                          <div class="form-row-top-input">
                            <label class="publish-label">Status</label>
                            <div class="schedule-publish-btn">Schedule</div>
                          </div>
                          <div class="select-container">
                            <select class="form-control">
                              <option value="active" selected="" style="color: #333 !important;">Published</option>
                              <option value="draft" style="color: #333 !important;">Draft</option>
                              <option value="archived" style="color: #333 !important;">Staff Review</option>
                            </select>
                          </div>
                        </div>
                        <div class="publish-section">
                          <label class="publish-label">Schedule publishing</label>
                          <div class="date-picker-container">
                            <input type="text" class="form-control date-input" value="05-01-2025">
                            <button class="calendar-button">
                              <i class="fas fa-calendar-alt"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>


                    <div class="settings-group">
                      <div class="settings-group-header">
                        <h3>Search Engine Optimization</h3> 
                        <div class="toggle-switch">
                          <input type="checkbox" class="section-toggle">
                          <span class="toggle-slider"></span>
                        </div>
                      </div>
                      <div class="publishing-options-section">
                        <div class="settings-item">
                          <label>Meta Title</label>
                          <input type="text" class="settings-input" value="Portfolio - My Website">
                        </div>
                        <div class="settings-item">
                          <label>Meta Description</label>
                          <textarea class="settings-textarea">Check out my portfolio of recent projects and work.</textarea>
                        </div>
                        <div class="publish-section">  
                          <div class="form-row-top-input">
                            <label class="publish-label">SEO Exclusion</label>
                          </div>
                          <div class="checkbox-option">
                            <input type="checkbox" id="no-index-page">
                            <label for="no-index-page">No index (exclude from search engines)</label>
                          </div>
                          <div class="checkbox-option" style="margin-top: 10px;">
                            <input type="checkbox" id="no-follow-page">
                            <label for="no-follow-page">No follow (do not follow links)</label>
                          </div>
                          <div class="checkbox-option" style="margin-top: 10px;">
                            <input type="checkbox" id="exclude-page-from-sitemap">
                            <label for="exclude-page-from-sitemap">Exclude page from sitemap</label>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="settings-group">
                      <h3>Social Sharing</h3>
                      <div class="settings-item">
                        <label>Social Image</label>
                        <div class="settings-image-upload">
                          <i class="fas fa-upload"></i>
                          <span>Upload Image</span>
                        </div>
                        <div class="upload-image-description">
                          <span>When a Recommended image or an OpenGraph Image is not set for individual posts/pages/CPTs, this image will be used as a fallback thumbnail when your post is shared on Facebook. The recommended image size is 1200 x 630 pixels.</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="page-settings-row-right">
                                        <div class="settings-group">
                      <div class="settings-group-header">
                        <h3>Visibility</h3> 
                        <div class="toggle-switch">
                          <input type="checkbox" class="section-toggle">
                          <span class="toggle-slider"></span>
                        </div>
                      </div>
                      <div class="publishing-options-section">
                        <div class="publish-section">  
                          <div class="form-row-top-input">
                            <label class="publish-label">Language</label>
                          </div>
                          <div class="select-container">
                            <select class="form-control">
                              <option value="active" selected="" style="color: #333 !important;">English</option>
                              <option value="draft" style="color: #333 !important;">Spanish</option>
                              <option value="draft" style="color: #333 !important;">French</option>
                              <option value="archived" style="color: #333 !important;">German</option>
                            </select>
                          </div>
                        </div>
                        <div class="publish-section">
                          <div class="form-row-top-input">
                            <label class="publish-label">Parent Page</label>
                          </div>
                          <div class="select-container">
                            <select class="form-control">
                              <option value="active" selected="" style="color: #333 !important;">Main page (no parent)</option>
                              <option value="Homepage" style="color: #333 !important;">Home</option>
                              <option value="draft" style="color: #333 !important;">About</option>
                              <option value="archived" style="color: #333 !important;">Contact</option>
                            </select>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="settings-group">
                      <div class="settings-group-header">
                        <h3>Custom Style</h3> 
                        <div class="toggle-switch">
                          <input type="checkbox" class="section-toggle">
                          <span class="toggle-slider"></span>
                        </div>
                      </div>
                      <div class="publishing-options-section">
                        <div class="publish-section">
                          <div class="form-row-top-input">
                            <label class="publish-label">Header</label>
                            <div class="schedule-publish-btn">New header</div>
                          </div>
                          <div class="select-container">
                            <select class="form-control">
                              <option value="active" selected="" style="color: #333 !important;">Default</option>
                              <option value="Homepage" style="color: #333 !important;">Header design 1</option>
                              <option value="draft" style="color: #333 !important;">Header design 2</option>
                              <option value="archived" style="color: #333 !important;">Header design 3</option>
                              <option value="separator" style="color: #333 !important;" disabled>────────────────────────</option>
                              <option value="archived" style="color: #333 !important; margin-bottom: 10px;">! Without Header</option>
                            </select>
                          </div>
                        </div>
                        <div class="settings-group">
                          <div class="publish-section">  
                            <div class="form-row-top-input">
                              <label class="publish-label">Template</label>
                            </div>
                            <div class="select-container">
                              <select class="form-control">
                                <option value="active" selected="" style="color: #333 !important;">Default</option>
                                <option value="draft" style="color: #333 !important;">Boxed</option>
                                <option value="draft" style="color: #333 !important;">Sidebar</option>
                                <option value="archived" style="color: #333 !important;">Full Width</option>
                              </select>
                            </div>
                          </div>
                          <div class="publish-section">  
                            <div class="form-row-top-input">
                              <label class="publish-label">Footer</label>
                              <div class="schedule-publish-btn">New footer</div>
                            </div>
                            <div class="select-container">
                              <select class="form-control">
                                <option value="active" selected="" style="color: #333 !important;">Default</option>
                                <option value="draft" style="color: #333 !important;">Footer design 1</option>
                                <option value="draft" style="color: #333 !important;">Footer design 2</option>
                                <option value="archived" style="color: #333 !important;">Footer design 3</option>
                                <option value="separator" style="color: #333 !important;" disabled>────────────────────────</option>
                                <option value="archived" style="color: #333 !important;">! Without Footer</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Sidebar Toggle Button -->
        <div class="sidebar-toggle-container">
          <button class="sidebar-toggle-btn" title="Toggle Panels">
            <i class="fas fa-chevron-left"></i>
          </button>
        </div>
        
        <!-- Layers Panel - Slides in from left -->
        <div class="layers-panel">
          <div class="layers-header">
            <h3>Layers</h3>
            <button class="layers-close-btn">
              <i class="fas fa-times"></i>
            </button>
          </div>
          <div class="layers-content">
            <div class="layer-item" data-element-id="canvas">
              <div class="layer-info">
                <i class="fas fa-eye layer-visibility"></i>
                <i class="fas fa-file-alt layer-icon"></i>
                <span class="layer-name">Canvas</span>
              </div>
              <div class="layer-actions">
                <i class="fas fa-lock layer-lock"></i>
              </div>
            </div>
            <div class="layers-empty">
              <p>Add elements to see them in layers</p>
            </div>
          </div>
        </div>
        
        <!-- Main Editor Area -->
        <div class="editor-main">
          <!-- Canvas Area -->
          <div class="editor-canvas">
            <div class="canvas-container">
              <!-- Drop Zone -->
              <div class="drop-zone">
                <div class="empty-state">
                  <i class="fas fa-plus-circle"></i>
                  <h3>Start Building Your Page</h3>
                  <p>Drag elements from the left panel to begin</p>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    `;
    
    // Add the window to the body
    document.body.appendChild(editorWindow);
    
    // Apply standard window opening animation
    editorWindow.classList.add('window-anim-open');
    
    // Initialize the editor functionality
    initializeSiteBuilderEditor(editorWindow);
    
    // Setup standard window controls (handles dragging, minimizing, maximizing, closing with animations)
    if (typeof setupWindowControls === 'function') {
      setupWindowControls(editorWindow);
    } else {
      // Fallback: setup close button manually with standard animation
      const closeButton = editorWindow.querySelector('.window-close');
      if (closeButton) {
        closeButton.addEventListener('click', function (e) {
          e.stopPropagation();
          // Use standard window close animation
          editorWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
          editorWindow.classList.add('window-anim-close');
          
          editorWindow.addEventListener('animationend', function handler(ev) {
            if (ev.animationName === 'windowClose') {
              editorWindow.remove();
            }
          }, { once: true });
        });
      }
    }
  }

  // Function to initialize the site builder editor functionality
  function initializeSiteBuilderEditor(editorWindow) {
    const canvas = editorWindow.querySelector('.drop-zone');

    const emptyState = editorWindow.querySelector('.empty-state');
    let selectedElement = null;
    let draggedWidget = null;
    
    // Widget drag and drop functionality
    const dragWidgets = editorWindow.querySelectorAll('.widget-item');
    dragWidgets.forEach(widget => {
      widget.addEventListener('dragstart', function(e) {
        draggedWidget = this.dataset.widget;
        this.classList.add('dragging');
      });
      
      widget.addEventListener('dragend', function(e) {
        this.classList.remove('dragging');
      });
    });
    
    // Canvas drop functionality
    canvas.addEventListener('dragover', function(e) {
      e.preventDefault();
      this.classList.add('drag-over');
    });
    
    canvas.addEventListener('dragleave', function(e) {
      this.classList.remove('drag-over');
    });
    
    canvas.addEventListener('drop', function(e) {
      e.preventDefault();
      this.classList.remove('drag-over');
      
      if (draggedWidget) {
        // Hide empty state when first element is added
        if (emptyState) {
          emptyState.style.display = 'none';
        }
        
        // Create the element based on widget type
        const element = createWidgetElement(draggedWidget);
        this.appendChild(element);
        
        // Select the newly created element
        selectElement(element);
        
        // Update layers panel
        updateLayersPanel();
        
        draggedWidget = null;
      }
    });
    
    // Header panel button functionality
    const headerPanelButtons = editorWindow.querySelectorAll('.header-panel-btn');
    const sidebarPanels = editorWindow.querySelectorAll('.sidebar-panel');
    const layersPanel = editorWindow.querySelector('.layers-panel');
    const editorMain = editorWindow.querySelector('.editor-main');
    
    headerPanelButtons.forEach(button => {
      button.addEventListener('click', () => {
        const panelName = button.getAttribute('data-panel');
        
        if (panelName === 'layers') {
          // Handle layers panel (slides in from right)
          const isOpen = layersPanel.classList.contains('open');
          
          if (isOpen) {
            // Close layers panel
            layersPanel.classList.remove('open');
            editorMain.classList.remove('layers-open');
            button.classList.remove('active');
          } else {
            // Open layers panel
            layersPanel.classList.add('open');
            editorMain.classList.add('layers-open');
            button.classList.add('active');
            
            // Update layers content
            updateLayersPanel();
          }
        } else {
          // Handle regular sidebar panels
          // Keep layers panel open if it was open - don't close it
          
          // Remove active class from all header buttons except layers (if open)
          headerPanelButtons.forEach(btn => {
            if (btn.getAttribute('data-panel') !== 'layers' || !layersPanel.classList.contains('open')) {
              btn.classList.remove('active');
            }
          });
          sidebarPanels.forEach(panel => panel.classList.remove('active'));
          
          // Add active class to clicked button
          button.classList.add('active');
          
          // Show corresponding panel
          const targetPanel = editorWindow.querySelector(`.${panelName}-panel`);
          if (targetPanel) {
            targetPanel.classList.add('active');
          }
        }
      });
    });

    // Layers panel close button functionality
    const layersCloseBtn = editorWindow.querySelector('.layers-close-btn');
    if (layersCloseBtn) {
      layersCloseBtn.addEventListener('click', () => {
        layersPanel.classList.remove('open');
        editorMain.classList.remove('layers-open');
        // Remove active state from layers button
        const layersBtn = editorWindow.querySelector('.header-panel-btn[data-panel="layers"]');
        if (layersBtn) {
          layersBtn.classList.remove('active');
        }
      });
    }

    // Close button will be handled by setupWindowControls() - no custom handler needed

    // Layers panel drag functionality
    const layersHeader = editorWindow.querySelector('.layers-header');
    if (layersHeader && layersPanel) {
      let isDragging = false;
      let isResizing = false;
      let dragHandlers = null;
      let resizeHandlers = null;
      
      // Global cleanup function
      function cleanupAllListeners() {
        cleanupDragListeners();
        cleanupResizeListeners();
        isDragging = false;
        isResizing = false;
        document.body.style.cursor = '';
        document.body.style.userSelect = '';
      }
      
      // Create resize handles
      function createResizeHandles() {
        if (layersPanel.querySelector('.resize-handle')) return; // Already created
        
        const handles = ['n', 'e', 's', 'w', 'ne', 'nw', 'se', 'sw'];
        handles.forEach(direction => {
          const handle = document.createElement('div');
          handle.className = `resize-handle resize-${direction}`;
          handle.dataset.direction = direction;
          layersPanel.appendChild(handle);
        });
      }
      
      // Remove resize handles
      function removeResizeHandles() {
        const resizeHandles = layersPanel.querySelectorAll('.resize-handle');
        resizeHandles.forEach(handle => handle.remove());
      }
      
      // Clean up drag event listeners
      function cleanupDragListeners() {
        if (dragHandlers) {
          document.removeEventListener('mousemove', dragHandlers.move);
          document.removeEventListener('mouseup', dragHandlers.up);
          dragHandlers = null;
        }
        layersPanel.classList.remove('dragging');
        editorMain.classList.remove('layers-snap-preview');
        layersPanel.classList.remove('snap-preview');
      }
      
      // Clean up resize event listeners
      function cleanupResizeListeners() {
        if (resizeHandlers) {
          document.removeEventListener('mousemove', resizeHandlers.move);
          document.removeEventListener('mouseup', resizeHandlers.up);
          resizeHandlers = null;
        }
      }
      
      // Drag functionality
      layersHeader.addEventListener('mousedown', (e) => {
        // Only start dragging if clicking on the header itself, not buttons or resize handles
        if (e.target.closest('.layers-close-btn') || e.target.classList.contains('resize-handle') || isResizing) return;
        
        // Don't start dragging if already dragging
        if (isDragging) return;
        
        // Clean up any existing listeners
        cleanupDragListeners();
        cleanupResizeListeners();
        
        isDragging = true;
        const wasDocked = !layersPanel.classList.contains('floating');
        const wasOpen = layersPanel.classList.contains('open'); // Track if panel was open before dragging
        
        console.log('Starting drag - wasOpen:', wasOpen, 'wasDocked:', wasDocked);
        
        // Get initial positions
        const startX = e.clientX;
        const startY = e.clientY;
        const rect = layersPanel.getBoundingClientRect();
        const initialRight = window.innerWidth - rect.right;
        const initialTop = rect.top;
        
        // Convert to floating mode - set explicit dimensions first
        const panelWidth = 250; // Fixed width
        const panelHeight = Math.floor(window.innerHeight * 0.4); // Fixed height
        
        layersPanel.classList.add('floating');
        layersPanel.classList.remove('open'); // Remove open class when floating
        createResizeHandles();
        
        // Set explicit dimensions and position with !important override
        layersPanel.style.cssText = `
          position: fixed !important;
          right: ${initialRight}px !important;
          top: ${initialTop}px !important;
          width: ${panelWidth}px !important;
          height: ${panelHeight}px !important;
          z-index: 1002 !important;
          transition: none !important;
        `;
        
        // Remove layers-open class from editor-main when floating
        editorMain.classList.remove('layers-open');
        layersPanel.classList.add('dragging');
        document.body.style.userSelect = 'none';
        
        // Create drag event handlers
        dragHandlers = {
          move: (e) => {
            if (!isDragging) return;
            
            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            const newRight = initialRight - deltaX;
            const newTop = initialTop + deltaY;
            
            // Constrain to viewport using fixed dimensions
            const maxRight = window.innerWidth - panelWidth;
            const maxTop = window.innerHeight - panelHeight;
            
            const constrainedRight = Math.max(0, Math.min(maxRight, newRight));
            const constrainedTop = Math.max(0, Math.min(maxTop, newTop));
            
            // Update position while maintaining fixed size with !important
            layersPanel.style.cssText = `
              position: fixed !important;
              right: ${constrainedRight}px !important;
              top: ${constrainedTop}px !important;
              width: ${panelWidth}px !important;
              height: ${panelHeight}px !important;
              z-index: 1002 !important;
              transition: none !important;
            `;
            
            // Check for snap preview
            const rect = layersPanel.getBoundingClientRect();
            const distanceFromRightEdge = window.innerWidth - rect.right;
            const snapThreshold = 100;
            
            if (distanceFromRightEdge <= snapThreshold) {
              editorMain.classList.add('layers-snap-preview');
              layersPanel.classList.add('snap-preview');
            } else {
              editorMain.classList.remove('layers-snap-preview');
              layersPanel.classList.remove('snap-preview');
            }
          },
          
          up: (e) => {
            if (!isDragging) return;
            
            isDragging = false;
            layersPanel.classList.remove('dragging');
            document.body.style.userSelect = '';
            editorMain.classList.remove('layers-snap-preview');
            layersPanel.classList.remove('snap-preview');
            
            // Check for snap back
            const rect = layersPanel.getBoundingClientRect();
            const panelRight = rect.right;
            const windowWidth = window.innerWidth;
            const distanceFromRightEdge = windowWidth - panelRight;
            const snapThreshold = 100;
            
            console.log('Snap check - Panel rect:', rect);
            console.log('Snap check - Panel right:', panelRight, 'Window width:', windowWidth);
            console.log('Snap check - Distance from right edge:', distanceFromRightEdge, 'Threshold:', snapThreshold);
            console.log('Should snap:', distanceFromRightEdge <= snapThreshold);
            
            if (distanceFromRightEdge <= snapThreshold) {
              console.log('Snapping back to docked position - was originally open:', wasOpen);
              
              // Remove floating state and reset styles
              layersPanel.classList.remove('floating');
              layersPanel.style.cssText = ''; // Clear all inline styles
              removeResizeHandles();
              
              // Get the layers button reference
              const layersBtn = editorWindow.querySelector('.header-panel-btn[data-panel="layers"]');
              
              // Always restore to open state when snapping back
              console.log('Restoring to open state after snap-back...');
              
              // Add classes for open state
              layersPanel.classList.add('open');
              editorMain.classList.add('layers-open');
              
              if (layersBtn) {
                layersBtn.classList.add('active');
              }
              
              // Verify the state was applied
              setTimeout(() => {
                console.log('Final state check after snap-back:');
                console.log('- layersPanel has open class:', layersPanel.classList.contains('open'));
                console.log('- editorMain has layers-open class:', editorMain.classList.contains('layers-open'));
                console.log('- layersBtn has active class:', layersBtn ? layersBtn.classList.contains('active') : 'no button');
                console.log('- layersPanel computed right:', window.getComputedStyle(layersPanel).right);
                console.log('- editorMain computed margin-right:', window.getComputedStyle(editorMain).marginRight);
              }, 100);
            }
            
            // Clean up listeners
            cleanupDragListeners();
          }
        };
        
        // Add drag event listeners
        document.addEventListener('mousemove', dragHandlers.move);
        document.addEventListener('mouseup', dragHandlers.up);
        
        e.preventDefault();
      });
      
      // Resize functionality
      layersPanel.addEventListener('mousedown', (e) => {
        if (!e.target.classList.contains('resize-handle') || isDragging || !layersPanel.classList.contains('floating')) return;
        
        // Clean up any existing listeners
        cleanupDragListeners();
        cleanupResizeListeners();
        
        isResizing = true;
        const direction = e.target.dataset.direction;
        
        const rect = layersPanel.getBoundingClientRect();
        const startX = e.clientX;
        const startY = e.clientY;
        const startWidth = rect.width;
        const startHeight = rect.height;
        const startRight = window.innerWidth - rect.right;
        const startTop = rect.top;
        
        // Set cursor based on resize direction
        const cursorMap = {
          'n': 'n-resize',
          's': 's-resize',
          'e': 'e-resize',
          'w': 'w-resize',
          'ne': 'ne-resize',
          'nw': 'nw-resize',
          'se': 'se-resize',
          'sw': 'sw-resize'
        };
        document.body.style.cursor = cursorMap[direction] || 'default';
        
        // Create resize event handlers
        resizeHandlers = {
          move: (e) => {
            if (!isResizing) return;
            
            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            
            let newWidth = startWidth;
            let newHeight = startHeight;
            let newRight = startRight;
            let newTop = startTop;
            
            // Handle different resize directions
            if (direction.includes('e')) {
              // East: resize right edge - increase width, position stays same
              newWidth = Math.max(200, startWidth + deltaX);
            }
            if (direction.includes('w')) {
              // West: resize left edge - change width and adjust position
              newWidth = Math.max(200, startWidth - deltaX);
              // Adjust right position to keep right edge fixed
              newRight = startRight + (startWidth - newWidth);
            }
            if (direction.includes('s')) {
              // South: resize bottom edge - increase height, position stays same
              newHeight = Math.max(150, startHeight + deltaY);
            }
            if (direction.includes('n')) {
              // North: resize top edge - change height and adjust position
              newHeight = Math.max(150, startHeight - deltaY);
              // Adjust top position to keep bottom edge fixed
              newTop = startTop + (startHeight - newHeight);
            }
            
            // Apply viewport constraints
            newWidth = Math.min(newWidth, window.innerWidth - 50);
            newHeight = Math.min(newHeight, window.innerHeight - 50);
            
            // Constrain position to viewport
            newRight = Math.max(0, Math.min(window.innerWidth - newWidth, newRight));
            newTop = Math.max(0, Math.min(window.innerHeight - newHeight, newTop));
            
            // Update panel with !important to override any CSS conflicts
            layersPanel.style.cssText = `
              position: fixed !important;
              right: ${newRight}px !important;
              top: ${newTop}px !important;
              width: ${newWidth}px !important;
              height: ${newHeight}px !important;
              z-index: 1002 !important;
              transition: none !important;
            `;
          },
          
          up: () => {
            isResizing = false;
            document.body.style.cursor = '';
            document.body.style.userSelect = '';
            cleanupResizeListeners();
          }
        };
        
        // Add resize event listeners
        document.addEventListener('mousemove', resizeHandlers.move);
        document.addEventListener('mouseup', resizeHandlers.up);
        document.body.style.userSelect = 'none';
        
        e.preventDefault();
        e.stopPropagation();
      });
      
      // Clean up on panel close
      const layersCloseBtn = layersPanel.querySelector('.layers-close-btn');
      if (layersCloseBtn) {
        layersCloseBtn.addEventListener('click', () => {
          cleanupAllListeners();
          if (layersPanel.classList.contains('floating')) {
            layersPanel.classList.remove('floating');
            layersPanel.style.right = '';
            layersPanel.style.top = '';
            layersPanel.style.height = '';
            layersPanel.style.width = '';
            removeResizeHandles();
          }
        });
      }
      
      // Clean up on window unload or if editor is closed
      window.addEventListener('beforeunload', cleanupAllListeners);
      
      // Clean up on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && (isDragging || isResizing)) {
          cleanupAllListeners();
          if (layersPanel.classList.contains('floating')) {
            // Reset to original position if escape is pressed during drag
            layersPanel.classList.remove('floating');
            layersPanel.style.right = '';
            layersPanel.style.top = '';
            layersPanel.style.height = '';
            layersPanel.style.width = '';
            removeResizeHandles();
          }
        }
      });
    }

    // Sidebar toggle functionality
    const sidebarToggleBtn = editorWindow.querySelector('.sidebar-toggle-btn');
    const sidebarToggleContainer = editorWindow.querySelector('.sidebar-toggle-container');
    const editorSidebar = editorWindow.querySelector('.editor-sidebar');
    
    if (sidebarToggleBtn) {
      sidebarToggleBtn.addEventListener('click', () => {
        const isCollapsed = editorSidebar.classList.contains('collapsed');
        
        if (isCollapsed) {
          // Show panels
          editorSidebar.classList.remove('collapsed');
          sidebarToggleContainer.classList.remove('collapsed');
          sidebarToggleBtn.classList.remove('collapsed');
          
          // If layers panel was open, show it again
          if (layersPanel.classList.contains('was-open')) {
            layersPanel.classList.add('open');
            layersPanel.classList.remove('was-open');
            editorMain.classList.add('layers-open');
            const layersBtn = editorWindow.querySelector('.header-panel-btn[data-panel="layers"]');
            if (layersBtn) {
              layersBtn.classList.add('active');
            }
          }
        } else {
          // Hide panels
          editorSidebar.classList.add('collapsed');
          sidebarToggleContainer.classList.add('collapsed');
          sidebarToggleBtn.classList.add('collapsed');
          
          // If layers panel is open, close it but remember it was open
          if (layersPanel.classList.contains('open')) {
            layersPanel.classList.add('was-open');
            layersPanel.classList.remove('open');
            editorMain.classList.remove('layers-open');
            const layersBtn = editorWindow.querySelector('.header-panel-btn[data-panel="layers"]');
            if (layersBtn) {
              layersBtn.classList.remove('active');
            }
          }
        }
      });
    }

    // Tab switching functionality within panels that have tabs (Style and Advanced panels)
    sidebarPanels.forEach(panel => {
      // Only add tab switching to panels that have sidebar-tabs
      const sidebarTabs = panel.querySelector('.sidebar-tabs');
      if (!sidebarTabs) return; // Skip Elements panel which has no tabs
      
      const tabButtons = panel.querySelectorAll('.sidebar-tab');
      const tabContents = panel.querySelectorAll('.tab-content');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          // Remove active class from all tabs and contents within this panel
          tabButtons.forEach(tab => tab.classList.remove('active'));
          tabContents.forEach(content => content.classList.remove('active'));
          
          // Add active class to clicked tab
          button.classList.add('active');
          
          // Show corresponding content within this panel
          const tabName = button.getAttribute('data-tab');
          const targetContent = panel.querySelector(`.${tabName}-tab`);
          if (targetContent) {
            targetContent.classList.add('active');
          }
        });
      });
    });
    
    // Responsive view buttons
    const responsiveBtns = editorWindow.querySelectorAll('.responsive-btn');
    const canvasContainer = editorWindow.querySelector('.canvas-container');
    
    responsiveBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        // Update button states
        responsiveBtns.forEach(b => {
          b.classList.remove('active');
        });
        
        this.classList.add('active');
        
        // Update canvas size
        const view = this.dataset.view;
        canvasContainer.classList.remove('tablet-view', 'mobile-view');
        switch(view) {
          case 'tablet':
            canvasContainer.classList.add('tablet-view');
            break;
          case 'mobile':
            canvasContainer.classList.add('mobile-view');
            break;
          // desktop is default, no class needed
        }
      });
    });
    
    // Publish dropdown functionality
    const publishDropdownBtn = editorWindow.querySelector('.publish-dropdown-btn');
    const publishDropdownMenu = editorWindow.querySelector('.publish-dropdown-menu');
    const publishDropdownItems = editorWindow.querySelectorAll('.publish-dropdown-item');
    
    if (publishDropdownBtn && publishDropdownMenu) {
      // Toggle dropdown on button click
      publishDropdownBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        publishDropdownMenu.classList.toggle('show');
      });
      
      // Handle dropdown item clicks
      publishDropdownItems.forEach(item => {
        item.addEventListener('click', (e) => {
          e.stopPropagation();
          const action = item.getAttribute('data-action');
          
          // Close dropdown
          publishDropdownMenu.classList.remove('show');
          
          // Handle different actions
          switch(action) {
            case 'save-draft':
              console.log('Saving as draft...');
              // Add your save draft logic here
              break;
            case 'schedule':
              console.log('Scheduling for later...');
              // Add your schedule logic here
              break;
            case 'publish-private':
              console.log('Publishing privately...');
              // Add your private publish logic here
              break;
          }
        });
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!publishDropdownBtn.contains(e.target) && !publishDropdownMenu.contains(e.target)) {
          publishDropdownMenu.classList.remove('show');
        }
      });
    }
    
    // Hover effects are now handled by CSS, no JavaScript needed
    
    // Element selection functionality
    function selectElement(element) {
      // Remove previous selection
      if (selectedElement) {
        selectedElement.classList.remove('selected-element');
      }
      
      // Add selection to new element
      selectedElement = element;
      element.classList.add('selected-element');
      
      // Switch to Style panel first
      const headerPanelButtons = editorWindow.querySelectorAll('.header-panel-btn');
      const sidebarPanels = editorWindow.querySelectorAll('.sidebar-panel');
      
      // Activate Style panel
      headerPanelButtons.forEach(btn => btn.classList.remove('active'));
      sidebarPanels.forEach(panel => panel.classList.remove('active'));
      
      const styleHeaderBtn = editorWindow.querySelector('.header-panel-btn[data-panel="style"]');
      const stylePanel = editorWindow.querySelector('.style-panel');
      
      if (styleHeaderBtn && stylePanel) {
        styleHeaderBtn.classList.add('active');
        stylePanel.classList.add('active');
        
        // Then switch to style tab within the Style panel
        const tabButtons = stylePanel.querySelectorAll('.sidebar-tab');
        const tabContents = stylePanel.querySelectorAll('.tab-content');
        
        tabButtons.forEach(tab => tab.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));
        
        const styleTab = stylePanel.querySelector('.sidebar-tab[data-tab="style"]');
        const styleContent = stylePanel.querySelector('.style-tab');
        
        if (styleTab && styleContent) {
          styleTab.classList.add('active');
          styleContent.classList.add('active');
        }
      }
      
      // Update properties panel content
      updatePropertiesPanel(element);
    }
    
    // Update layers panel
    function updateLayersPanel() {
      const layersContent = editorWindow.querySelector('.layers-content');
      const layersEmpty = layersContent.querySelector('.layers-empty');
      const elements = canvas.querySelectorAll('.editor-element');
      
      // Clear existing layers (except canvas and empty state)
      const existingLayers = layersContent.querySelectorAll('.layer-item:not([data-element-id="canvas"])');
      existingLayers.forEach(layer => layer.remove());
      
      if (elements.length === 0) {
        layersEmpty.style.display = 'block';
      } else {
        layersEmpty.style.display = 'none';
        
        // Add layer for each element
        elements.forEach((element, index) => {
          const layerItem = document.createElement('div');
          layerItem.className = 'layer-item';
          layerItem.dataset.elementId = 'element-' + index;
          
          const widgetType = element.dataset.widget || 'element';
          const layerName = getLayerName(widgetType);
          const layerIcon = getLayerIcon(widgetType);
          
          layerItem.innerHTML = `
            <div class="layer-info">
              <i class="fas fa-eye layer-visibility"></i>
              <i class="${layerIcon} layer-icon"></i>
              <span class="layer-name">${layerName}</span>
            </div>
            <div class="layer-actions">
              <i class="fas fa-lock layer-lock"></i>
            </div>
          `;
          
          // Add click handler to select element
          layerItem.addEventListener('click', () => {
            selectElement(element);
            // Update layer selection
            const allLayers = layersContent.querySelectorAll('.layer-item');
            allLayers.forEach(layer => layer.classList.remove('selected'));
            layerItem.classList.add('selected');
          });
          
          // Add visibility toggle
          const visibilityBtn = layerItem.querySelector('.layer-visibility');
          visibilityBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            const isHidden = element.style.display === 'none';
            if (isHidden) {
              element.style.display = '';
              visibilityBtn.classList.remove('hidden');
            } else {
              element.style.display = 'none';
              visibilityBtn.classList.add('hidden');
            }
          });
          
          // Add lock toggle
          const lockBtn = layerItem.querySelector('.layer-lock');
          lockBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            const isLocked = element.dataset.locked === 'true';
            if (isLocked) {
              element.dataset.locked = 'false';
              element.style.pointerEvents = '';
              lockBtn.classList.remove('locked');
            } else {
              element.dataset.locked = 'true';
              element.style.pointerEvents = 'none';
              lockBtn.classList.add('locked');
            }
          });
          
          layersContent.insertBefore(layerItem, layersEmpty);
        });
      }
    }
    
    // Helper functions for layers
    function getLayerName(widgetType) {
      const names = {
        'heading': 'Heading',
        'text': 'Text',
        'image': 'Image',
        'button': 'Button',
        'spacer': 'Spacer',
        'divider': 'Divider',
        'video': 'Video',
        'icon': 'Icon',
        'gallery': 'Gallery'
      };
      return names[widgetType] || 'Element';
    }
    
    function getLayerIcon(widgetType) {
      const icons = {
        'heading': 'fas fa-heading',
        'text': 'fas fa-font',
        'image': 'fas fa-image',
        'button': 'fas fa-mouse-pointer',
        'spacer': 'fas fa-arrows-alt-v',
        'divider': 'fas fa-minus',
        'video': 'fas fa-play-circle',
        'icon': 'fas fa-star',
        'gallery': 'fas fa-images'
      };
      return icons[widgetType] || 'fas fa-cube';
    }
    
    // Create widget elements
    function createWidgetElement(widgetType) {
      const element = document.createElement('div');
      element.className = 'editor-element';
      
      switch(widgetType) {
        case 'heading':
          element.innerHTML = '<h2 contenteditable="true">Add Your Heading Text Here</h2>';
          element.dataset.widget = 'heading';
          break;
        case 'text':
          element.innerHTML = '<p contenteditable="true">Add your text here. Click to edit this text and replace it with your own content.</p>';
          element.dataset.widget = 'text';
          break;
        case 'image':
          element.innerHTML = `
            <div class="image-placeholder">
              <i class="fas fa-image"></i>
              <p>Click to upload image</p>
            </div>
          `;
          element.dataset.widget = 'image';
          break;
        case 'button':
          element.innerHTML = '<button>Click Me</button>';
          element.dataset.widget = 'button';
          break;
        case 'spacer':
          element.innerHTML = '<div class="spacer-element"></div>';
          element.dataset.widget = 'spacer';
          break;
        case 'divider':
          element.innerHTML = '<hr>';
          element.dataset.widget = 'divider';
          break;
        default:
          element.innerHTML = '<p>Widget: ' + widgetType + '</p>';
      }
      
      // Add click handler for selection
      element.addEventListener('click', function(e) {
        e.stopPropagation();
        selectElement(this);
      });
      
      return element;
    }
    
    // Update properties panel
    function updatePropertiesPanel(element) {
      // Find the properties panel in the Style panel's style tab
      const stylePanel = editorWindow.querySelector('.style-panel');
      const activeStyleTab = stylePanel ? stylePanel.querySelector('.style-tab.active') : null;
      const propertiesBody = activeStyleTab ? activeStyleTab.querySelector('.properties-body') : null;
      
      if (!propertiesBody) return;
      
      const widgetType = element.dataset.widget;
      
             let propertiesHTML = `
         <div class="property-group">
           <h4>General</h4>
           <div class="property-item">
             <label>Element ID</label>
             <input type="text" class="property-input">
           </div>
           <div class="property-item">
             <label>CSS Classes</label>
             <input type="text" class="property-input">
           </div>
         </div>
         
         <div class="property-group">
           <h4>Layout</h4>
           <div class="property-item">
             <label>Margin</label>
             <input type="text" class="property-input" placeholder="20px 0">
           </div>
           <div class="property-item">
             <label>Padding</label>
             <input type="text" class="property-input" placeholder="20px">
           </div>
         </div>
       `;
      
      // Add widget-specific properties
      switch(widgetType) {
                 case 'heading':
           propertiesHTML += `
             <div class="property-group">
               <h4>Typography</h4>
               <div class="property-item">
                 <label>Heading Level</label>
                 <select class="property-input">
                   <option>H1</option>
                   <option selected>H2</option>
                   <option>H3</option>
                   <option>H4</option>
                   <option>H5</option>
                   <option>H6</option>
                 </select>
               </div>
               <div class="property-item">
                 <label>Text Align</label>
                 <select class="property-input">
                   <option>Left</option>
                   <option>Center</option>
                   <option>Right</option>
                 </select>
               </div>
             </div>
           `;
           break;
         case 'button':
           propertiesHTML += `
             <div class="property-group">
               <h4>Button</h4>
               <div class="property-item">
                 <label>Button Text</label>
                 <input type="text" class="property-input" value="Click Me">
               </div>
               <div class="property-item">
                 <label>Link URL</label>
                 <input type="text" class="property-input" placeholder="https://">
               </div>
             </div>
           `;
           break;
      }
      
             propertiesHTML += `
         <div class="property-actions">
           <button class="delete-element-btn">
             <i class="fas fa-trash"></i> Delete Element
           </button>
         </div>
       `;
      
      propertiesBody.innerHTML = propertiesHTML;
      
      // Add delete functionality
      const deleteBtn = propertiesBody.querySelector('.delete-element-btn');
      deleteBtn.addEventListener('click', function() {
        element.remove();
        selectedElement = null;
        
        // Update layers panel
        updateLayersPanel();
        
        // Show empty state if no elements left
        if (canvas.children.length === 0) {
          emptyState.style.display = 'block';
        }
      });
    }
    
    // Click outside to deselect
    canvas.addEventListener('click', function(e) {
      if (e.target === this) {
        if (selectedElement) {
          selectedElement.classList.remove('selected-element');
          selectedElement = null;
        }
      }
         });
   }

   // Function to make windows draggable and resizable
   function makeWindowInteractive(windowElement) {
     const header = windowElement.querySelector('.window-header');
     const windowTitle = windowElement.querySelector('.window-title');
     let isDragging = false;
     let dragStartX, dragStartY, windowStartX, windowStartY;
     
     // Make window draggable by header
     if (header && windowTitle) {
       windowTitle.style.cursor = 'move';
       
       windowTitle.addEventListener('mousedown', function(e) {
         isDragging = true;
         dragStartX = e.clientX;
         dragStartY = e.clientY;
         windowStartX = windowElement.offsetLeft;
         windowStartY = windowElement.offsetTop;
         
         // Prevent text selection
         e.preventDefault();
         
         // Add global mouse move and up listeners
         document.addEventListener('mousemove', handleDrag);
         document.addEventListener('mouseup', stopDrag);
       });
       
       function handleDrag(e) {
         if (!isDragging) return;
         
         const deltaX = e.clientX - dragStartX;
         const deltaY = e.clientY - dragStartY;
         
         windowElement.style.left = (windowStartX + deltaX) + 'px';
         windowElement.style.top = (windowStartY + deltaY) + 'px';
       }
       
       function stopDrag() {
         isDragging = false;
         document.removeEventListener('mousemove', handleDrag);
         document.removeEventListener('mouseup', stopDrag);
       }
     }
     
     // Window controls functionality
     const closeBtn = windowElement.querySelector('.close-btn');
     const minimizeBtn = windowElement.querySelector('.minimize-btn');
     const maximizeBtn = windowElement.querySelector('.maximize-btn');
     
     if (closeBtn) {
       closeBtn.addEventListener('click', function() {
         windowElement.remove();
       });
     }
     
     if (minimizeBtn) {
       minimizeBtn.addEventListener('click', function() {
         windowElement.style.display = 'none';
         // Could add to taskbar here if needed
       });
     }
     
     if (maximizeBtn) {
       let isMaximized = false;
       let originalStyles = {};
       
       maximizeBtn.addEventListener('click', function() {
         if (isMaximized) {
           // Restore window
           windowElement.style.top = originalStyles.top;
           windowElement.style.left = originalStyles.left;
           windowElement.style.width = originalStyles.width;
           windowElement.style.height = originalStyles.height;
           isMaximized = false;
         } else {
           // Maximize window
           originalStyles = {
             top: windowElement.style.top,
             left: windowElement.style.left,
             width: windowElement.style.width,
             height: windowElement.style.height
           };
           
           windowElement.style.top = '0px';
           windowElement.style.left = '0px';
           windowElement.style.width = '100vw';
           windowElement.style.height = '100vh';
           isMaximized = true;
         }
       });
     }
   }
  }


// Utility: Ensure sidebar overlay and menu toggle exist in every window
function ensureSidebarElements(windowElement) {
  // Ensure sidebar overlay exists as first child of .window-content
  const windowContent = windowElement.querySelector('.window-content');
  if (windowContent && !windowContent.querySelector('.sidebar-overlay')) {
    const overlay = document.createElement('div');
    overlay.className = 'sidebar-overlay';
    windowContent.insertBefore(overlay, windowContent.firstChild);
  }
  // Ensure menu toggle exists as first child of .window-header
  const windowHeader = windowElement.querySelector('.window-header');
  let menuToggle = windowHeader && windowHeader.querySelector('.menu-toggle');
  if (windowHeader && !menuToggle) {
    menuToggle = document.createElement('button');
    menuToggle.className = 'menu-toggle';
    menuToggle.innerHTML = '<i class="fas fa-bars"></i>';
    windowHeader.insertBefore(menuToggle, windowHeader.firstChild);
  }
}

// Patch updateSidebarForWindow to respect data-user-collapsed and auto-collapse at breakpoints
if (typeof window.updateSidebarForWindow !== 'function') {
  window.updateSidebarForWindow = function () { };
}
window.updateSidebarForWindow = window.updateSidebarForWindow || function () { };
const _originalUpdateSidebarForWindow = window.updateSidebarForWindow;
window.updateSidebarForWindow = function (windowEl) {
  if (!windowEl) return;
  if (windowEl._isClosing) return;
  const sidebars = windowEl.querySelectorAll('.window-sidebar, .settings-sidebar, .app-store-sidebar');
  const width = windowEl.offsetWidth;
  const isMobile = window.innerWidth <= 767;
  sidebars.forEach(sb => {
    // Clean up previous event handlers
    const menuToggle = windowEl.querySelector('.menu-toggle');
    const overlay = windowEl.querySelector('.sidebar-overlay');
    const contentArea = windowEl.querySelector('.window-main-content, .settings-content, .app-store-main-content');
    if (menuToggle) menuToggle.onclick = null;
    if (overlay) overlay.onclick = null;
    sb.querySelectorAll('.sidebar-item').forEach(item => { item.onclick = null; });

    // Mobile sidebar handling
    if (isMobile) {
      // Remove collapsed/hover logic for mobile
      sb.removeAttribute('data-user-collapsed');
      sb.classList.remove('sidebar-hovered', 'sidebar-collapsed');

      // Attach mobile sidebar logic
      if (menuToggle && overlay && contentArea) {
        menuToggle.onclick = function () {
          const isShowing = !sb.classList.contains('show');
          sb.classList.toggle('show');
          overlay.classList.toggle('show');
          if (isShowing) {
            contentArea.classList.add('sidebar-push-active');
          } else {
            contentArea.classList.remove('sidebar-push-active');
          }
        };

        overlay.onclick = function () {
          sb.classList.remove('show');
          overlay.classList.remove('show');
          contentArea.classList.remove('sidebar-push-active');
        };

        sb.querySelectorAll('.sidebar-item').forEach(item => {
          item.onclick = function () {
            sb.classList.remove('show');
            overlay.classList.remove('show');
            contentArea.classList.remove('sidebar-push-active');
          };
        });
      }
      return;
    }

    // User override - per-app toggle state
    let userOverride = false;
    if (sb.hasAttribute('data-user-collapsed')) {
      userOverride = true;
      if (sb.getAttribute('data-user-collapsed') === 'true') {
        // When toggle is ON, always keep sidebar collapsed regardless of window size
        sb.classList.add('sidebar-collapsed');
      } else {
        // When toggle is OFF, respect responsive breakpoints
        sb.classList.remove('sidebar-collapsed');

        // Auto-collapse only in responsive range (200-900px)
        if (width >= 200 && width < 600) {
          sb.classList.add('sidebar-collapsed');
        }
      }
    }

    // Auto-collapse if no user override and width in range
    if (!userOverride) {
      if (width >= 200 && width < 600) {
        sb.classList.add('sidebar-collapsed');
      } else {
        sb.classList.remove('sidebar-collapsed');
      }
    }
    


    // Reset content styles
    const content = sb.parentElement && sb.parentElement.querySelector('.window-main-content, .settings-content, .app-store-main-content');
    if (content) {
      content.style.transform = '';
    }

    // Remove previous hover listeners
    if (sb._hoverEnter) sb.removeEventListener('mouseenter', sb._hoverEnter);
    if (sb._hoverLeave) sb.removeEventListener('mouseleave', sb._hoverLeave);
    delete sb._hoverEnter;
    delete sb._hoverLeave;

    // Reset sidebar styles
    sb.classList.remove('sidebar-hovered', 'sidebar-mobile');
    sb.style.position = '';
    sb.style.left = '';
    sb.style.top = '';
    sb.style.height = '';
    sb.style.zIndex = '';
    sb.style.width = '';

    // Add hover behavior if the sidebar is collapsed, regardless of window width
    // This is the key change - removing the window width condition
    if (sb.classList.contains('sidebar-collapsed')) {
      // Handle mouse enter
      sb._hoverEnter = function () {
        const mainContent = sb.parentElement.querySelector('.window-main-content');
        // Invalidate any pending cleanup from previous hover-out
        if (mainContent) {
          mainContent._sidebarCleanupValid = false;
          if (mainContent._sidebarCleanup) {
            mainContent.removeEventListener('transitionend', mainContent._sidebarCleanup);
            mainContent._sidebarCleanup = null;
          }
        }

        // Add hovered class
        sb.classList.add('sidebar-hovered');

        // Only add push class if both collapsed and hovered
        if (sb.classList.contains('sidebar-collapsed') && sb.classList.contains('sidebar-hovered')) {
          if (mainContent) {
            // Fix width before push
            let parentWindow = sb.closest('.window');
            let parentWidth = parentWindow ? parentWindow.offsetWidth : mainContent.parentElement.offsetWidth;
            // Use 73px for collapsed sidebar width
            let sidebarWidth = 73;
            // If sb is visible and has offsetWidth, use it (in case of custom themes)
            if (sb.offsetWidth && sb.offsetWidth < 200) sidebarWidth = sb.offsetWidth;

            // Calculate content width
            let contentWidth = parentWidth - sidebarWidth;
            if (contentWidth < 0) contentWidth = 0;

            // Apply width
            let widthPx = contentWidth + 'px';
            mainContent.style.setProperty('width', widthPx);
            mainContent.style.setProperty('min-width', widthPx);
            mainContent.style.setProperty('max-width', widthPx);
            mainContent.classList.add('sidebar-push-active');
          }
        }
      };

      // Handle mouse leave
      sb._hoverLeave = function () {
        const mainContent = sb.parentElement.querySelector('.window-main-content');
        // Invalidate any previous cleanup
        if (mainContent) {
          mainContent._sidebarCleanupValid = false;
          if (mainContent._sidebarCleanup) {
            mainContent.removeEventListener('transitionend', mainContent._sidebarCleanup);
            mainContent._sidebarCleanup = null;
          }
        }

        // Remove hovered class
        sb.classList.remove('sidebar-hovered');

        // Clean up content area
        if (mainContent) {
          // Handler to clean up after transition
          mainContent._sidebarCleanupValid = true;
          const cleanup = function (e) {
            if (!mainContent._sidebarCleanupValid) return;
            if (!e || e.propertyName === 'width' || e.propertyName === 'max-width' || e.propertyName === 'min-width') {
              mainContent.classList.remove('sidebar-push-active');
              mainContent.style.removeProperty('width');
              mainContent.style.removeProperty('min-width');
              mainContent.style.removeProperty('max-width');
              mainContent.removeEventListener('transitionend', cleanup);
              mainContent._sidebarCleanup = null;
              mainContent._sidebarCleanupValid = false;
            }
          };

          // Add cleanup handler
          mainContent._sidebarCleanup = cleanup;
          mainContent.addEventListener('transitionend', cleanup);

          // Fallback: clean up after a short delay if no transition fires
          setTimeout(() => cleanup({ propertyName: 'width' }), 300);
        }
      };

      // Attach hover event listeners
      sb.addEventListener('mouseenter', sb._hoverEnter);
      sb.addEventListener('mouseleave', sb._hoverLeave);
    }
  });
}



//Email App Content
function setupEmailApp(windowElement) {
  // Sidebar: do NOT set content here. Sidebar content is defined in index.html template using the generic sidebar structure.
  // Only update dynamic values (like unread counts, user name, etc.) here if needed.

  // --- Ensure sidebar toggle and overlay exist (for consistent sidebar behavior) ---
  ensureSidebarElements(windowElement);

  if (typeof window.updateSidebarForWindow === 'function') {
    window.updateSidebarForWindow(windowElement);
  }
  if (typeof attachSidebarResizeObserver === 'function') {
    attachSidebarResizeObserver(windowElement);
  }

  // Email data (grouped by day)
  const emails = [
    {
      id: 1,
      sender: 'Andrei Antoniade',
      avatar: 'fa-fire',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',
      date: '17:30',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 KB',
      unread: true,
      icon: 'fa-fire',
      color: '#FF6B6B',
      day: 'Today',
      content: `<b>Hello dear testmail</b><br><br>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<br><br>It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.`
    },
    {
      id: 2,
      sender: 'Andrei Antoniade',
      avatar: 'fa-apple',
      subject: 'Inca un subiect despre care nu vreau sa vorbesc cu nimeni si nim...',
      preview: 'Another preview text for this email.',
      date: '22:41',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 MB',
      unread: true,
      icon: 'fa-apple',
      color: '#fff',
      day: 'Today',
      content: 'This is the content of the second email.'
    },
    {
      id: 3,
      sender: 'Andrei Antoniade',
      avatar: 'fa-facebook',
      subject: 'Inca un subiect despre care nu a putut sa vorbesc cu nimeni s.a fie afis...',
      preview: 'Preview for facebook email.',
      date: '21 jul',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '7.5 MB',
      unread: false,
      icon: 'fa-facebook',
      color: '#1877f3',
      day: 'Today',
      content: 'This is the content of the facebook email.'
    },
    {
      id: 4,
      sender: 'Andrei Antoniade',
      avatar: 'fa-dribbble',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Dribbble preview.',
      date: '23 April',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '12 MB',
      unread: false,
      icon: 'fa-dribbble',
      color: '#ea4c89',
      day: 'Today',
      content: 'This is the content of the dribbble email.'
    },
    {
      id: 5,
      sender: 'Andrei Antoniade',
      avatar: 'fa-fonticons-fi',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Fonticons preview.',
      date: '21 May',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 KB',
      unread: false,
      icon: 'fa-fonticons-fi',
      color: '#3b5998',
      day: 'Today',
      content: 'This is the content of the fonticons email.'
    },
    // Yesterday group
    {
      id: 6,
      sender: 'Andrei Antoniade',
      avatar: 'fa-dribbble',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Yesterday preview.',
      date: '17:30',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 KB',
      unread: false,
      icon: 'fa-dribbble',
      color: '#ea4c89',
      day: 'Yesterday',
      content: 'This is the content of the yesterday email.',
      attachedfile: '<i class="fas fa-paperclip"></i>'
    },
    {
      id: 7,
      sender: 'Andrei Antoniade',
      avatar: 'fa-arrow-down',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Yesterday preview 2.',
      date: '22:41',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 KB',
      unread: false,
      icon: 'fa-arrow-down',
      color: '#8A8A9E',
      day: 'Yesterday',
      content: 'This is the content of the yesterday email 2.'
    },
    {
      id: 8,
      sender: 'Andrei Antoniade',
      avatar: 'fa-arrow-down',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Yesterday preview 2.',
      date: '22:41',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 KB',
      unread: true,
      icon: 'fa-arrow-down',
      color: '#8A8A9E',
      day: 'Yesterday',
      content: 'This is the content of the yesterday email 2.'
    },
    {
      id: 9,
      sender: 'Andrei Antoniade',
      avatar: 'fa-arrow-down',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Yesterday preview 2.',
      date: '22:41',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 KB',
      unread: false,
      icon: 'fa-arrow-down',
      color: '#8A8A9E',
      day: 'Yesterday',
      content: 'This is the content of the yesterday email 2.'
    },
    {
      id: 10,
      sender: 'Andrei Antoniade',
      avatar: 'fa-arrow-down',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Yesterday preview 2.',
      date: '22:41',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 KB',
      unread: true,
      icon: 'fa-arrow-down',
      color: '#8A8A9E',
      day: 'Yesterday',
      content: 'This is the content of the yesterday email 2.'
    },
    {
      id: 11,
      sender: 'Andrei Antoniade',
      avatar: 'fa-arrow-down',
      subject: 'Subiectul si predicat iti explic ce este de explicat',
      preview: 'Yesterday preview 2.',
      date: '22:41',
      bigdate: '04:30 AM • Sunday, April 11, 2025',
      size: '6.1 KB',
      unread: false,
      icon: 'fa-arrow-down',
      color: '#8A8A9E',
      day: 'Yesterday',
      content: 'This is the content of the yesterday email 2.'
    }
  ];

  // Group emails by day
  const groupedEmails = emails.reduce((acc, email) => {
    if (!acc[email.day]) acc[email.day] = [];
    acc[email.day].push(email);
    return acc;
  }, {});

  const emailListSection = windowElement.querySelector('.email-list-section');
  const emailList = windowElement.querySelector('.email-list');
  const emailContentSection = windowElement.querySelector('.email-content-section .email-content');

  function renderEmailList(selectedId) {
    if (!emailList) return;
    emailList.innerHTML = '';
    Object.keys(groupedEmails).forEach(day => {
      // Day header
      const dayHeader = document.createElement('li');
      dayHeader.className = 'email-list-day-header';
      dayHeader.textContent = day + (day === 'Today' ? ' - 12 messages' : day === 'Yesterday' ? ' - 72 messages' : '');
      emailList.appendChild(dayHeader);
      groupedEmails[day].forEach(email => {
        const li = document.createElement('li');
        li.className = 'email-list-item' + (email.id === selectedId ? ' selected' : '') + (email.unread ? ' unread' : '');
        li.innerHTML = `
        <div class="email-list-avatar-meta">
          <div class="email-list-avatar" style="color:${email.color};"><i class="fab ${email.icon}"></i></div>
          <span class="email-list-size">${email.size}</span>
        </div>
          <div class="email-list-main" style="flex:1; min-width:0;">
           <div class="email-list-sender-meta" >
            <div class="email-list-sender" >${email.sender}</div>
                      <div class="email-list-meta" >
                      ${email.attachedfile ? `<span class="email-list-attachedfile"> ${email.attachedfile}</span>` : ''}
            <span class="email-list-date" style="display:block; color:#8A8A9E; font-size:13px;">${email.date}</span>
          </div></div>
            <div class="email-list-subject" >${email.subject}</div>
            <div class="email-list-preview" >${email.preview}</div>
          </div>

        `;
        li.onclick = () => {
          console.log('Email clicked:', email.id, email.subject);

          if (isMobileEmailApp()) {
            showEmailContentPanel();
          }
          renderEmailList(email.id);
          renderEmailContent(email);
        };
        li.ondblclick = () => {
          // Generate a unique window ID for each email content popout
          let emailContentWindowCount = 1;
          while (openWindows[`email-content-window-${emailContentWindowCount}`]) {
            emailContentWindowCount++;
          }
          const windowId = `email-content-window-${emailContentWindowCount}`;
          // Create the window from template
          const emailContentWindow = createWindowFromTemplate('email-content-window', windowId, false);
          if (!emailContentWindow) return;
          
          // Add simple opening animation
          emailContentWindow.classList.add('window-anim-open');
          // Inject the full email-content-section structure
          const content = emailContentWindow.querySelector('.email-content-body');
          if (content) {
            content.innerHTML = `
              <section class="email-content-section">
                <div class="window-toolbar">
                  <div class="toolbar-buttons-left">
                                      <button class="toolbar-button" title="Reply"><i class="fas fa-reply"></i><span>Reply</span></button>
                    <button class="toolbar-button" title="Reply All"><i class="fas fa-reply-all"></i><span>Reply all</span></button>
                    <button class="toolbar-button" title="Forward"><i class="fas fa-share"></i><span>Forward</span></button>
                  </div>
                  <div class="toolbar-buttons-right">
                  
                    <button class="toolbar-button" title="Move"><i class="fas fa-folder-open"></i> <span>Move</span></button>
                    <button class="toolbar-button" title="Spam"><i class="fas fa-shield-virus"></i> <span>Spam</span></button>
                    <button class="toolbar-button" title="Delete"><i class="fas fa-trash"></i> <span>Delete</span></button>
                                  <button class="toolbar-button mailmore-btn" title="More"><i class="fas fa-ellipsis-h"></i></button>
                  </div>
                </div>
                <div class="email-content">
                  <div class="email-content-header" >
                    <div style="display:flex; align-items:center; gap:24px;">
                      <div class="email-content-avatar" ><i class="fab ${email.icon}"></i></div>
                      <div>
                        <div class="email-content-sender">${email.sender}</div>
                        <div class="email-content-from" >From: <span class='email-content-from-address'>info@yourdomain.ro</span></div>
                        <div class="email-content-to">To: <span class='email-content-to-address'>info@mydomain.ro</span></div>
                      </div>
                    </div>
                    <div class="opened-email-meta">
                      <div class="opened-email-meta-date"><div>${email.bigdate}</div> <i class="fa-regular fa-star"></i></div>
                      <div class="opened-email-meta-size">${email.size}</div>
                    </div>
                  </div>
                  <div class="email-content-subject" >${email.subject}</div>
                  <div class="email-content-body" >${email.content}</div>
                  
              </section>
            `;
          }
          // Register the window in openWindows and show taskbar icon
          const iconClass = 'fa-envelope-open';
          const iconBgClass = 'blue-icon';
          const appTitle = email.subject || email.sender || 'Email';
          openWindows[windowId] = {
            element: emailContentWindow,
            name: 'email-content',
            title: appTitle,
            iconClass: iconClass,
            iconBgClass: iconBgClass,
            appTitle: appTitle
          };
          makeWindowActive(emailContentWindow);
          renderPinnedTaskbarIcons();
        };
        emailList.appendChild(li);
      });
    });
  }

  function renderEmailContent(email) {
    const section = windowElement.querySelector('.email-content-section');
    if (!section) {
      console.log('No .email-content-section found!');
      return;
    }

    // Clear existing content first
    section.innerHTML = '';

    // Create and append toolbar
    const toolbar = document.createElement('div');
    toolbar.className = 'window-toolbar';

    // Different toolbar content based on mobile or desktop
    if (isMobileEmailApp()) {
      toolbar.innerHTML = `
        <div class="toolbar-buttons-left">
          <button class="toolbar-button mailback-btn" title="Back"><i class="fas fa-arrow-left"></i> <span>Back</span></button>
          <button class="toolbar-button" title="Reply"><i class="fas fa-reply"></i><span>Reply</span></button>
          <button class="toolbar-button" title="Reply All"><i class="fas fa-reply-all"></i><span>Reply all</span></button>
          <button class="toolbar-button" title="Forward"><i class="fas fa-share"></i><span>Forward</span></button>
        </div>
        <div class="toolbar-buttons-right">
          <button class="toolbar-button" title="Delete"><i class="fas fa-trash"></i> <span>Delete</span></button>
          <button class="toolbar-button mailmore-btn" title="More"><i class="fas fa-ellipsis-h"></i></button>
        </div>
      `;
    } else {
      toolbar.innerHTML = `
        <div class="toolbar-buttons-left">
          <button class="toolbar-button mailback-btn" title="Back"><i class="fas fa-arrow-left"></i> <span>Back</span></button>
          <button class="toolbar-button" title="Reply"><i class="fas fa-reply"></i><span>Reply</span></button>
          <button class="toolbar-button" title="Reply All"><i class="fas fa-reply-all"></i><span>Reply all</span></button>
          <button class="toolbar-button" title="Forward"><i class="fas fa-share"></i><span>Forward</span></button>
        </div>
        <div class="toolbar-buttons-right">
          <button class="toolbar-button" title="Move"><i class="fas fa-folder-open"></i> <span>Move</span></button>
          <button class="toolbar-button" title="Spam"><i class="fas fa-shield-virus"></i> <span>Spam</span></button>
          <button class="toolbar-button" title="Delete"><i class="fas fa-trash"></i> <span>Delete</span></button>
          <button class="toolbar-button mailmore-btn" title="More"><i class="fas fa-ellipsis-h"></i></button>
        </div>
      `;
    }
    section.appendChild(toolbar);

    // Create and append content
    const content = document.createElement('div');
    content.className = 'email-content';
    content.innerHTML = `
      <div class="email-content-header">
        <div style="display:flex; align-items:center; gap:24px;">
          <div class="email-content-avatar"><i class="fab ${email.icon}"></i></div>
          <div>
            <div class="email-content-sender">${email.sender}</div>
            <div class="email-content-from">From: <span class='email-content-from-address'>info@yourdomain.ro</span></div>
            <div class="email-content-to">To: <span class='email-content-to-address'>info@mydomain.ro</span></div>
          </div>
        </div>
        <div class="opened-email-meta">
          <div class="opened-email-meta-date"><div>${email.bigdate}</div> <i class="fa-regular fa-star"></i></div>
          <div class="opened-email-meta-size">${email.size}</div>
        </div>
      </div>
      <div class="email-content-subject">${email.subject}</div>
      <div class="email-content-body">${email.content}</div>
                                        <div class="email-footer-controls">
                                                      <button class="toolbar-button" title="Reply"><i class="fas fa-reply"></i><span>Reply</span></button>
                    <button class="toolbar-button" title="Reply All"><i class="fas fa-reply-all"></i><span>Reply all</span></button>
                    <button class="toolbar-button" title="Forward"><i class="fas fa-share"></i><span>Forward</span></button>
                    </div>
                </div>
    `;
    section.appendChild(content);

    // Re-attach the back button event
    const mailbackBtn = section.querySelector('.mailback-btn');
    if (mailbackBtn) {
      mailbackBtn.addEventListener('click', function (e) {
        showEmailListPanel();
      });
    }

    // Attach dropdown to the more button
    const mailmoreBtn = section.querySelector('.mailmore-btn');
    if (mailmoreBtn) {
      let morePanel = null;

      mailmoreBtn.addEventListener('click', function (e) {
        e.stopPropagation();

        // Close any open panel
        if (morePanel) {
          morePanel.remove();
          morePanel = null;
          return;
        }

        // Create panel
        morePanel = document.createElement('div');
        morePanel.className = 'email-more-panel context-menu'; // Add context-menu class to inherit styles
        morePanel.style.position = 'absolute';
        morePanel.style.zIndex = 10000;
        morePanel.style.padding = '4px 0';
        morePanel.style.minWidth = '200px';
        morePanel.style.fontSize = '14px';
        morePanel.style.animationDuration = '0.15s';
        morePanel.style.transformOrigin = 'top right';

        // Panel HTML - different for mobile and desktop
        if (isMobileEmailApp()) {
          let panelContent = '';
          const mobileOptions = [
            { icon: 'fa-folder-open', label: 'Move' },
            { icon: 'fa-shield-virus', label: 'Spam' }
          ];

          mobileOptions.forEach(item => {
            panelContent += `<div class="context-menu-item"><i class="fas ${item.icon}"></i><span>${item.label}</span></div>`;
          });

          morePanel.innerHTML = panelContent;
        } else {
          let panelContent = '';
          const desktopOptions = [
            { icon: 'fa-tag', label: 'Add a tag' },
            { icon: 'fa-download', label: 'Download message' },
            { icon: 'fa-file-archive', label: 'Download message (zip)' },
            { icon: 'fa-code', label: 'View Message Source' },
            { icon: 'fa-file-code', label: 'View raw message' },
            { icon: 'fa-print', label: 'Print' },
            { type: 'separator' },
            { icon: 'fa-tasks', label: 'Convert to Task' },
            { type: 'separator' },
            { icon: 'fa-address-book', label: 'Open Contact' }
          ];

          desktopOptions.forEach(item => {
            if (item.type === 'separator') {
              panelContent += `<div class="context-menu-separator"></div>`;
            } else {
              panelContent += `<div class="context-menu-item"><i class="fas ${item.icon}"></i><span>${item.label}</span></div>`;
            }
          });

          morePanel.innerHTML = panelContent;
        }

        // Append panel to the body first to measure height
        document.body.appendChild(morePanel);

        // Position panel
        const rect = mailmoreBtn.getBoundingClientRect();
        morePanel.style.right = (window.innerWidth - rect.right) + 'px';
        morePanel.style.top = (rect.bottom + 8) + 'px';

        // Add click handlers to menu items
        const menuItems = morePanel.querySelectorAll('.context-menu-item');
        menuItems.forEach(item => {
          item.addEventListener('click', () => {
            console.log('Clicked option:', item.textContent.trim());
            morePanel.remove();
            morePanel = null;
          });
        });

        // Add pop animation like context menu
        morePanel.classList.remove('context-menu-anim-pop');
        void morePanel.offsetWidth; // force reflow
        morePanel.classList.add('context-menu-anim-pop');

        // Hide panel on outside click
        setTimeout(() => {
          document.addEventListener('mousedown', hideMorePanel, { once: true });
        }, 0);

        function hideMorePanel(ev) {
          if (morePanel && !morePanel.contains(ev.target) && ev.target !== mailmoreBtn) {
            // Add close animation
            morePanel.classList.add('context-menu-anim-close');
            morePanel.addEventListener('animationend', function handler() {
              morePanel.removeEventListener('animationend', handler);
              morePanel.remove();
              morePanel = null;
            });
          }
        }

        // Handle animation end
        morePanel.addEventListener('animationend', function handler() {
          morePanel.classList.remove('context-menu-anim-pop');
          morePanel.removeEventListener('animationend', handler);
        });
      });
    }
  }

  // Render search and sort bar
  const emailListHeader = windowElement.querySelector('.email-list-header');
  if (emailListHeader) {
    emailListHeader.innerHTML = `
    <i class="fas fa-search"></i>
      <input type="text" class="email-search" placeholder="Search..." >
      <div class="email-list-sort">Sort <i class='fas fa-chevron-down' style='font-size:12px;'></i></div>
    `;
  }

  // Initial render
  renderEmailList(emails[0].id);
  renderEmailContent(emails[0]);

  // --- Compose form HTML as a function ---
  function getComposeFormHTML() {
    return `
      <div class="compose-header">
        <div class="compose-from">
          <span class='compose-label'>From</span>
          <span class='compose-from-address'>Argenti - Fresh-Media.ro <span>&lt;info@yourdomain.ro&gt;</span></span>
          <i class="fas fa-chevron-down"></i>
        </div>
       
      </div>
      <div class="compose-row">
        <span class='compose-label'>To</span>
        <input type="text" class="compose-input" placeholder="Add email or start typing to search contacts">
        <span class='compose-ccbcc'>Cc Bcc</span>
      </div>
      <div class="compose-row">
        <span class='compose-label'>Subject</span>
        <input type="text" class="compose-input" placeholder="">
      </div>
      <div class="compose-body">
        <textarea class="compose-textarea" placeholder=""></textarea>
      </div>
      <div class="compose-toolbar-bottom">
        <div style="display:flex; align-items:center; gap:5px;">
        <button class="composer-attach-btn" title="Attach"><i class="fas fa-paperclip"></i><span>Attach files</span></button>
            <button class="compose-toolbar-btn link" title="Link"><i class="fas fa-link"></i></button>
          <button class="compose-toolbar-btn" title="Emoji"><i class="fas fa-smile"></i></button>
          <button class="compose-toolbar-btn bold" title="Bold"><b>B</b></button>
          <button class="compose-toolbar-btn italic" title="Italic"><i class="fas fa-italic"></i></button>
          <button class="compose-toolbar-btn palette" title="Color"><i class="fas fa-palette"></i></button>
          <button class="compose-toolbar-btn font" title="Font"><i class="fas fa-font"></i></button>
          <button class="compose-toolbar-btn more" title="More"><i class="fas fa-ellipsis-h"></i></button>
        </div>
        <div style="display:flex; align-items:center; gap:8px;">
          <button class="close-compose-btn" style="background: none; border: 1px solid var(--border-color); color: var(--text-color); padding: 8px 16px; border-radius: 6px; cursor: pointer;">Cancel</button>
          <button class="compose-send-btn">Send</button>
        </div>
      </div>
    `;
  }

  // --- Compose logic ---
  const composeBtn = windowElement.querySelector('.compose-btn');
  // Remove old inline compose logic

  if (composeBtn) {
    composeBtn.onclick = function () {
      // Store reference to the button for animation
      const clickedButton = this;
      
      // Generate a unique window ID for each compose window
      let composeWindowCount = 1;
      while (openWindows[`compose-window-${composeWindowCount}`]) {
        composeWindowCount++;
      }
      const windowId = `compose-window-${composeWindowCount}`;
      // Create the window from template
      const composeWindow = createWindowFromTemplate('compose-window', windowId, false);
      if (!composeWindow) return;
      
      // Add simple opening animation
      composeWindow.classList.add('window-anim-open');
      // Inject the compose form HTML
      const content = composeWindow.querySelector('.compose-window-content');
      if (content) {
        content.innerHTML = getComposeFormHTML();
        // Attach close logic to the close button in the compose form
        const closeBtn = content.querySelector('.close-compose-btn');
        if (closeBtn) {
          closeBtn.onclick = function () {
            // Use standard window close animation
            const standardCloseBtn = composeWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              composeWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              composeWindow.classList.add('window-anim-close');
              composeWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                  if (composeWindow.parentNode) composeWindow.parentNode.removeChild(composeWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                }
              }, { once: true });
            }
          };
        }
        // Add: Compose toolbar 'more' button panel logic
        const moreBtn = content.querySelector('.compose-toolbar-btn.more');
        let morePanel = null;
        if (moreBtn) {
          moreBtn.addEventListener('click', function (e) {
            e.stopPropagation();
            // Close any open panel
            if (morePanel) {
              morePanel.remove();
              morePanel = null;
              return;
            }
            // Create panel
            morePanel = document.createElement('div');
            morePanel.className = 'compose-more-panel';
            morePanel.style.position = 'absolute';
            morePanel.style.zIndex = 10000;
            // Panel HTML (use your image as reference for content)
            morePanel.innerHTML = `
              <div class="compose-more-panel-inner" style="display: grid; grid-template-columns: 1fr 1fr; gap: 5px;">
                <div class="row" style="display: contents;">
                  <span><i class='fas fa-link'></i> Link</span>
                  <span><b>B</b> Bold</span>
                  <span><i class='fas fa-italic'></i> Italic</span>
                  <span><i class='fas fa-strikethrough'></i> Strikethrough</span>
                  <span><i class='fas fa-font'></i> Font</span>
                  <span><i class='fas fa-palette'></i> Color</span>
                </div>
                <hr style="grid-column: 1 / span 2; margin: 8px 0;" />
                <div class="row" style="display: contents;">
                  <span><i class='fas fa-align-left'></i> Left align</span>
                  <span><i class='fa-solid fa-list-ul'></i> Bulleted List</span>
                  <span><i class='fas fa-align-center'></i> Center align</span>
                  <span><i class='fas fa-list-ol'></i> Numbered list</span>
                  <span><i class='fas fa-align-right'></i> Right align</span>
                  <span><i class='fas fa-outdent'></i> Decrease indent</span>
                </div>
              </div>
            `;
            // Append panel to the compose window (or content) first to measure height
            document.body.appendChild(morePanel);
            // Position panel above the button
            const rect = moreBtn.getBoundingClientRect();
            const panelHeight = morePanel.offsetHeight;
            morePanel.style.left = rect.left + 'px';
            morePanel.style.top = (rect.top - panelHeight - 4) + 'px';
            // Hide panel on outside click
            setTimeout(() => {
              document.addEventListener('mousedown', hidePanel, { once: true });
            }, 0);
            function hidePanel(ev) {
              if (morePanel && !morePanel.contains(ev.target)) {
                morePanel.remove();
                morePanel = null;
              }
            }
          });
        }
      }
      // Register the window in openWindows (with a pen icon and "New Message" title)
      const iconClass = 'fa-pen';
      const iconBgClass = 'blue-icon';
      const appTitle = 'New Message';
      openWindows[windowId] = {
        element: composeWindow,
        name: 'compose',
        title: appTitle,
        iconClass: iconClass,
        iconBgClass: iconBgClass,
        appTitle: appTitle
      };
      makeWindowActive(composeWindow);
      // Call renderPinnedTaskbarIcons to immediately update the taskbar
      renderPinnedTaskbarIcons();
    };
  }

  // ... mobile logic ...
  function isMobileEmailApp() {
    return window.innerWidth <= 767;
  }

  // --- Mobile panel logic ---
  const windowMainContent = windowElement.querySelector('.window-main-content');
  const mailbackBtn = windowElement.querySelector('.mailback-btn');

  function showEmailContentPanel() {
    if (isMobileEmailApp() && windowMainContent) {
      console.log('Adding show-email-content to', windowMainContent);
      // Force a reflow before adding the class to ensure smooth transition
      windowMainContent.offsetHeight;
      windowMainContent.classList.add('show-email-content');

      // Make sure content is visible and on top
      const contentSection = windowMainContent.querySelector('.email-content-section');
      if (contentSection) {
        contentSection.style.zIndex = '2';
        contentSection.style.visibility = 'visible';
      }
    }
  }

  function showEmailListPanel() {
    if (isMobileEmailApp() && windowMainContent) {
      // Force a reflow before removing the class to ensure smooth transition
      windowMainContent.offsetHeight;
      windowMainContent.classList.remove('show-email-content');

      // Reset z-index
      const contentSection = windowMainContent.querySelector('.email-content-section');
      if (contentSection) {
        contentSection.style.zIndex = '';
        // Delay hiding for animation
        setTimeout(() => {
          if (!windowMainContent.classList.contains('show-email-content')) {
            contentSection.style.visibility = '';
          }
        }, 350);
      }
    }
  }

  // Attach mailback-btn event
  if (mailbackBtn) {
    mailbackBtn.addEventListener('click', function (e) {
      showEmailListPanel();
    });
  }

  // Patch renderEmailList to handle mobile view properly
  const origRenderEmailList = renderEmailList;
  renderEmailList = function (selectedId) {
    origRenderEmailList(selectedId);
    const selectedEmail = emails.find(e => e.id === selectedId);

    if (isMobileEmailApp() && typeof selectedId === 'number' && selectedEmail) {
      // Render content first, then show panel
      renderEmailContent(selectedEmail);
      // Use requestAnimationFrame to ensure content is rendered before transition
      requestAnimationFrame(() => {
        showEmailContentPanel();
      });
    } else if (selectedEmail) {
      // On desktop, just render content
      renderEmailContent(selectedEmail);
    }
  };

  // On resize, if on mobile and not viewing content, ensure correct panel
  window.addEventListener('resize', function () {
    if (!isMobileEmailApp() && windowMainContent) {
      windowMainContent.classList.remove('show-email-content');
    }
  });


}

//Point of Sale App Content
function setupPointOfSaleApp(windowElement) {
  console.log('Setting up Point of Sale App');
  
  // Initialize POS number pad functionality with a delay to ensure DOM is ready
  setTimeout(() => {
    console.log('Initializing POS number pad...');
    initializePOSApp(windowElement);
  }, 100);
  
  // Sidebar: do NOT set content here. Sidebar content is defined in index.html template using the generic sidebar structure.
  // Only update dynamic values (like unread counts, user name, etc.) here if needed.

  // --- Ensure sidebar toggle and overlay exist (for consistent sidebar behavior) ---
  ensureSidebarElements(windowElement);

  if (typeof window.updateSidebarForWindow === 'function') {
    window.updateSidebarForWindow(windowElement);
  }
  if (typeof attachSidebarResizeObserver === 'function') {
    attachSidebarResizeObserver(windowElement);
  }

  // Setup sidebar item click handlers
  const sidebarItems = windowElement.querySelectorAll('.sidebar-item');
  sidebarItems.forEach(item => {
    const menuText = item.querySelector('span');
    if (menuText) {
      const menuName = menuText.textContent.trim();
      
      item.addEventListener('click', function() {
        // Remove active class from all sidebar items
        sidebarItems.forEach(si => si.classList.remove('active'));
        // Add active class to clicked item
        this.classList.add('active');
        
        // Handle different menu items
        switch(menuName) {
          case 'Products':
            showProductsSection();
            break;
          case 'Bookings':
            showBookingsSection();
            break;
          case 'Groups (Tables)':
            showTablesSection();
            break;
          case 'Appointments':
            showAppointmentsSection();
            break;
          case 'Tickets':
            showTicketsSection();
            break;
          default:
            showProductsSection(); // Default fallback
        }
      });
    }
  });

  function showProductsSection() {
    console.log('showProductsSection called');
    const contentSection = windowElement.querySelector('.point-of-sale-content-section');
    const bookingSection = windowElement.querySelector('.point-of-sale-booking-content-section');
    const currentOrderSection = windowElement.querySelector('.point-of-sale-current-order-section');
    const bookingOrderSection = windowElement.querySelector('.booking-pos-order-section');
    const activeBookingSection = windowElement.querySelector('.active-booking-pos-section');
    
    console.log('Found elements:', {
      contentSection: !!contentSection,
      bookingSection: !!bookingSection,
      currentOrderSection: !!currentOrderSection,
      bookingOrderSection: !!bookingOrderSection,
      activeBookingSection: !!activeBookingSection
    });
    
    // Remove selected class from all booking bars when switching to products
    const allBookingBars = document.querySelectorAll('.booking-bar');
    allBookingBars.forEach(bar => bar.classList.remove('booking-bar-selected'));
    
    if (contentSection) {
      contentSection.style.display = 'flex';
    }
    if (bookingSection) {
      bookingSection.style.display = 'none';
    }
    
    // Determine which section is currently active and slide it out
    let activeSectionToSlideOut = null;
    
    // Check if active booking section is visible
    if (activeBookingSection && activeBookingSection.style.display !== 'none') {
      activeSectionToSlideOut = activeBookingSection;
    }
    // Otherwise check if booking order section is visible
    else if (bookingOrderSection && bookingOrderSection.style.display !== 'none') {
      activeSectionToSlideOut = bookingOrderSection;
    }
    
    // Slide out the active section and slide in current order section
    if (activeSectionToSlideOut && currentOrderSection) {
      slideOrderSections(activeSectionToSlideOut, currentOrderSection);
    } else {
      console.log('Cannot slide - missing order sections or no active section to slide out');
      if (currentOrderSection) {
        currentOrderSection.style.display = 'flex';
        currentOrderSection.style.transform = 'translateX(0)';
      }
    }
  }

  function showBookingsSection() {
    console.log('showBookingsSection called');
    const contentSection = windowElement.querySelector('.point-of-sale-content-section');
    let bookingSection = windowElement.querySelector('.point-of-sale-booking-content-section');
    const currentOrderSection = windowElement.querySelector('.point-of-sale-current-order-section');
    let bookingOrderSection = windowElement.querySelector('.booking-pos-order-section');
    
    console.log('Initial elements:', {
      contentSection: !!contentSection,
      bookingSection: !!bookingSection,
      currentOrderSection: !!currentOrderSection,
      bookingOrderSection: !!bookingOrderSection
    });
    
    // Hide the products section
    if (contentSection) {
      contentSection.style.display = 'none';
    }
    
    // Create booking section if it doesn't exist
    if (!bookingSection) {
      console.log('Creating booking section');
      bookingSection = createBookingSection();
      const mainContent = windowElement.querySelector('.window-main-content');
      if (mainContent) {
        mainContent.appendChild(bookingSection);
      }
    }
    
    // Create booking order section if it doesn't exist
    if (!bookingOrderSection) {
      console.log('Creating booking order section');
      bookingOrderSection = createBookingOrderSection();
      const mainContent = windowElement.querySelector('.window-main-content');
      if (mainContent) {
        mainContent.appendChild(bookingOrderSection);
      }
    }
    
    // Show booking section
    if (bookingSection) {
      bookingSection.style.display = 'flex';
    }
    
    // Slide out current order section and slide in booking order section
    if (currentOrderSection && bookingOrderSection) {
      slideOrderSections(currentOrderSection, bookingOrderSection);
    } else {
      console.log('Cannot slide - missing order sections');
      if (bookingOrderSection) {
        bookingOrderSection.style.display = 'flex';
        bookingOrderSection.style.transform = 'translateX(0)';
      }
    }
  }

  function showTablesSection() {
    // Placeholder for tables functionality
    console.log('Tables section clicked');
  }

  function showAppointmentsSection() {
    // Placeholder for appointments functionality
    console.log('Appointments section clicked');
  }

  function showTicketsSection() {
    // Placeholder for tickets functionality
    console.log('Tickets section clicked');
  }

  function createBookingSection() {
    const section = document.createElement('section');
    section.className = 'point-of-sale-booking-content-section';
    section.style.display = 'none';
    section.style.flex = '1';
    section.style.minWidth = '650px';
    section.style.height = '100%';
    section.style.flexDirection = 'column';
    
    // Create toolbar - matching the structure of point-of-sale-content-section
    const toolbar = document.createElement('div');
    toolbar.className = 'window-toolbar';
    toolbar.innerHTML = `

      <div class="booking-toolbar-content">
        <div class="booking-toolbar-left">
         <div class="point-of-sale-list-header-left">
                <i class="fas fa-search"></i>
                <input type="text" class="point-of-sale-search" placeholder="Search...">
          </div>
   
        </div>
        <div class="booking-toolbar-center">
          <div class="view-mode-selector">
            <button class="view-mode-btn active" data-months="1">1 Month</button>
            <button class="view-mode-btn" data-months="2">2 Months</button>
            <button class="view-mode-btn" data-months="3">3 Months</button>
          </div>
          <div class="period-selector">
            <button class="period-nav-btn" id="prev-period"><i class="fas fa-chevron-left"></i></button>
            <span class="current-period">February 2025</span>
            <button class="period-nav-btn" id="next-period"><i class="fas fa-chevron-right"></i></button>
          </div>
        
        <div class="booking-toolbar-right">
          <div class="booking-sort">Sort <i class="fas fa-chevron-down" style="font-size:12px;"></i></div>
          <div class="booking-view">View <i class="fas fa-chevron-down" style="font-size:12px;"></i></div>
        </div>
      </div></div>
    `;
    
    // Create booking content - matching the structure of point-of-sale-content
    const content = document.createElement('div');
    content.className = 'booking-content';
    content.innerHTML = createBookingCalendarHTML();
    
    section.appendChild(toolbar);
    section.appendChild(content);
    
    // Create and add statusbar
    const statusbar = document.createElement('div');
    statusbar.className = 'window-statusbar';
    statusbar.innerHTML = `
      <div class="status-left">
      <label class="toggle-switch" id="booking-sidebar-toggle-label" style="margin-right: 14px;">
        <input type="checkbox" class="window-sidebar-toggle" id="booking-sidebar-toggle">
        <span class="slider"></span>
      </label>
        <span>Booking Calendar</span>
        <span class="status-separator">•</span>
        <span>February 2025</span>
      </div>
      <div class="status-right">
        <span>5 rooms available</span>
        <span class="status-separator">•</span>
        <span>12 bookings</span>
      </div>
    `;
    section.appendChild(statusbar);
    
    // Attach event handlers
    setTimeout(() => {
      attachBookingEventHandlers(section);
      
      // Set initial room selection (first room)
      const firstRoomItem = section.querySelector('.room-item');
      if (firstRoomItem) {
        const roomId = firstRoomItem.getAttribute('data-room-id');
        firstRoomItem.classList.add('selected');
        
        // Highlight corresponding room row
        const correspondingRow = document.querySelector(`.room-row[data-room-id="${roomId}"]`);
        if (correspondingRow) {
          correspondingRow.classList.add('selected');
          console.log('Initial room row highlighted for room:', roomId);
        }
      }
    }, 0);
    
    return section;
  }

  function createBookingOrderSection() {
    const section = document.createElement('section');
    section.className = 'booking-pos-order-section';
    section.style.display = 'none';
    section.style.transform = 'translateX(100%)';
    section.style.transition = 'transform 0.3s ease-in-out';
    section.style.width = '350px';
    section.style.minWidth = '350px';
    section.style.maxWidth = '350px';
    section.style.height = '100%';
    section.style.flexShrink = '0';
    
    // Duplicate the exact HTML structure from point-of-sale-current-order-section
    section.innerHTML = `
      <div class="window-toolbar">
        <div class="toolbar-buttons-left">
          <div class="point-of-sale-current-order-header-item"><h3>New Booking</h3> <i class="fas fa-chevron-down"></i></div>
        </div>
        <div class="toolbar-buttons-right">
          <button class="toolbar-button" title="Save"><i class="fas fa-save"></i> </button>
          <button class="toolbar-button" title="Delete"><i class="fas fa-trash"></i> </button>
          <button class="toolbar-button mailmore-btn" title="More"><i class="fas fa-ellipsis-h"></i></button>
        </div>
        
      </div>



      <div class="point-of-sale-current-order-content">

        <!-- Order Items Section (Scrollable) -->
        <div class="booking-order-items-container">

        <div class="booking-check-availability-header">
<h3>Check availability</h3> <i class="fas fa-xmark"></i>
</div>
                <div class="booking-checkin-checkout-header">
            <div class="booking-order-checkin">
            <label class="publish-label">Check in</label>
            <div class="date-picker-container">
              <input type="text" class="form-control date-input" value="Today 25 Feb">
              <button class="calendar-button">
                <i class="fas fa-calendar-alt"></i>
              </button>
            </div>
                     </div>
            <div class="booking-order-checkout">
            <label class="publish-label">Check out</label>
            <div class="date-picker-container">
              <input type="text" class="form-control date-input" value="05-01-2025">
              <button class="calendar-button">
                <i class="fas fa-calendar-alt"></i>
              </button>
            </div>
         
            </div>
            <button class="pos-action-btn pos-checkin-checkout-btn">
              <i class="fas fa-magnifying-glass"></i>
            </button>
          </div>

          <div class="booking-search-container">
<h3>Search booking</h3>

    <div class="booking-search-input">
              <input type="text" class="form-control search-input" value="Search by name, phone, id">
            <button class="pos-action-btn pos-search-btn">
              <i class="fas fa-magnifying-glass"></i>
            </button>
            </div>
            </div>
         




          <div class="pos-order-item">
            <div class="pos-item-main-row">
              <div class="pos-item-image">
                <img src="img/appsimg/camera.png" alt="Product" class="item-image">
              </div>
              <div class="pos-item-details">
                <div class="pos-item-name">Deluxe <div class="pos-item-rooms-no">3</div></div>
                <div class="pos-item-price">490 lei (129/day)</div>
              </div>
              <div class="pos-item-quantity">
                <button class="qty-btn qty-decrease" title="Decrease"><i class="fas fa-minus"></i></button>
                <span class="qty-value">1</span>
                <button class="qty-btn qty-increase" title="Increase"><i class="fas fa-plus"></i></button>
              </div>
            </div>
            
            <!-- Expanded Content -->
            <div class="pos-item-expanded-content">
              <div class="pos-item-options-row">

  <!-- Room No. Section -->
                <div class="pos-item-quantity-section">
                  <div class="pos-item-quantity-label">Room No. (7)</div>
                  <div class="pos-item-quantity-controls">
                    <button class="qty-btn qty-decrease" title="Decrease"><i class="fas fa-chevron-left"></i></button>
                    <span class="qty-value">157</span>
                    <button class="qty-btn qty-increase" title="Increase"><i class="fas fa-chevron-right"></i></button>
                  </div>
                </div>

                <!-- Adults Section -->
                <div class="pos-item-quantity-section">
                  <div class="pos-item-quantity-label">Adults</div>
                  <div class="pos-item-quantity-controls">
                    <button class="qty-btn qty-decrease" title="Decrease"><i class="fas fa-minus"></i></button>
                    <span class="qty-value">1</span>
                    <button class="qty-btn qty-increase" title="Increase"><i class="fas fa-plus"></i></button>
                  </div>
                </div>
                <!-- Children Section -->
                <div class="pos-item-quantity-section">
                  <div class="pos-item-quantity-label">Children</div>
                  <div class="pos-item-quantity-controls">
                    <button class="qty-btn qty-decrease" title="Decrease"><i class="fas fa-minus"></i></button>
                    <span class="qty-value">1</span>
                    <button class="qty-btn qty-increase" title="Increase"><i class="fas fa-plus"></i></button>
                  </div>
                </div>
                

              </div>
              
              <!-- Action Buttons -->
              <div class="pos-item-actions">
                <button class="pos-item-action-btn">Note</button>
                <button class="pos-item-action-btn">Extra</button>
                <button class="pos-item-action-btn danger">Remove</button>
              </div>
                            <!-- Action Buttons -->
              <div class="pos-item-actions">
xxx
              </div>
            </div>
     

          </div>


<div class="pos-order-item">
            <div class="pos-item-main-row">
              <div class="pos-item-image">
                <img src="img/appsimg/camera.png" alt="Product" class="item-image">
              </div>
              <div class="pos-item-details">
                <div class="pos-item-name">Deluxe <div class="pos-item-rooms-no">73</div></div>
                <div class="pos-item-price">490 lei (129/day)</div>
              </div>
              <div class="pos-item-quantity">
                <button class="qty-btn qty-decrease" title="Decrease"><i class="fas fa-minus"></i></button>
                <span class="qty-value">1</span>
                <button class="qty-btn qty-increase" title="Increase"><i class="fas fa-plus"></i></button>
              </div>
            </div>
            
            <!-- Expanded Content -->
            <div class="pos-item-expanded-content">
              <div class="pos-item-options-row">

  <!-- Room No. Section -->
                <div class="pos-item-quantity-section">
                  <div class="pos-item-quantity-label">Room No. (7)</div>
                  <div class="pos-item-quantity-controls">
                    <button class="qty-btn qty-decrease" title="Decrease"><i class="fas fa-chevron-left"></i></button>
                    <span class="qty-value">157</span>
                    <button class="qty-btn qty-increase" title="Increase"><i class="fas fa-chevron-right"></i></button>
                  </div>
                </div>

                <!-- Adults Section -->
                <div class="pos-item-quantity-section">
                  <div class="pos-item-quantity-label">Adults</div>
                  <div class="pos-item-quantity-controls">
                    <button class="qty-btn qty-decrease" title="Decrease"><i class="fas fa-minus"></i></button>
                    <span class="qty-value">1</span>
                    <button class="qty-btn qty-increase" title="Increase"><i class="fas fa-plus"></i></button>
                  </div>
                </div>
                <!-- Children Section -->
                <div class="pos-item-quantity-section">
                  <div class="pos-item-quantity-label">Children</div>
                  <div class="pos-item-quantity-controls">
                    <button class="qty-btn qty-decrease" title="Decrease"><i class="fas fa-minus"></i></button>
                    <span class="qty-value">1</span>
                    <button class="qty-btn qty-increase" title="Increase"><i class="fas fa-plus"></i></button>
                  </div>
                </div>
                
           
                </div>
              
              <!-- Action Buttons -->
              <div class="pos-item-actions">
                <button class="pos-item-action-btn">Note</button>
                <button class="pos-item-action-btn">Extra</button>
                <button class="pos-item-action-btn danger">Remove</button>
              </div>
                            <!-- Action Buttons -->
              <div class="pos-item-actions">
xxxx
              </div>
            </div>
     

          </div>



          
          
        </div>

        <!-- Order Summary Footer -->
        <div class="pos-order-footer">
          <!-- Number Pad (Hidden by default) -->
          <div class="pos-number-pad" id="pos-number-pad-booking" style="display: none;">
            <div class="number-pad-grid">
              <button class="number-pad-btn" data-number="1">1</button>
              <button class="number-pad-btn" data-number="2">2</button>
              <button class="number-pad-btn" data-number="3">3</button>
              <button class="number-pad-btn" data-number="4">4</button>
              <button class="number-pad-btn" data-number="5">5</button>
              <button class="number-pad-btn" data-number="6">6</button>
              <button class="number-pad-btn" data-number="7">7</button>
              <button class="number-pad-btn" data-number="8">8</button>
              <button class="number-pad-btn" data-number=".">.</button>
              <button class="number-pad-btn" data-number="9">9</button>
              <button class="number-pad-btn" data-number="0">0</button>
              <button class="number-pad-btn number-pad-confirm" data-action="confirm">
                <i class="fas fa-check"></i>
              </button>
            </div>
          </div>
          
          <!-- Discount Section -->
          <div class="pos-discount-section">
            <div class="pos-discount-label">Discount fix</div>
            <div class="pos-discount-value">500 lei</div>
          </div>

          <!-- Total Section -->
          <div class="pos-total-section">
            <div class="pos-total-row">
              <span class="pos-total-label">Total</span>
              <span class="pos-total-amount">5525 lei</span>
            </div>
            <div class="pos-subtotal-row">
            </div>
          </div>

<!-- Payment Methods -->

          <!-- Action Buttons -->
          <div class="pos-action-buttons">
            <button class="pos-action-btn pos-add-booking-btn">
              <i class="fas fa-plus"></i>
              <span>Add Booking</span>
            </button>
          </div>

          <!-- Bottom Action Buttons -->
          <div class="pos-bottom-actions">
            <button class="pos-bottom-btn">Vezi ultimul bon</button>
            <button class="pos-bottom-btn">Storno</button>
            <button class="pos-bottom-btn">Discount</button>
          </div>
        </div>
      </div>
    `;
    
    // Attach event handlers for the booking order section
    setTimeout(() => {
      attachBookingOrderEventHandlers(section);
    }, 0);
    
    return section;
  }

  function createBookingCustomerInfoSection() {
    const section = document.createElement('section');
    section.className = 'point-of-sale-customer-info-content';
    section.style.display = 'none';
    section.style.transform = 'translateX(100%)';
    section.style.transition = 'transform 0.3s ease-in-out';
    section.style.width = '350px';
    section.style.minWidth = '350px';
    section.style.maxWidth = '350px';
    section.style.height = '100%';
    section.style.flexShrink = '0';
    
    section.innerHTML = `
      <div class="window-toolbar">
        <div class="toolbar-buttons-left">
<button class="pos-back-to-booking-btn" style="margin-right: 10px;"><i class="fas fa-chevron-left"></i></button>
          <div class="point-of-sale-current-order-header-item"><h3>Contact Info</h3> </div>
        </div>
        <div class="toolbar-buttons-right">
          <button class="toolbar-button" title="Save"><i class="fas fa-address-card"></i> </button>
          <button class="toolbar-button" title="Delete"><i class="fas fa-magnifying-glass"></i> </button>
          <button class="toolbar-button mailmore-btn" title="More"><i class="fas fa-ellipsis-h"></i></button>
        </div>
      </div>

      



      <div class="point-of-sale-current-order-content">

      
        <!-- Customer Details Section (Scrollable) -->
        <div class="booking-contact-details-container">
          



        

          <!-- Customer Information Form -->
          <div class="customer-info-form">
          <h3 style="margin-bottom: 20px;">Order Info</h3>

<div class="pos-item-main-row">
              <div class="pos-item-image">
                <img src="img/appsimg/camera.png" alt="Room" class="item-image">
              </div>
              <div class="pos-item-details">
                <div class="pos-item-name">Room 101</div>
<div class="pos-item-members">
                  <div class="pos-item-members-adults">
                    <div class="pos-item-members-adults-label">Adults</div>
                    <div class="pos-item-members-adults-value">2</div>
                    </div>
                                      <div class="pos-item-members-kids">
                      <div class="pos-item-members-kids-label">Kids</div>
                      <div class="pos-item-members-kids-value">0</div>
                    </div>

                  </div>              </div>
              <div class="pos-item-booking-info">
                <div class="pos-item-name">Deluxe</div>
                 <div class="pos-item-members">
                  <div class="pos-item-members-adults">
                    <div class="pos-item-members-adults-label">Adults</div>
                    <div class="pos-item-members-adults-value">2</div>
                    </div>
                                      <div class="pos-item-members-kids">
                      <div class="pos-item-members-kids-label">Kids</div>
                      <div class="pos-item-members-kids-value">0</div>
                    </div>

                  </div>
              </div>
            </div>

            <div class="pos-item-main-row">
              <div class="pos-item-image">
                <img src="img/appsimg/camera.png" alt="Room" class="item-image">
              </div>
              <div class="pos-item-details">
                <div class="pos-item-name">Room 101</div>
<div class="pos-item-members">
                  <div class="pos-item-members-adults">
                    <div class="pos-item-members-adults-label">Adults</div>
                    <div class="pos-item-members-adults-value">2</div>
                    </div>
                                      <div class="pos-item-members-kids">
                      <div class="pos-item-members-kids-label">Kids</div>
                      <div class="pos-item-members-kids-value">0</div>
                    </div>

                  </div>              </div>
              <div class="pos-item-booking-info">
                <div class="pos-item-name">Deluxe</div>
                 <div class="pos-item-members">
                  <div class="pos-item-members-adults">
                    <div class="pos-item-members-adults-label">Adults</div>
                    <div class="pos-item-members-adults-value">2</div>
                    </div>
                                      <div class="pos-item-members-kids">
                      <div class="pos-item-members-kids-label">Kids</div>
                      <div class="pos-item-members-kids-value">0</div>
                    </div>

                  </div>
              </div>
            </div>



          <h3 style="margin-bottom: 20px; margin-top: 40px;">Contact Info</h3>
            <div class="customer-form-group">
              <label class="customer-form-label">First Name</label>
              <input type="text" class="customer-form-input" placeholder="Enter first name">
            </div>
            
            <div class="customer-form-group">
              <label class="customer-form-label">Last Name</label>
              <input type="text" class="customer-form-input" placeholder="Enter last name">
            </div>
            
            <div class="customer-form-group">
              <label class="customer-form-label">Email</label>
              <input type="email" class="customer-form-input" placeholder="Enter email address">
            </div>
            
            <div class="customer-form-group">
              <label class="customer-form-label">Phone</label>
              <input type="tel" class="customer-form-input" placeholder="Enter phone number">
            </div>
            
            <div class="customer-form-group">
              <label class="customer-form-label">Address</label>
              <textarea class="customer-form-textarea" placeholder="Enter address" rows="3"></textarea>
            </div>
            
            <div class="customer-form-group">
              <label class="customer-form-label">City</label>
              <input type="text" class="customer-form-input" placeholder="Enter city">
            </div>
            
            <div class="customer-form-group">
              <label class="customer-form-label">Country</label>
              <select class="customer-form-select">
                <option value="">Select country</option>
                <option value="RO">Romania</option>
                <option value="US">United States</option>
                <option value="UK">United Kingdom</option>
                <option value="DE">Germany</option>
                <option value="FR">France</option>
              </select>
            </div>
            
            <div class="customer-form-group">
              <label class="customer-form-label">Special Requests</label>
              <textarea class="customer-form-textarea" placeholder="Any special requests or notes" rows="4"></textarea>
            </div>


<div class="settings-group">
          <div class="settings-group-header">
        <h3>Billing to company?</h3> 

        <div class="toggle-switch toggle-switch-L">
                <input type="checkbox" class="section-toggle">
                <span class="toggle-slider"></span>
              </div>
        </div>

        <div class="publishing-options-section" style="display: block; height: 100%;">
          <div class="settings-item">
            <label>Company Name</label>
            <input type="text" class="settings-input" value="Company Name SRL">
          </div>
                    <div class="settings-item">
            <label>VAT / CUI</label>
            <input type="text" class="settings-input" value="RO1234567890">
          </div>
                    <div class="settings-item">
            <label>Registration Number</label>
            <input type="text" class="settings-input" value="J13/1994/20232">
          </div>
                    <div class="settings-item">
            <label>Address</label>
            <textarea class="settings-textarea">Address</textarea>
          </div>
                    <div class="settings-item">
            <label>City</label>
            <input type="text" class="settings-input" value="Bucuresti">
          </div>
                    <div class="settings-item">
            <label>Country</label>
<select class="customer-form-select">
                <option value="">Select country</option>
                <option value="RO">Romania</option>
                <option value="US">United States</option>
                <option value="UK">United Kingdom</option>
                <option value="DE">Germany</option>
                <option value="FR">France</option>
              </select>          </div>
          <div class="settings-item">
            <label>Meta Description</label>
            <textarea class="settings-textarea">Check out my portfolio of recent projects and work.</textarea>
          </div>
<div class="publish-section">  
 <div class="form-row-top-input">
             <label class="publish-label">SEO Exclusion</label>
             </div>
<div class="checkbox-option">
                  <input type="checkbox" id="no-index-page">
                  <label for="no-index-page">No index (exclude from search engines)</label>
                </div>
                <div class="checkbox-option" style="margin-top: 10px;">
                  <input type="checkbox" id="no-follow-page">
                  <label for="no-follow-page">No follow (do not follow links)</label>
                </div>
                                <div class="checkbox-option" style="margin-top: 10px;">
                  <input type="checkbox" id="exclude-page-from-sitemap">
                  <label for="exclude-page-from-sitemap">Exclude page from sitemap</label>
                </div>
            </div>
        </div>
        </div>





        <div class="settings-item" style="margin-top: 40px;">
        <h3>ID or Passport</h3>
        <div class="settings-image-upload">
          <i class="fas fa-camera"></i>
          <span>Take photo of ID or Passport</span>

          </div>
                        <div class="upload-image-description">
            <span> Take photo of ID or Passport without text input</span>
</span>
        </div>
      </div>




          </div>
        </div>

        <!-- Order Summary Footer -->
        <div class="pos-order-footer">
          <!-- Number Pad (Hidden by default) -->
          <div class="pos-number-pad" id="pos-number-pad-customer" style="display: none;">
            <div class="number-pad-grid">
              <button class="number-pad-btn" data-number="1">1</button>
              <button class="number-pad-btn" data-number="2">2</button>
              <button class="number-pad-btn" data-number="3">3</button>
              <button class="number-pad-btn" data-number="4">4</button>
              <button class="number-pad-btn" data-number="5">5</button>
              <button class="number-pad-btn" data-number="6">6</button>
              <button class="number-pad-btn" data-number="7">7</button>
              <button class="number-pad-btn" data-number="8">8</button>
              <button class="number-pad-btn" data-number=".">.</button>
              <button class="number-pad-btn" data-number="9">9</button>
              <button class="number-pad-btn" data-number="0">0</button>
              <button class="number-pad-btn number-pad-confirm" data-action="confirm">
                <i class="fas fa-check"></i>
              </button>
            </div>
          </div>
          
          <!-- Discount Section -->
          <div class="pos-discount-section">
            <div class="pos-discount-label">Discount fix</div>
            <div class="pos-discount-value">500 lei</div>
          </div>

          <!-- Total Section -->
          <div class="pos-total-section">
            <div class="pos-total-row">
              <span class="pos-total-label">Total</span>
              <span class="pos-total-amount">5525 lei</span>
            </div>
            <div class="pos-subtotal-row">
            </div>
          </div>

          <!-- Payment Methods -->
          <div class="pos-payment-methods">
            <button class="pos-payment-btn pos-payment-cash">
              <i class="fas fa-money-bill"></i>
              <span>Cash</span>
            </button>
            <button class="pos-payment-btn pos-payment-card">
              <i class="fas fa-credit-card"></i>
              <span>Card</span>
            </button>
            <button class="pos-payment-btn pos-payment-ticket">
              <i class="fas fa-ticket-alt"></i>
              <span>Ticket</span>
            </button>

            
          </div>

          <!-- Action Buttons -->
          <div class="pos-action-buttons">
            <button class="pos-action-btn pos-checkout-btn">
              <i class="fas fa-credit-card"></i>
              <span>Proceed to Payment</span>
            </button>
          </div>

          <!-- Bottom Action Buttons -->
          <div class="pos-bottom-actions">
            <button class="pos-bottom-btn">Back to Booking</button>
            <button class="pos-bottom-btn">Save Customer</button>
            <button class="pos-bottom-btn">Clear Form</button>
          </div>
        </div>
      </div>
    `;
    
    return section;
  }

  // Event handlers specifically for booking order section
  function attachBookingOrderEventHandlers(section) {
    console.log('Attaching booking order event handlers');
    
    // Check availability button handler
    const checkAvailabilityBtn = section.querySelector('.pos-checkin-checkout-btn');
    if (checkAvailabilityBtn) {
      checkAvailabilityBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        console.log('Check availability button clicked');
        
        // Show order items
        const orderItems = section.querySelectorAll('.pos-order-item');
        orderItems.forEach(item => {
          item.style.display = 'block';
        });
        
        // Show the order footer
        const orderFooter = section.querySelector('.pos-order-footer');
        if (orderFooter) {
          orderFooter.style.display = 'flex';
        }
        
        // Hide the search container
        const searchContainer = section.querySelector('.booking-search-container');
        if (searchContainer) {
          searchContainer.style.display = 'none';
        }
        
        // Show the xmark icon
        const xmarkIcon = section.querySelector('.booking-check-availability-header .fa-xmark');
        if (xmarkIcon) {
          xmarkIcon.style.display = 'inline';
        }
      });
    }
    
    // Xmark icon handler (close results)
    const xmarkIcon = section.querySelector('.booking-check-availability-header .fa-xmark');
    if (xmarkIcon) {
      xmarkIcon.addEventListener('click', function(e) {
        e.stopPropagation();
        console.log('Xmark clicked - hiding results');
        
        // Hide order items
        const orderItems = section.querySelectorAll('.pos-order-item');
        orderItems.forEach(item => {
          item.style.display = 'none';
        });
        
        // Hide the order footer
        const orderFooter = section.querySelector('.pos-order-footer');
        if (orderFooter) {
          orderFooter.style.display = 'none';
        }
        
        // Show the search container
        const searchContainer = section.querySelector('.booking-search-container');
        if (searchContainer) {
          searchContainer.style.display = 'block';
        }
        
        // Hide the xmark icon
        this.style.display = 'none';
      });
    }
    
    // Prevent quantity containers from triggering order item expansion
    const quantityContainers = section.querySelectorAll('.pos-item-quantity, .pos-item-quantity-controls');
    quantityContainers.forEach(container => {
      container.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    });

    // Quantity button handlers for booking order items
    const quantityButtons = section.querySelectorAll('.qty-btn');
    quantityButtons.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.stopPropagation();
        
        const qtyValueSpan = this.parentElement.querySelector('.qty-value');
        const currentQty = parseInt(qtyValueSpan.textContent);
        const isIncrease = this.classList.contains('qty-increase');
        const isMainQuantity = this.closest('.pos-item-main-row') !== null;
        
        // Only handle main quantity changes (not sub-controls like room number, adults, children)
        if (isMainQuantity) {
          let newQty = currentQty;
          
          if (isIncrease) {
            newQty = Math.min(currentQty + 1, 10); // Max 10 rooms
          } else {
            newQty = Math.max(currentQty - 1, 1); // Min 1 room
          }
          
          qtyValueSpan.textContent = newQty;
          
          // Update expanded content sections based on new quantity
          const orderItem = this.closest('.pos-order-item');
          updateBookingExpandedContent(orderItem, newQty);
        } else {
          // Handle sub-control quantity changes normally
          let newQty = currentQty;
          
          if (isIncrease) {
            newQty = currentQty + 1;
          } else {
            newQty = Math.max(currentQty - 1, 0);
          }
          
          qtyValueSpan.textContent = newQty;
        }
      });
    });

    // Action button handlers
    const actionButtons = section.querySelectorAll('.pos-item-action-btn');
    actionButtons.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.stopPropagation();
        console.log('Action button clicked:', this.textContent);
      });
    });

    // Order item expansion/collapse handlers
    const orderItems = section.querySelectorAll('.pos-order-item');
    orderItems.forEach(item => {
      item.addEventListener('click', function(e) {
        console.log('Order item clicked, target:', e.target);
        
        // Only block expansion if clicking directly on quantity buttons or action buttons
        if (
          e.target.classList.contains('qty-btn') ||
          e.target.closest('.qty-btn') ||
          e.target.classList.contains('pos-item-action-btn') ||
          e.target.closest('.pos-item-action-btn')
        ) {
          console.log('Blocked expansion due to button click');
          return; // Don't toggle if clicking on buttons
        }
        
        // Close all other expanded items first
        const allItems = section.querySelectorAll('.pos-order-item');
        allItems.forEach(otherItem => {
          if (otherItem !== this && otherItem.classList.contains('expanded')) {
            otherItem.classList.remove('expanded');
          }
        });
        
        // Toggle the clicked item
        this.classList.toggle('expanded');
        console.log('Order item toggled:', this.classList.contains('expanded') ? 'expanded' : 'collapsed');
      });
    });

    // Add booking button handler
    const addBookingBtn = section.querySelector('.pos-add-booking-btn');
    if (addBookingBtn) {
      addBookingBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        console.log('Add Booking button clicked');
        slideToCustomerInfo();
      });
    }
  }

  // Event handlers for customer info section
  function attachCustomerInfoEventHandlers(section) {
    console.log('Attaching customer info event handlers');
    
    // Payment method buttons
    const paymentButtons = section.querySelectorAll('.pos-payment-btn');
    paymentButtons.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.stopPropagation();
        // Remove active class from all payment buttons
        paymentButtons.forEach(b => b.classList.remove('active'));
        // Add active class to clicked button
        this.classList.add('active');
        console.log('Payment method selected:', this.textContent.trim());
      });
    });

    // Proceed to payment button handler
    const proceedBtn = section.querySelector('.pos-checkout-btn');
    if (proceedBtn) {
      proceedBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        console.log('Proceed to Payment button clicked');
        // Add payment processing logic here
      });
    }

    // Bottom action buttons
    const bottomButtons = section.querySelectorAll('.pos-bottom-btn');
    bottomButtons.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.stopPropagation();
        const buttonText = this.textContent.trim();
        
        if (buttonText === 'Back to Booking') {
          slideBackToBooking();
        } else {
          console.log('Bottom button clicked:', buttonText);
        }
      });
    });
  }

  // Function to slide from booking order to customer info
  function slideToCustomerInfo() {
    const bookingOrderSection = document.querySelector('.booking-pos-order-section .point-of-sale-current-order-content');
    const bookingToolbar = document.querySelector('.booking-pos-order-section .window-toolbar');
    let customerInfoSection = document.querySelector('.point-of-sale-customer-info-content');
    
    // Create customer info section if it doesn't exist
    if (!customerInfoSection) {
      customerInfoSection = createBookingCustomerInfoSection();
      const parentContainer = document.querySelector('.booking-pos-order-section');
      if (parentContainer) {
        parentContainer.appendChild(customerInfoSection);
      }
      
      // Attach event handlers for the customer info section
      setTimeout(() => {
        attachCustomerInfoEventHandlers(customerInfoSection);
      }, 0);
    }
    
    // Ensure both elements have proper transition properties
    if (bookingOrderSection) {
      bookingOrderSection.style.transition = 'transform 0.3s ease-in-out';
    }
    if (bookingToolbar) {
      bookingToolbar.style.transition = 'transform 0.3s ease-in-out';
    }
    
    // Show customer info section (off-screen right)
    customerInfoSection.style.display = 'block';
    customerInfoSection.style.transform = 'translateX(100%)';
    
    // Start animation after a brief delay
    setTimeout(() => {
      // Slide booking order content to left
      if (bookingOrderSection) {
        bookingOrderSection.style.transform = 'translateX(-100%)';
      }
      
      // Slide booking toolbar to left as well
      if (bookingToolbar) {
        bookingToolbar.style.transform = 'translateX(-100%)';
      }
      
      // Slide customer info in from right
      customerInfoSection.style.transform = 'translateX(0)';
    }, 50);
    
    console.log('Sliding to customer info');
  }

  // Function to create active booking section for existing bookings
  function createActiveBookingSection(bookingData) {
    const section = document.createElement('section');
    section.className = 'active-booking-pos-section';
    section.style.display = 'none';
    section.style.transform = 'translateX(100%)';
    section.style.transition = 'transform 0.3s ease-in-out';
    section.style.width = '350px';
    section.style.minWidth = '350px';
    section.style.maxWidth = '350px';
    section.style.height = '100%';
    section.style.flexShrink = '0';
    
    // Create the HTML structure similar to booking order section but for existing booking
    section.innerHTML = `
      <div class="window-toolbar">
        <div class="toolbar-buttons-left">
        <button class="pos-back-to-booking-btn" style="margin-right: 10px;"><i class="fas fa-chevron-left"></i></button>
          <div class="point-of-sale-current-order-header-item"><h3>Booking #${bookingData.id}</h3> <i class="fas fa-chevron-down"></i></div>
        </div>
        <div class="toolbar-buttons-right">
          <button class="toolbar-button" title="Edit"><i class="fas fa-edit"></i></button>
          <button class="toolbar-button" title="Print"><i class="fas fa-print"></i></button>
          <button class="toolbar-button mailmore-btn" title="More"><i class="fas fa-ellipsis-h"></i></button>
        </div>
      </div>

      <div class="point-of-sale-current-order-content">
        <!-- Booking Details Container (Scrollable) -->
        <div class="booking-order-items-container">
          <!-- Check-in/Check-out Header -->
          

          <!-- Room Information -->
          <div class="pos-order-item expanded">
            <div class="pos-item-main-row">
              <div class="pos-item-image">
                <img src="img/appsimg/camera.png" alt="Room" class="item-image">
              </div>
              <div class="pos-item-details">
                <div class="pos-item-name"><div class="pos-item-rooms-no">Room ${bookingData.roomNumber || '101'}</div></div>
<div class="pos-item-members">
                  <div class="pos-item-members-adults">
                    <div class="pos-item-members-adults-label">Adults</div>
                    <div class="pos-item-members-adults-value">2</div>
                    </div>
                                      <div class="pos-item-members-kids">
                      <div class="pos-item-members-kids-label">Kids</div>
                      <div class="pos-item-members-kids-value">0</div>
                    </div>

                  </div>              </div>
              <div class="pos-item-booking-info">
                <div class="pos-item-name">${bookingData.roomType || 'Deluxe'}</div>
                 <div class="pos-item-members">
                  <div class="pos-item-members-adults">
                    <div class="pos-item-members-adults-label">Adults</div>
                    <div class="pos-item-members-adults-value">2</div>
                    </div>
                                      <div class="pos-item-members-kids">
                      <div class="pos-item-members-kids-label">Kids</div>
                      <div class="pos-item-members-kids-value">0</div>
                    </div>

                  </div>
              </div>
            </div>
            
<div class="note-card">
                <div class="note-header">
                                    <div class="note-meta">
                  <div class="note-meta-note-type">
<i class="fas fa-pencil-alt"></i><span>Note</span>


                    </div>
                    <div class="note-timestamp">21 mai 2025 16:30</div>
                  </div>
                </div>
                
                <div class="note-content">
                  M-a sunat acum 2 zile sa ma intrebe de ce si n-am stiut ce sa-i spun. Urmeaza raspunsul.dar mai bine nu ca iar ne da
                </div>
                <div class="note-to-who-timestamp">
                
                </div>
              </div>




            <div class="pos-item-expanded-content">
            
              <div class="customer-info-section">
                <h4 style="margin-bottom: 15px; color: var(--text-color);">Check In / Check Out</h4>
                



                <div class="customer-checkin-checkout-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Check In Date</label>
                    <div class="customer-info-value">${formatDate(bookingData.startDate)} 21:30</div>
                  </div>
                                    <div class="customer-info-field">
                    <label class="customer-form-label">Check In Date</label>
                    <div class="customer-info-value">${formatDate(bookingData.startDate)} 21:30</div>
                  </div>
                </div>
                 </div>
                </div>




            <!-- Expanded Content with Customer Info -->
            <div class="pos-item-expanded-content">
            
              <div class="customer-info-section">
                <h4 style="margin-bottom: 15px; color: var(--text-color);">Guest Information</h4>
                



                <div class="customer-info-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Guest Name</label>
                    <div class="customer-info-value">${bookingData.guest}</div>
                  </div>
                </div>
                
                <div class="customer-info-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Email</label>
                    <div class="customer-info-value">${bookingData.email || 'guest@example.com'}</div>
                  </div>
                </div>
                
                <div class="customer-info-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Phone</label>
                    <div class="customer-info-value">${bookingData.phone || '+40 123 456 789'}</div>
                  </div>
                </div>
                
                <div class="customer-info-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Booking Channel</label>
                    <div class="customer-info-value">${bookingData.channel}</div>
                  </div>
                </div>
                
                <div class="customer-info-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Payment Status</label>
                    <div class="customer-info-value">
                      <span class="status-badge status-${bookingData.payStatus.toLowerCase().replace(/\s+/g, '-')}">${bookingData.payStatus}</span>
                    </div>
                  </div>
                </div>
                
                <div class="customer-info-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Special Requests</label>
                    <div class="customer-info-value">${bookingData.notes || 'No special requests'}</div>
                  </div>
                </div>
              </div>
            </div>



            <div class="pos-item-expanded-content">
            
              <div class="customer-info-section">
                <h4 style="margin-bottom: 15px; color: var(--text-color);">Company Information</h4>
                



                <div class="customer-info-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Company Name</label>
                    <div class="customer-info-value">My Company SRL</div>
                  </div>
                                    <div class="customer-info-field">
                    <label class="customer-form-label">VAT / CUI</label>
                    <div class="customer-info-value">RO1234567890</div>
                  </div>

                  <div class="customer-info-field">
                    <label class="customer-form-label">Address</label>
                    <div class="customer-info-value">Str. Independentei, nr. 123, Cluj-Napoca, Romania</div>
                  </div>

                  <div class="customer-info-field">
                    <label class="customer-form-label">Phone</label>
                    <div class="customer-info-value">+40 123 456 789</div>
                  </div>


                  

                </div>
                 </div>
                </div>



<div class="pos-item-expanded-content">
            
              <div class="customer-info-section">
                <h4 style="margin-bottom: 15px; color: var(--text-color);">Booking Details</h4>
                



                <div class="customer-info-row">
                  <div class="customer-info-field">
                    <label class="customer-form-label">Channel</label>
                    <div class="customer-info-value">Booking.com</div>
                  </div>
                                    <div class="customer-info-field">
                    <label class="customer-form-label">Booking ID</label>
                    <div class="customer-info-value">1234567890</div>
                  </div>

                  <div class="customer-info-field">
                    <label class="customer-form-label">Booking Date</label>
                    <div class="customer-info-value">21 mai 2025 16:30</div>
                  </div>

                  <div class="customer-info-field">
                    <label class="customer-form-label">Booking Status</label>
                    <div class="customer-info-value">Paid</div>
                  </div>


                  

                </div>
                 </div>
                </div>




<div class="settings-item" style="margin-top: 40px;">
            <label>ID or Passport</label>
            <div class="settings-image-upload">
              <i class="fas fa-camera"></i>
              <span>Take photo of ID or Passport</span>

              </div>
                            <div class="upload-image-description">
                <span> Take photo of ID or Passport without text input
</span>
            </div>
          </div>

          </div>



        </div>


        



        <!-- Order Summary Footer -->
        <div class="pos-order-footer">
          <!-- Number Pad (Hidden by default) -->
          <div class="pos-number-pad" id="pos-number-pad-active" style="display: none;">
            <div class="number-pad-grid">
              <button class="number-pad-btn" data-number="1">1</button>
              <button class="number-pad-btn" data-number="2">2</button>
              <button class="number-pad-btn" data-number="3">3</button>
              <button class="number-pad-btn" data-number="4">4</button>
              <button class="number-pad-btn" data-number="5">5</button>
              <button class="number-pad-btn" data-number="6">6</button>
              <button class="number-pad-btn" data-number="7">7</button>
              <button class="number-pad-btn" data-number="8">8</button>
              <button class="number-pad-btn" data-number="9">9</button>
              <button class="number-pad-btn" data-number=".">.</button>
              <button class="number-pad-btn" data-number="0">0</button>
              <button class="number-pad-btn number-pad-confirm" data-action="confirm">
                <i class="fas fa-check"></i>
              </button>
            </div>
          </div>
          
          <!-- Total Section -->
          <div class="pos-total-section">
            <div class="pos-total-row">
              <span class="pos-total-label">Total 3 Days</span>
              <span class="pos-total-amount">${bookingData.totalAmount || '490 lei'}</span>
            </div>
            <div class="pos-subtotal-row">
                          <span class="pos-subtotal-label">2 days • 100 lei/day • 1 day = 200 lei/day</span>
                        </div>
          </div>

          <!-- Action Buttons -->
          <div class="pos-action-buttons">
            <button class="pos-action-btn pos-checkout-btn active-booking-checkout">
              <i class="fas fa-sign-out-alt"></i>
              <span>Check Out</span>
            </button>
          </div>
          

<div class="pos-bottom-actions">
            <button class="pos-back-to-booking-btn">Back</button>
            <button class="pos-bottom-btn">Change Room</button>
            <button class="pos-bottom-btn">Change Date</button>
          </div>


          </div>
        </div>
      </div>
    `;
    
    // Attach event handlers for the active booking section
    setTimeout(() => {
      attachActiveBookingEventHandlers(section);
    }, 0);
    
    return section;
  }

  // Function to show active booking section and slide out booking order section
  function showActiveBookingSection(bookingId) {
    // Find booking data from the sample bookings
    const bookingData = findBookingById(bookingId);
    if (!bookingData) {
      console.error('Booking not found:', bookingId);
      return;
    }
    
    // Get the existing booking order section
    let bookingOrderSection = document.querySelector('.booking-pos-order-section');
    let activeBookingSection = document.querySelector('.active-booking-pos-section');
    
    // Create active booking section if it doesn't exist
    if (!activeBookingSection) {
      activeBookingSection = createActiveBookingSection(bookingData);
      const mainContent = document.querySelector('.point-of-sale-app-window .window-main-content');
      if (mainContent) {
        mainContent.appendChild(activeBookingSection);
      }
    } else {
      // Update existing section with new booking data
      updateActiveBookingSection(activeBookingSection, bookingData);
    }
    
    // Use the same sliding mechanism as the existing system
    if (bookingOrderSection && activeBookingSection) {
      slideOrderSections(bookingOrderSection, activeBookingSection);
    } else {
      console.error('Cannot slide - missing sections', { bookingOrderSection, activeBookingSection });
    }
    
    console.log('Showing active booking section for booking:', bookingId);
  }

  // Helper function to find booking by ID
  function findBookingById(bookingId) {
    // Sample booking data - in a real app this would come from a database
    const sampleBookings = [
      { id: '24765', guest: 'John Smith', roomType: 'Deluxe', roomNumber: '101', startDate: new Date(2025, 1, 20), endDate: new Date(2025, 1, 23), totalAmount: '490 lei', channel: 'Booking.com', payStatus: 'Paid', email: 'john.smith@email.com', phone: '+40 123 456 789', notes: 'Late check-in requested' },
      { id: '24766', guest: 'Maria Garcia', roomType: 'Deluxe', roomNumber: '101', startDate: new Date(2025, 1, 23), endDate: new Date(2025, 1, 26), totalAmount: '570 lei', channel: 'POS', payStatus: 'Not Paid', email: 'maria.garcia@email.com', phone: '+40 987 654 321', notes: 'Vegetarian meals' },
      { id: '232475', guest: 'David Wilson', roomType: 'Deluxe', roomNumber: '101', startDate: new Date(2025, 2, 21), endDate: new Date(2025, 2, 25), totalAmount: '680 lei', channel: 'Online', payStatus: 'Paid', email: 'david.wilson@email.com', phone: '+40 555 123 456', notes: 'Business traveler' },
      // Add more sample bookings as needed
    ];
    
    return sampleBookings.find(booking => booking.id === bookingId);
  }

  // Helper function to format date
  function formatDate(date) {
    const options = { day: '2-digit', month: 'short', year: 'numeric' };
    return date.toLocaleDateString('en-GB', options);
  }

  // Helper function to update active booking section with new data
  function updateActiveBookingSection(section, bookingData) {
    // Update header
    const headerTitle = section.querySelector('.point-of-sale-current-order-header-item h3');
    if (headerTitle) {
      headerTitle.textContent = `Booking #${bookingData.id}`;
    }
    
    // Update check-in/check-out dates
    const checkinInput = section.querySelector('.booking-order-checkin .date-input');
    const checkoutInput = section.querySelector('.booking-order-checkout .date-input');
    if (checkinInput) checkinInput.value = formatDate(bookingData.startDate);
    if (checkoutInput) checkoutInput.value = formatDate(bookingData.endDate);
    
    // Update room info
    const roomName = section.querySelector('.pos-item-name');
    const roomPrice = section.querySelector('.pos-item-price');
    if (roomName) {
      roomName.innerHTML = `${bookingData.roomType || 'Deluxe'} <div class="pos-item-rooms-no">${bookingData.roomNumber || '101'}</div>`;
    }
    if (roomPrice) {
      const days = Math.ceil((bookingData.endDate - bookingData.startDate) / (1000 * 60 * 60 * 24));
      roomPrice.textContent = `${bookingData.totalAmount || '490 lei'} (${days} days)`;
    }
    
    // Update customer information
    const customerInfoFields = [
      { selector: '.customer-info-section .customer-info-value', index: 0, value: bookingData.guest },
      { selector: '.customer-info-section .customer-info-value', index: 1, value: bookingData.email || 'guest@example.com' },
      { selector: '.customer-info-section .customer-info-value', index: 2, value: bookingData.phone || '+40 123 456 789' },
      { selector: '.customer-info-section .customer-info-value', index: 3, value: bookingData.channel },
      { selector: '.customer-info-section .customer-info-value', index: 5, value: bookingData.notes || 'No special requests' }
    ];
    
    customerInfoFields.forEach(field => {
      const elements = section.querySelectorAll(field.selector);
      if (elements[field.index]) {
        if (field.index === 4) { // Payment status with badge
          elements[field.index].innerHTML = `<span class="status-badge status-${bookingData.payStatus.toLowerCase().replace(/\s+/g, '-')}">${bookingData.payStatus}</span>`;
        } else {
          elements[field.index].textContent = field.value;
        }
      }
    });
    
    // Update total amount
    const totalAmount = section.querySelector('.pos-total-amount');
    if (totalAmount) {
      totalAmount.textContent = bookingData.totalAmount || '490 lei';
    }
  }

  // Event handlers for active booking section
  function attachActiveBookingEventHandlers(section) {
    console.log('Attaching active booking event handlers');
    
    // Check out button handler
    const checkoutBtn = section.querySelector('.active-booking-checkout');
    if (checkoutBtn) {
      checkoutBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        console.log('Check Out button clicked');
        // Add checkout logic here
        alert('Check out functionality would be implemented here');
      });
    }
    
    // Back to calendar button handler
    const backBtn = section.querySelector('.pos-back-to-booking-btn');
    if (backBtn) {
      backBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        slideBackToCalendar();
      });
    }
  }

  // Function to slide back from active booking to calendar
  function slideBackToCalendar() {
    const activeBookingSection = document.querySelector('.active-booking-pos-section');
    const bookingOrderSection = document.querySelector('.booking-pos-order-section');
    
    // Remove selected class from all booking bars when going back to calendar
    const allBookingBars = document.querySelectorAll('.booking-bar');
    allBookingBars.forEach(bar => bar.classList.remove('booking-bar-selected'));
    
    // Use the same sliding mechanism as the existing system
    if (activeBookingSection && bookingOrderSection) {
      slideOrderSections(activeBookingSection, bookingOrderSection);
    } else {
      console.error('Cannot slide back - missing sections', { activeBookingSection, bookingOrderSection });
    }
    
    console.log('Sliding back to calendar');
  }

  // Function to slide back from customer info to booking order
  function slideBackToBooking() {
    const bookingOrderSection = document.querySelector('.booking-pos-order-section .point-of-sale-current-order-content');
    const bookingToolbar = document.querySelector('.booking-pos-order-section .window-toolbar');
    const customerInfoSection = document.querySelector('.point-of-sale-customer-info-content');
    
    // Ensure both elements have proper transition properties
    if (bookingOrderSection) {
      bookingOrderSection.style.transition = 'transform 0.3s ease-in-out';
    }
    if (bookingToolbar) {
      bookingToolbar.style.transition = 'transform 0.3s ease-in-out';
    }
    
    // Start animation
    setTimeout(() => {
      // Slide customer info to right
      if (customerInfoSection) {
        customerInfoSection.style.transform = 'translateX(100%)';
      }
      
      // Slide booking order content back from left
      if (bookingOrderSection) {
        bookingOrderSection.style.transform = 'translateX(0)';
      }
      
      // Slide booking toolbar back from left as well
      if (bookingToolbar) {
        bookingToolbar.style.transform = 'translateX(0)';
      }
    }, 50);
    
    // Hide customer info section after animation completes
    setTimeout(() => {
      if (customerInfoSection) {
        customerInfoSection.style.display = 'none';
      }
    }, 350);
    
    console.log('Sliding back to booking');
  }

  function slideOrderSections(sectionOut, sectionIn) {
    if (!sectionOut || !sectionIn) {
      console.log('slideOrderSections: Missing sections', { sectionOut, sectionIn });
      return;
    }
    
    console.log('Starting slide animation:', {
      out: sectionOut.className,
      in: sectionIn.className
    });
    
    // Ensure both sections have proper transition properties
    sectionOut.style.transition = 'transform 0.3s ease-in-out';
    sectionIn.style.transition = 'transform 0.3s ease-in-out';
    
    // Step 1: Prepare incoming section (off-screen to the right, but don't show it yet)
    sectionIn.style.display = 'none';
    sectionIn.style.transform = 'translateX(100%)';
    
    // Step 2: Ensure outgoing section is visible and in position
    sectionOut.style.display = 'flex';
    sectionOut.style.transform = 'translateX(0)';
    
    // Force a reflow to ensure initial styles are applied
    sectionOut.offsetHeight;
    
    // Step 3: Slide out the current section to the right
    requestAnimationFrame(() => {
      sectionOut.style.transform = 'translateX(100%)';
      
      console.log('Sliding out section:', sectionOut.className);
      
      // Step 4: After the outgoing section is completely out, slide in the new section
      setTimeout(() => {
        // Hide the outgoing section
        sectionOut.style.display = 'none';
        
        // Reset outgoing section position for next time
        sectionOut.style.transform = 'translateX(0)';
        
        // Show the incoming section and slide it in from the right
        sectionIn.style.display = 'flex';
        
        // Force a reflow before animating
        sectionIn.offsetHeight;
        
        requestAnimationFrame(() => {
          sectionIn.style.transform = 'translateX(0)';
          console.log('Sliding in section:', sectionIn.className);
          
          // Mark animation as completed
          setTimeout(() => {
            console.log('Animation sequence completed');
          }, 300);
        });
      }, 300); // Wait for outgoing animation to complete
    });
  }

  function createBookingCalendarHTML() {
    // Generate room data
    const rooms = [
      { id: 1, name: 'Deluxe Room 101', price: 100, type: 'Deluxe', capacity: 2 },
      { id: 2, name: 'Standard Room 102', price: 80, type: 'Standard', capacity: 2 },
      { id: 3, name: 'Suite Room 201', price: 150, type: 'Suite', capacity: 4 },
      { id: 4, name: 'Deluxe Room 202', price: 120, type: 'Deluxe', capacity: 2 },
      { id: 5, name: 'Standard Room 203', price: 90, type: 'Standard', capacity: 2 },
      { id: 6, name: 'Family Room 301', price: 180, type: 'Family', capacity: 6 },
      { id: 7, name: 'Standard Room 302', price: 100, type: 'Standard', capacity: 2 },
      { id: 8, name: 'Deluxe Room 303', price: 130, type: 'Deluxe', capacity: 2 },
      { id: 9, name: 'Deluxe Room 304', price: 110, type: 'Deluxe', capacity: 2 },
      { id: 10, name: 'Deluxe Room 305', price: 110, type: 'Deluxe', capacity: 2 },
      { id: 11, name: 'Deluxe Room 306', price: 110, type: 'Family', capacity: 2 },
      { id: 12, name: 'Deluxe Room 307', price: 110, type: 'Family', capacity: 2 },
      { id: 13, name: 'Deluxe Room 308', price: 110, type: 'Standard', capacity: 2 },
      { id: 14, name: 'Deluxe Room 309', price: 110, type: 'Standard', capacity: 2 },
      { id: 15, name: 'Deluxe Room 310', price: 110, type: 'Standard', capacity: 2 },
      { id: 16, name: 'Deluxe Room 311', price: 110, type: 'Suite', capacity: 2 },
      { id: 17, name: 'Deluxe Room 312', price: 110, type: 'Suite', capacity: 2 },
      { id: 18, name: 'Deluxe Room 323', price: 110, type: 'Deluxe', capacity: 2 }

    ];

    // Generate calendar days (February - April 2025)
    const startDate = new Date(2025, 1, 19); // Feb 19, 2025
    const endDate = new Date(2025, 3, 24); // Apr 24, 2025
    const days = [];
    
    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
      days.push(new Date(d));
    }

    // Generate sample bookings with overlapping checkout/checkin scenarios
    const bookings = [
      // Room 1 - Multiple bookings with same-day checkout/checkin
      { roomId: 1, startDate: new Date(2025, 1, 20), endDate: new Date(2025, 1, 23), guest: 'John Smith', color: '#3B82F620', id: '24765', channel: '<i class="fas fa-bed"></i> Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-23' },
      { roomId: 1, startDate: new Date(2025, 1, 23), endDate: new Date(2025, 1, 26), guest: 'Maria Garcia', color: '#3B82F6', id: '24766', channel: '<i class="fas fa-cash-register"></i> POS', payStatus: 'Not Paid', checkin: '2025-01-23', checkout: '2025-01-26' },
      { roomId: 1, startDate: new Date(2025, 2, 21), endDate: new Date(2025, 2, 25), guest: 'David Wilson', color: '#3B82F6', id: '232475', channel: '<i class="fas fa-globe"></i> Online', payStatus: 'Paid', checkin: '2025-02-21', checkout: '2025-02-25' },
      
      // Room 2 - Overlapping bookings on same day
      { roomId: 2, startDate: new Date(2025, 1, 20), endDate: new Date(2025, 1, 22), guest: 'Sarah Johnson', color: '#3B82F620', id: '24755', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 2, startDate: new Date(2025, 1, 22), endDate: new Date(2025, 1, 25), guest: 'Mike Brown', color: '#3B82F6', id: '12475', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 2, startDate: new Date(2025, 1, 25), endDate: new Date(2025, 1, 28), guest: 'Lisa Davis', color: '#3B82F6', id: '12476', channel: 'POS', payStatus: 'Not Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 2, startDate: new Date(2025, 2, 20), endDate: new Date(2025, 2, 24), guest: 'Tom Anderson', color: '#3B82F6', id: '2112475', channel: 'Local', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      
      // Room 3 - Back-to-back bookings
      { roomId: 3, startDate: new Date(2025, 1, 21), endDate: new Date(2025, 1, 24), guest: 'Emma Wilson', color: '#10B98120', id: '122475', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 3, startDate: new Date(2025, 1, 24), endDate: new Date(2025, 1, 27), guest: 'James Taylor', color: '#10B981', id: '122476', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 3, startDate: new Date(2025, 2, 20), endDate: new Date(2025, 2, 22), guest: 'Anna Lee', color: '#10B981', id: '322475', channel: 'Booking.com', payStatus: 'NotPaid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 3, startDate: new Date(2025, 2, 22), endDate: new Date(2025, 2, 25), guest: 'Robert Chen', color: '#10B981', id: '322476', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      
      // Room 4 - Multiple overlapping scenarios
      { roomId: 4, startDate: new Date(2025, 1, 21), endDate: new Date(2025, 1, 23), guest: 'Sophie Martin', color: '#10B98120', id: '532475', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 4, startDate: new Date(2025, 1, 23), endDate: new Date(2025, 1, 26), guest: 'Alex Rodriguez', color: '#10B981', id: '532476', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 4, startDate: new Date(2025, 2, 19), endDate: new Date(2025, 2, 21), guest: 'Grace Kim', color: '#10B981', id: '122477', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 4, startDate: new Date(2025, 2, 21), endDate: new Date(2025, 2, 24), guest: 'Daniel Park', color: '#10B981', id: '122478', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      
      // Room 5 - Extended stays with overlaps
      { roomId: 5, startDate: new Date(2025, 1, 22), endDate: new Date(2025, 1, 25), guest: 'Oliver White', color: '#10B981', id: '432475', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 5, startDate: new Date(2025, 1, 25), endDate: new Date(2025, 1, 29), guest: 'Mia Thompson', color: '#10B98130', id: '432476', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 5, startDate: new Date(2025, 2, 20), endDate: new Date(2025, 2, 22), guest: 'Lucas Green', color: '#10B981', id: '542475', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 5, startDate: new Date(2025, 2, 22), endDate: new Date(2025, 2, 26), guest: 'Zoe Adams', color: '#10B981', id: '542476', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      
      // Room 6 - Family room with longer stays
      { roomId: 6, startDate: new Date(2025, 1, 22), endDate: new Date(2025, 1, 26), guest: 'Johnson Family', color: '#ff9500', id: '622475', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 6, startDate: new Date(2025, 1, 26), endDate: new Date(2025, 1, 30), guest: 'Williams Family', color: '#ff950030', id: '622476', channel: 'Booking.com', payStatus: 'NotPaid', checkin: '2025-01-20', checkout: '2025-01-22' },
      
      // Room 7 - Quick turnovers
      { roomId: 7, startDate: new Date(2025, 1, 20), endDate: new Date(2025, 1, 21), guest: 'Chris Evans', color: '#ff950020', id: '722475', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 7, startDate: new Date(2025, 1, 21), endDate: new Date(2025, 1, 23), guest: 'Natalie Stone', color: '#ff950020', id: '722476', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 7, startDate: new Date(2025, 1, 23), endDate: new Date(2025, 1, 25), guest: 'Ryan Cooper', color: '#ff9500', id: '722477', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      
      // Room 8 - Mixed scenarios
      { roomId: 8, startDate: new Date(2025, 1, 19), endDate: new Date(2025, 1, 22), guest: 'Isabella Cruz', color: '#ff950020', id: '822475', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 8, startDate: new Date(2025, 1, 22), endDate: new Date(2025, 1, 24), guest: 'Ethan Moore', color: '#ff950020', id: '822476', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 8, startDate: new Date(2025, 2, 20), endDate: new Date(2025, 2, 23), guest: 'Ava Miller', color: '#ff9500', id: '822477', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },

      // Room 9 - Mixed scenarios
      { roomId: 9, startDate: new Date(2025, 1, 23), endDate: new Date(2025, 1, 28), guest: 'Isabella Cruz', color: '#ff9500', id: '822478', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 9, startDate: new Date(2025, 1, 16), endDate: new Date(2025, 1, 20), guest: 'Ethan Moore', color: '#ff9500', id: '822479', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' },
      { roomId: 9, startDate: new Date(2025, 2, 20), endDate: new Date(2025, 2, 23), guest: 'Ava Miller', color: '#ff9500', id: '822480', channel: 'Booking.com', payStatus: 'Paid', checkin: '2025-01-20', checkout: '2025-01-22' }
    ];

    let html = `
      <div class="booking-calendar-container">
        <div class="booking-rooms-sidebar">
          <div class="rooms-header">
            <h3>Rooms no. / Type / Free</h3>
            <span class="rooms-count">${rooms.length}</span>
          </div>
          <div class="rooms-list">
    `;

    // Generate room items in sidebar
    rooms.forEach((room, index) => {
      html += `
        <div class="room-item ${index === 0 ? 'selected' : ''}" data-room-id="${room.id}">
          <div class="room-info">
            <div class="room-name-price">   
              <div class="room-name">${room.name}</div>
              <div class="room-price">${room.price} lei</div>
            </div>
            <div class="room-details">
              <span class="room-type">${room.type}</span>
              <span class="room-capacity"><i class="fas fa-user"></i> ${room.capacity}</span>
            </div>
          </div>
        </div>
      `;
    });

   
    html += `
            </div>
          </div>
          <div class="calendar-scroll-area">
            <div class="calendar-header">
              <div class="days-row">
    `;

    // Generate all days header in a single row
    days.forEach(day => {
      const dayNames = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
      const isToday = day.toDateString() === new Date(2025, 1, 25).toDateString();
      
      html += `
        <div class="day-header ${isToday ? 'today' : ''}">
          <div class="day-name">${dayNames[day.getDay()]}</div>
          <div class="day-number">${day.getDate()}</div>
        </div>
      `;
    });

    html += `
              </div>
            </div>
            <div class="calendar-body">
    `;

    // Generate room rows with bookings
    rooms.forEach(room => {
      html += `<div class="room-row" data-room-id="${room.id}" style="position: relative;">`;
      
      // First pass: create empty cells
      days.forEach(day => {
        const dayKey = day.toISOString().split('T')[0];
        const isToday = day.toDateString() === new Date(2025, 1, 25).toDateString();
        const todayClass = isToday ? ' today-column' : '';
        html += `<div class="calendar-cell${todayClass}" data-date="${dayKey}"></div>`;
      });
      
            // Second pass: add booking bars that span multiple days
      const roomBookings = bookings.filter(b => b.roomId === room.id);
      
      // Track vertical positions to handle overlapping bookings on same day
      let bookingLevel = 0;
      
      roomBookings.forEach(booking => {
        const startIndex = days.findIndex(day => day.toDateString() === booking.startDate.toDateString());
        const endIndex = days.findIndex(day => day.toDateString() === booking.endDate.toDateString());
        
        if (startIndex !== -1 && endIndex !== -1) {
          const duration = endIndex - startIndex + 1;
          const leftPosition = (startIndex * 80) + 40 + 5; // Start from center of start day + 5px margin
          const width = ((duration - 1) * 80) - 10; // Distance between centers minus 10px total margin (5px each side)
          
          // Calculate vertical position - alternate between top and bottom half with 10px gap
          const barHeight = 25; // Height of each booking bar
          const gap = 10; // Gap between booking bars
          let topPosition;
          
          if (bookingLevel === 0) {
            // First booking - position in upper half
            topPosition = 10;
          } else {
            // Second booking - position in lower half with gap
            topPosition = 10 + barHeight + gap;
          }
          
          // Toggle between levels for next booking
          bookingLevel = (bookingLevel + 1) % 2;
          
          // Determine checkout status based on today's date
          const today = new Date(2025, 1, 25); // February 25, 2025
          const todayDateString = today.toDateString();
          const endDateString = booking.endDate.toDateString();
          
          let checkoutStatusClass = '';
          if (booking.endDate < today) {
            // Booking ended before today - fully checked out
            checkoutStatusClass = ' checked-out-booking';
          } else if (endDateString === todayDateString) {
            // Booking ends today - checking out today
            checkoutStatusClass = ' checked-out-today-booking';
          }
          
          html += `
            <div class="booking-bar booking-pay-status-${booking.payStatus} booking-id-${booking.id}${checkoutStatusClass}" style="
              position: absolute;
              left: ${leftPosition}px;
              width: ${width}px;
              top: 50%;
              transform: translateY(-50%);
              height: 80%;
              background-color: ${booking.color};
              border-radius: 8px;
              padding: 4px 8px;
              display: flex;
              flex-direction: column;
              justify-content: center;
              gap: 2px;
              color: white;
              font-size: 11px;
              overflow: hidden;
              box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
              z-index: ${10 + bookingLevel};
              cursor: pointer;
            " data-booking-id="${booking.id}">
            <div class="booking-bar-content-name-id">
              <span class="booking-id">#${booking.id}</span>
              <span class="booking-guest">${booking.guest}</span>

            </div>
            <div class="booking-bar-content-duration">
              <span class="booking-duration">${Math.ceil((booking.endDate - booking.startDate) / (1000 * 60 * 60 * 24))} days - ${booking.endDate.toLocaleDateString('en-GB', {day: '2-digit', month: '2-digit'})}</span>
                          <span class="booking-channel">${booking.channel}</span>
              </div>
            </div>
          `;
        }
      });
      
      html += `</div>`;
    });

    html += `
            </div>
          </div>
        </div>
      </div>
    `;

    return html;
  }

  function attachBookingEventHandlers(section) {
    // View mode buttons
    const viewModeButtons = section.querySelectorAll('.view-mode-btn');
    viewModeButtons.forEach(btn => {
      btn.addEventListener('click', function() {
        viewModeButtons.forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        // Handle view mode change
        const months = this.getAttribute('data-months');
        console.log('View mode changed to:', months, 'months');
      });
    });

    // Period navigation and scroll tracking
    const calendarScrollArea = section.querySelector('.calendar-scroll-area');
    const currentPeriodSpan = section.querySelector('.current-period');
    const prevBtn = section.querySelector('#prev-period');
    const nextBtn = section.querySelector('#next-period');
    
    // Track current month positions for scroll detection
    let monthPositions = [];
    let currentMonth = 'February 2025'; // Initial month
    
    // Function to calculate month positions based on day headers
    function calculateMonthPositions() {
      const dayHeaders = section.querySelectorAll('.day-header');
      monthPositions = [];
      let currentMonthName = '';
      let monthStartIndex = 0;
      
      dayHeaders.forEach((header, index) => {
        // Calculate the actual date for this header based on the start date
        const headerDate = new Date(2025, 1, 19); // Start date: Feb 19, 2025
        headerDate.setDate(headerDate.getDate() + index);
        
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                          'July', 'August', 'September', 'October', 'November', 'December'];
        const monthName = `${monthNames[headerDate.getMonth()]} ${headerDate.getFullYear()}`;
        
        // Check if this is the first header or if the month has changed
        if (index === 0 || monthName !== currentMonthName) {
          // Save the previous month if it exists
          if (currentMonthName && monthStartIndex < index) {
            monthPositions.push({
              name: currentMonthName,
              startIndex: monthStartIndex,
              endIndex: index - 1,
              startPosition: monthStartIndex * 80, // 80px per day
              endPosition: (index - 1) * 80 + 80
            });
          }
          
          // Start tracking the new month
          currentMonthName = monthName;
          monthStartIndex = index;
        }
      });
      
      // Add the last month
      if (currentMonthName && monthStartIndex < dayHeaders.length) {
        monthPositions.push({
          name: currentMonthName,
          startIndex: monthStartIndex,
          endIndex: dayHeaders.length - 1,
          startPosition: monthStartIndex * 80,
          endPosition: (dayHeaders.length - 1) * 80 + 80
        });
      }
      
      console.log('Month positions calculated:', monthPositions);
    }
    
    // Function to update current period based on scroll position
    function updateCurrentPeriod(scrollLeft) {
      const scrollAreaWidth = calendarScrollArea.clientWidth;
      const middlePosition = scrollLeft + (scrollAreaWidth / 2);
      
      // Find which month the middle of the viewport is in
      for (let i = 0; i < monthPositions.length; i++) {
        const month = monthPositions[i];
        if (middlePosition >= month.startPosition && middlePosition <= month.endPosition) {
          if (currentMonth !== month.name) {
            currentMonth = month.name;
            currentPeriodSpan.textContent = currentMonth;
            console.log('Current period updated to:', currentMonth);
          }
          break;
        }
      }
    }
    
    // Function to scroll to a specific month
    function scrollToMonth(monthName) {
      const month = monthPositions.find(m => m.name === monthName);
      if (month) {
        const targetPosition = month.startPosition;
        calendarScrollArea.scrollTo({
          left: targetPosition,
          behavior: 'smooth'
        });
        console.log('Scrolling to month:', monthName, 'at position:', targetPosition);
      }
    }
    
    // Function to get next/previous month
    function getNextMonth(currentMonthName) {
      const currentIndex = monthPositions.findIndex(m => m.name === currentMonthName);
      if (currentIndex !== -1 && currentIndex < monthPositions.length - 1) {
        return monthPositions[currentIndex + 1].name;
      }
      return null;
    }
    
    function getPreviousMonth(currentMonthName) {
      const currentIndex = monthPositions.findIndex(m => m.name === currentMonthName);
      if (currentIndex > 0) {
        return monthPositions[currentIndex - 1].name;
      }
      return null;
    }
    
    // Initialize month positions after a short delay to ensure DOM is ready
    setTimeout(() => {
      calculateMonthPositions();
      // Set initial period based on current scroll position
      if (calendarScrollArea) {
        updateCurrentPeriod(calendarScrollArea.scrollLeft);
      }
    }, 100);
    
    // Scroll event listener for period tracking and vertical sync
    const roomsList = section.querySelector('.rooms-list');
    let isScrollingSyncing = false;
    
    if (calendarScrollArea) {
      calendarScrollArea.addEventListener('scroll', function() {
        updateCurrentPeriod(this.scrollLeft);
        
        // Synchronize vertical scrolling with rooms list
        if (roomsList && !isScrollingSyncing) {
          isScrollingSyncing = true;
          roomsList.scrollTop = this.scrollTop;
          setTimeout(() => { isScrollingSyncing = false; }, 10);
        }
      });
    }
    
    // Add scroll synchronization from rooms list to calendar
    if (roomsList) {
      roomsList.addEventListener('scroll', function() {
        if (calendarScrollArea && !isScrollingSyncing) {
          isScrollingSyncing = true;
          calendarScrollArea.scrollTop = this.scrollTop;
          setTimeout(() => { isScrollingSyncing = false; }, 10);
        }
      });
    }
    
    // Period navigation buttons
    if (prevBtn) {
      prevBtn.addEventListener('click', function() {
        const prevMonth = getPreviousMonth(currentMonth);
        if (prevMonth) {
          scrollToMonth(prevMonth);
        }
        console.log('Previous period clicked, target:', prevMonth);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', function() {
        const nextMonth = getNextMonth(currentMonth);
        if (nextMonth) {
          scrollToMonth(nextMonth);
        }
        console.log('Next period clicked, target:', nextMonth);
      });
    }

    // Room sidebar items
    const roomItems = section.querySelectorAll('.room-item');
    roomItems.forEach(item => {
      item.addEventListener('click', function() {
        // Remove selected class from all room items
        roomItems.forEach(i => i.classList.remove('selected'));
        this.classList.add('selected');
        const roomId = this.getAttribute('data-room-id');
        
        // Also select corresponding room label in calendar (if exists)
        const roomLabels = section.querySelectorAll('.calendar-room-label');
        roomLabels.forEach(l => l.classList.remove('selected'));
        const correspondingLabel = section.querySelector(`.calendar-room-label[data-room-id="${roomId}"]`);
        if (correspondingLabel) {
          correspondingLabel.classList.add('selected');
        }
        
        // Highlight the corresponding room row - search in entire document to ensure we find it
        const allRoomRows = document.querySelectorAll('.room-row');
        allRoomRows.forEach(r => r.classList.remove('selected'));
        const correspondingRow = document.querySelector(`.room-row[data-room-id="${roomId}"]`);
        if (correspondingRow) {
          correspondingRow.classList.add('selected');
          console.log('Room row highlighted for room:', roomId);
        } else {
          console.log('Room row not found for room:', roomId);
        }
        
        console.log('Room selected:', roomId);
      });
    });

    // Calendar cell clicks
    const calendarCells = section.querySelectorAll('.calendar-cell');
    calendarCells.forEach(cell => {
      cell.addEventListener('click', function() {
        const date = this.getAttribute('data-date');
        console.log('Calendar cell clicked:', date);
      });
    });

    // Room label clicks (if they exist)
    const roomLabels = section.querySelectorAll('.calendar-room-label');
    roomLabels.forEach(label => {
      label.addEventListener('click', function() {
        roomLabels.forEach(r => r.classList.remove('selected'));
        this.classList.add('selected');
        const roomId = this.getAttribute('data-room-id');
        
        // Also select corresponding room item in sidebar
        const roomItems = section.querySelectorAll('.room-item');
        roomItems.forEach(i => i.classList.remove('selected'));
        const correspondingItem = section.querySelector(`.room-item[data-room-id="${roomId}"]`);
        if (correspondingItem) {
          correspondingItem.classList.add('selected');
        }
        
        // Highlight the corresponding room row - search in entire document
        const allRoomRows = document.querySelectorAll('.room-row');
        allRoomRows.forEach(r => r.classList.remove('selected'));
        const correspondingRow = document.querySelector(`.room-row[data-room-id="${roomId}"]`);
        if (correspondingRow) {
          correspondingRow.classList.add('selected');
          console.log('Room row highlighted for room:', roomId);
        }
        
        console.log('Room selected:', roomId);
      });
    });

    // Booking bar clicks
    const bookingBars = section.querySelectorAll('.booking-bar');
    bookingBars.forEach(bar => {
      bar.addEventListener('click', function(e) {
        e.stopPropagation();
        const bookingId = this.getAttribute('data-booking-id');
        console.log('Booking clicked:', bookingId);
        
        // Check if this booking is already displayed in the active booking section
        const activeBookingSection = document.querySelector('.active-booking-pos-section');
        if (activeBookingSection && activeBookingSection.style.display !== 'none') {
          // Get the currently displayed booking ID from the active section
          const currentBookingTitle = activeBookingSection.querySelector('.point-of-sale-current-order-header-item h3');
          if (currentBookingTitle) {
            const currentBookingId = currentBookingTitle.textContent.replace('Booking #', '');
            if (currentBookingId === bookingId) {
              console.log('Same booking already displayed, ignoring click');
              return; // Don't trigger the effect if it's the same booking
            }
          }
        }
        
        // Remove selected class from all booking bars
        const allBookingBars = document.querySelectorAll('.booking-bar');
        allBookingBars.forEach(b => b.classList.remove('booking-bar-selected'));
        
        // Add selected class to clicked booking bar
        this.classList.add('booking-bar-selected');
        
        // Show active booking section using the same mechanism as "add booking"
        showActiveBookingSection(bookingId);
      });
    });

    // Prevent quantity containers from triggering order item expansion
    const quantityContainers = section.querySelectorAll('.booking-order-items-container .pos-item-quantity, .booking-order-items-container .pos-item-quantity-controls');
    quantityContainers.forEach(container => {
      container.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    });

    // Quantity button handlers for booking order items
    const quantityButtons = section.querySelectorAll('.booking-order-items-container .qty-btn');
    quantityButtons.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.stopPropagation();
        
        const qtyValueSpan = this.parentElement.querySelector('.qty-value');
        const currentQty = parseInt(qtyValueSpan.textContent);
        const isIncrease = this.classList.contains('qty-increase');
        const isMainQuantity = this.closest('.pos-item-main-row') !== null;
        
        // Only handle main quantity changes (not sub-controls like room number, adults, children)
        if (isMainQuantity) {
          let newQty = currentQty;
          
          if (isIncrease) {
            newQty = Math.min(currentQty + 1, 10); // Max 10 rooms
          } else {
            newQty = Math.max(currentQty - 1, 1); // Min 1 room
          }
          
          qtyValueSpan.textContent = newQty;
          
          // Update expanded content sections based on new quantity
          const orderItem = this.closest('.pos-order-item');
          updateBookingExpandedContent(orderItem, newQty);
        } else {
          // Handle sub-control quantity changes normally
          let newQty = currentQty;
          
          if (isIncrease) {
            newQty = currentQty + 1;
          } else {
            newQty = Math.max(currentQty - 1, 0);
          }
          
          qtyValueSpan.textContent = newQty;
        }
      });
    });

    // Also prevent action buttons from triggering expansion
    const actionButtons = section.querySelectorAll('.booking-order-items-container .pos-item-action-btn');
    actionButtons.forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.stopPropagation();
        console.log('Action button clicked:', this.textContent);
      });
    });

    // Add proper event delegation for order item expansion/collapse
    const orderItems = section.querySelectorAll('.booking-order-items-container .pos-order-item');
    orderItems.forEach(item => {
      item.addEventListener('click', function(e) {
        // Only block expansion if clicking directly on quantity buttons or action buttons
        if (
          e.target.classList.contains('qty-btn') ||
          e.target.closest('.qty-btn') ||
          e.target.classList.contains('pos-item-action-btn') ||
          e.target.closest('.pos-item-action-btn')
        ) {
          return; // Don't toggle if clicking on buttons
        }
        
        // Close all other expanded items first
        const allItems = section.querySelectorAll('.booking-order-items-container .pos-order-item');
        allItems.forEach(otherItem => {
          if (otherItem !== this && otherItem.classList.contains('expanded')) {
            otherItem.classList.remove('expanded');
          }
        });
        
        // Toggle the clicked item
        this.classList.toggle('expanded');
        console.log('Order item toggled:', this.classList.contains('expanded') ? 'expanded' : 'collapsed');
      });
    });
  }

  // Function to update booking expanded content based on quantity
  function updateBookingExpandedContent(orderItem, quantity) {
    const originalExpandedContent = orderItem.querySelector('.pos-item-expanded-content');
    if (!originalExpandedContent) return;

    // Clear existing duplicated containers (keep only the original)
    const existingDuplicates = orderItem.querySelectorAll('.pos-item-expanded-content-duplicate');
    existingDuplicates.forEach(duplicate => {
      duplicate.remove();
    });

    // Generate exact duplicates of the entire expanded content container for quantities > 1
    for (let i = 2; i <= quantity; i++) {
      const duplicateExpandedContent = originalExpandedContent.cloneNode(true);
      
      // Add class to identify as duplicate (for removal purposes only)
      duplicateExpandedContent.classList.add('pos-item-expanded-content-duplicate');
      
      // Insert after the original expanded content
      originalExpandedContent.parentNode.insertBefore(duplicateExpandedContent, originalExpandedContent.nextSibling);
    }

    // Re-attach event handlers to all quantity controls (original + all duplicates)
    const allExpandedContents = orderItem.querySelectorAll('.pos-item-expanded-content, .pos-item-expanded-content-duplicate');
    allExpandedContents.forEach(container => {
      const allQuantityButtons = container.querySelectorAll('.qty-btn');
      allQuantityButtons.forEach(btn => {
        // Remove any existing listeners to avoid duplicates
        btn.replaceWith(btn.cloneNode(true));
      });
      
      // Re-attach fresh event handlers
      const freshQuantityButtons = container.querySelectorAll('.qty-btn');
      freshQuantityButtons.forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          
          const qtyValueSpan = this.parentElement.querySelector('.qty-value');
          const currentQty = parseInt(qtyValueSpan.textContent);
          const isIncrease = this.classList.contains('qty-increase');
          
          // Handle sub-control quantity changes (these are never main quantity)
          let newQty = currentQty;
          
          if (isIncrease) {
            newQty = currentQty + 1;
          } else {
            newQty = Math.max(currentQty - 1, 0);
          }
          
          qtyValueSpan.textContent = newQty;
          console.log('Sub-control quantity changed:', newQty);
        });
      });

      // Re-attach event handlers to quantity containers
      const quantityContainers = container.querySelectorAll('.pos-item-quantity-controls');
      quantityContainers.forEach(qtyContainer => {
        qtyContainer.addEventListener('click', function(e) {
          e.stopPropagation();
        });
      });
    });

    console.log(`Updated booking item to ${quantity} complete expanded content container(s)`);
  }

  // Initialize with products view
  showProductsSection();
}

//Contacts App Content
function setupContactsApp(windowElement) {
  // Sidebar: do NOT set content here. Sidebar content is defined in index.html template using the generic sidebar structure.
  // Only update dynamic values (like unread counts, user name, etc.) here if needed.

  // --- Ensure sidebar toggle and overlay exist (for consistent sidebar behavior) ---
  ensureSidebarElements(windowElement);

  if (typeof window.updateSidebarForWindow === 'function') {
    window.updateSidebarForWindow(windowElement);
  }
  if (typeof attachSidebarResizeObserver === 'function') {
    attachSidebarResizeObserver(windowElement);
  }

  // Setup toolbar buttons
  const toolbarButtons = windowElement.querySelectorAll('.window-toolbar .toolbar-button');
  toolbarButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Add ripple effect
      const ripple = document.createElement('span');
      ripple.classList.add('ripple');
      button.appendChild(ripple);
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
  });

  // Single source of contact data with all fields
  const contacts = [
    {
      id: 1,
      name: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-user',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      position: 'Software Developer',
      notes: 'Main project contact',
      favorite: true,
      letter: 'A',
      icon: 'fa-user',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastOrder: '12:40 AM',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Constanta',
      country: 'Romania',
      ordersNo: 7,
      totalSpent: '$ 220.2',
      online: true
    },
    {
      id: 2,
      name: 'Alexandru Morgan',
      firstName: 'Alexandru',
      lastName: 'Ionut',
      avatar: 'fa-user',
      email: 'alex@example.com',
      phone: '0732 425 448',
      company: 'Sports Analytics',
      position: 'Data Scientist',
      notes: 'Met at the conference',
      favorite: false,
      letter: 'A',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '16:30 PM',
      lastOrder: 'In progress...',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Cluj',
      country: 'Austria',
      ordersNo: 2,
      totalSpent: '$ 74',
      online: true
    },
    {
      id: 3,
      name: 'Vasile Johnson',
      firstName: 'Vasile',
      lastName: 'Gogu',
      avatar: 'fa-user',
      email: 'vasile@example.com',
      phone: '0732 425 448',
      company: 'Music Productions',
      position: 'Sound Engineer',
      notes: 'Referred by Sam',
      favorite: true,
      letter: 'V',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '16 April',
      lastOrder: '16 April',
      lastVisit: '16 April',
      city: 'Ramnicu-Valcea',
      country: 'Belgia',
      ordersNo: 1,
      totalSpent: '$ 12.75',
      online: false
    },
    {
      id: 4,
      name: 'Gina Parker',
      firstName: 'Gina',
      lastName: 'Alina',
      avatar: 'fa-user',
      email: 'gina@example.com',
      phone: '0732 425 448',
      company: 'Design Studio',
      position: 'UX Designer',
      notes: 'Works remotely',
      favorite: false,
      letter: 'G',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '23 May',
      lastOrder: '23 May',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Cluj',
      country: 'Bulgaria',
      ordersNo: 14,
      totalSpent: '$ 1475.5',
      online: true
    },
    {
      id: 5,
      name: 'Gigica Miller',
      firstName: 'Gigica',
      lastName: 'Popescu',
      avatar: 'fa-user',
      email: 'gigica@example.com',
      phone: '0732 425 448',
      company: 'Construction Co.',
      position: 'Project Manager',
      notes: 'New client',
      favorite: false,
      letter: 'G',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '25 August',
      lastOrder: 'In progress...',
      lastVisit: '25 August',
      city: 'Constanta',
      country: 'Romania',
      ordersNo: 2,
      totalSpent: '$ 77',
      online: false
    },
    {
      id: 6,
      name: 'Alina Wilson',
      firstName: 'Alina',
      lastName: 'Eminescu',
      avatar: 'fa-user',
      email: 'alina@example.com',
      phone: '0732 425 448',
      company: 'Healthcare Services',
      position: 'Medical Researcher',
      notes: 'Conference speaker',
      favorite: true,
      letter: 'A',
      icon: 'fa-user',
      color: '#F6AD55',
      creationDate: '13 December',
      lastOrder: '13 December',
      lastVisit: '13 December',
      city: 'Bucuresti',
      country: 'Romania',
      ordersNo: 1,
      totalSpent: '$ 18',
      online: false
    },
    {
      id: 7,
      name: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-user',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      position: 'Software Developer',
      notes: 'Main project contact',
      favorite: true,
      letter: 'A',
      icon: 'fa-user',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastOrder: '12:40 AM',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Constanta',
      country: 'Romania',
      ordersNo: 7,
      totalSpent: '$ 220.2',
      online: true
    },
    {
      id: 8,
      name: 'Alexandru Morgan',
      firstName: 'Alexandru',
      lastName: 'Ionut',
      avatar: 'fa-user',
      email: 'alex@example.com',
      phone: '0732 425 448',
      company: 'Sports Analytics',
      position: 'Data Scientist',
      notes: 'Met at the conference',
      favorite: false,
      letter: 'A',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '16:30 PM',
      lastOrder: 'In progress...',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Cluj',
      country: 'Austria',
      ordersNo: 2,
      totalSpent: '$ 74',
      online: true
    },
    {
      id: 9,
      name: 'Casile Johnson',
      firstName: 'Casile',
      lastName: 'Gogu',
      avatar: 'fa-user',
      email: 'vasile@example.com',
      phone: '0732 425 448',
      company: 'Music Productions',
      position: 'Sound Engineer',
      notes: 'Referred by Sam',
      favorite: true,
      letter: 'V',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '16 April',
      lastOrder: '16 April',
      lastVisit: '16 April',
      city: 'Ramnicu-Valcea',
      country: 'Belgia',
      ordersNo: 1,
      totalSpent: '$ 12.75',
      online: false
    },
    {
      id: 10,
      name: 'Bina Parker',
      firstName: 'Bina',
      lastName: 'Alina',
      avatar: 'fa-user',
      email: 'gina@example.com',
      phone: '0732 425 448',
      company: 'Design Studio',
      position: 'UX Designer',
      notes: 'Works remotely',
      favorite: false,
      letter: 'G',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '23 May',
      lastOrder: '23 May',
      lastVisit: '23 May',
      city: 'Cluj',
      country: 'Bulgaria',
      ordersNo: 14,
      totalSpent: '$ 1475.5',
      online: true
    },
    {
      id: 11,
      name: 'Gigica Miller',
      firstName: 'Gigica',
      lastName: 'Popescu',
      avatar: 'fa-user',
      email: 'gigica@example.com',
      phone: '0732 425 448',
      company: 'Construction Co.',
      position: 'Project Manager',
      notes: 'New client',
      favorite: false,
      letter: 'G',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '25 August',
      lastOrder: 'In progress...',
      lastVisit: '25 August',
      city: 'Constanta',
      country: 'Romania',
      ordersNo: 2,
      totalSpent: '$ 77',
      online: false
    },
    {
      id: 12,
      name: 'Alina Wilson',
      firstName: 'Alina',
      lastName: 'Eminescu',
      avatar: 'fa-user',
      email: 'alina@example.com',
      phone: '0732 425 448',
      company: 'Healthcare Services',
      position: 'Medical Researcher',
      notes: 'Conference speaker',
      favorite: true,
      letter: 'A',
      icon: 'fa-user',
      color: '#F6AD55',
      creationDate: '13 December',
      lastOrder: '13 December',
      lastVisit: '13 December',
      city: 'Bucuresti',
      country: 'Romania',
      ordersNo: 1,
      totalSpent: '$ 18',
      online: false
    },
    {
      id: 13,
      name: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-user',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      position: 'Software Developer',
      notes: 'Main project contact',
      favorite: true,
      letter: 'A',
      icon: 'fa-user',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastOrder: '12:40 AM',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Constanta',
      country: 'Romania',
      ordersNo: 7,
      totalSpent: '$ 220.2',
      online: true
    },
    {
      id: 14,
      name: 'Alexandru Morgan',
      firstName: 'Alexandru',
      lastName: 'Ionut',
      avatar: 'fa-user',
      email: 'alex@example.com',
      phone: '0732 425 448',
      company: 'Sports Analytics',
      position: 'Data Scientist',
      notes: 'Met at the conference',
      favorite: false,
      letter: 'A',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '16:30 PM',
      lastOrder: 'In progress...',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Cluj',
      country: 'Austria',
      ordersNo: 2,
      totalSpent: '$ 74',
      online: true
    },
    {
      id: 15,
      name: 'Vasile Johnson',
      firstName: 'Vasile',
      lastName: 'Gogu',
      avatar: 'fa-user',
      email: 'vasile@example.com',
      phone: '0732 425 448',
      company: 'Music Productions',
      position: 'Sound Engineer',
      notes: 'Referred by Sam',
      favorite: true,
      letter: 'V',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '16 April',
      lastOrder: '16 April',
      lastVisit: '16 April',
      city: 'Ramnicu-Valcea',
      country: 'Belgia',
      ordersNo: 1,
      totalSpent: '$ 12.75',
      online: false
    },
    {
      id: 16,
      name: 'Gina Parker',
      firstName: 'Gina',
      lastName: 'Alina',
      avatar: 'fa-user',
      email: 'gina@example.com',
      phone: '0732 425 448',
      company: 'Design Studio',
      position: 'UX Designer',
      notes: 'Works remotely',
      favorite: false,
      letter: 'G',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '23 May',
      lastOrder: '23 May',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Cluj',
      country: 'Bulgaria',
      ordersNo: 14,
      totalSpent: '$ 1475.5',
      online: true
    },
    {
      id: 17,
      name: 'Gigica Miller',
      firstName: 'Gigica',
      lastName: 'Popescu',
      avatar: 'fa-user',
      email: 'gigica@example.com',
      phone: '0732 425 448',
      company: 'Construction Co.',
      position: 'Project Manager',
      notes: 'New client',
      favorite: false,
      letter: 'G',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '25 August',
      lastOrder: 'In progress...',
      lastVisit: '25 August',
      city: 'Constanta',
      country: 'Romania',
      ordersNo: 2,
      totalSpent: '$ 77',
      online: false
    },
    {
      id: 18,
      name: 'Alina Wilson',
      firstName: 'Alina',
      lastName: 'Eminescu',
      avatar: 'fa-user',
      email: 'alina@example.com',
      phone: '0732 425 448',
      company: 'Healthcare Services',
      position: 'Medical Researcher',
      notes: 'Conference speaker',
      favorite: true,
      letter: 'A',
      icon: 'fa-user',
      color: '#F6AD55',
      creationDate: '13 December',
      lastOrder: '13 December',
      lastVisit: '13 December',
      city: 'Bucuresti',
      country: 'Romania',
      ordersNo: 1,
      totalSpent: '$ 18',
      online: false
    },
    {
      id: 19,
      name: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-user',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      position: 'Software Developer',
      notes: 'Main project contact',
      favorite: true,
      letter: 'A',
      icon: 'fa-user',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastOrder: '12:40 AM',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Constanta',
      country: 'Romania',
      ordersNo: 7,
      totalSpent: '$ 220.2',
      online: true
    },
    {
      id: 20,
      name: 'Alexandru Morgan',
      firstName: 'Alexandru',
      lastName: 'Ionut',
      avatar: 'fa-user',
      email: 'alex@example.com',
      phone: '0732 425 448',
      company: 'Sports Analytics',
      position: 'Data Scientist',
      notes: 'Met at the conference',
      favorite: false,
      letter: 'A',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '16:30 PM',
      lastOrder: 'In progress...',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Cluj',
      country: 'Austria',
      ordersNo: 2,
      totalSpent: '$ 74',
      online: true
    },
    {
      id: 21,
      name: 'Vasile Johnson',
      firstName: 'Vasile',
      lastName: 'Gogu',
      avatar: 'fa-user',
      email: 'vasile@example.com',
      phone: '0732 425 448',
      company: 'Music Productions',
      position: 'Sound Engineer',
      notes: 'Referred by Sam',
      favorite: true,
      letter: 'V',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '16 April',
      lastOrder: '16 April',
      lastVisit: '16 April',
      city: 'Ramnicu-Valcea',
      country: 'Belgia',
      ordersNo: 1,
      totalSpent: '$ 12.75',
      online: false
    },
    {
      id: 22,
      name: 'Gina Parker',
      firstName: 'Gina',
      lastName: 'Alina',
      avatar: 'fa-user',
      email: 'gina@example.com',
      phone: '0732 425 448',
      company: 'Design Studio',
      position: 'UX Designer',
      notes: 'Works remotely',
      favorite: false,
      letter: 'G',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '23 May',
      lastOrder: '23 May',
      lastVisit: '<i class="fas fa-circle" style="color: #10B981; font-size: 10px; margin-right: 5px;"></i> Online now',
      city: 'Cluj',
      country: 'Bulgaria',
      ordersNo: 14,
      totalSpent: '$ 1475.5',
      online: true
    },
    {
      id: 23,
      name: 'Gigica Miller',
      firstName: 'Gigica',
      lastName: 'Popescu',
      avatar: 'fa-user',
      email: 'gigica@example.com',
      phone: '0732 425 448',
      company: 'Construction Co.',
      position: 'Project Manager',
      notes: 'New client',
      favorite: false,
      letter: 'G',
      icon: 'fa-user',
      color: '#4FD1C5',
      creationDate: '25 August',
      lastOrder: 'In progress...',
      lastVisit: '25 August',
      city: 'Constanta',
      country: 'Romania',
      ordersNo: 2,
      totalSpent: '$ 77',
      online: false
    },
    {
      id: 24,
      name: 'Blanca Wilson',
      firstName: 'Blanca',
      lastName: 'Eminescu',
      avatar: 'fa-user',
      email: 'alina@example.com',
      phone: '0732 425 448',
      company: 'Healthcare Services',
      position: 'Medical Researcher',
      notes: 'Conference speaker',
      favorite: true,
      letter: 'A',
      icon: 'fa-user',
      color: '#F6AD55',
      creationDate: '13 December',
      lastOrder: '13 December',
      lastVisit: '13 December',
      city: 'Bucuresti',
      country: 'Romania',
      ordersNo: 1,
      totalSpent: '$ 18',
      online: false
    }
  ];

  // Group contacts by letter
  const groupedContacts = contacts.reduce((acc, contact) => {
    if (!acc[contact.letter]) acc[contact.letter] = [];
    acc[contact.letter].push(contact);
    return acc;
  }, {});

  const contactListSection = windowElement.querySelector('.contact-list-section');
  const contactList = windowElement.querySelector('.contact-list');
  const contactContentSection = windowElement.querySelector('.contact-content-section');
  const contactContent = windowElement.querySelector('.contact-content-section .contact-content');
  const windowMainContent = windowElement.querySelector('.contact-app-window');

  // Initialize desktop layout (contact list takes full width, content section hidden)
  function initializeContactAppLayout() {
    if (!isMobileContactApp()) {
      // On desktop:
      // 1. Hide content section initially
      if (contactContentSection) {
        contactContentSection.style.visibility = 'hidden';
        contactContentSection.style.display = 'none';
      }

      // 2. Make contact list section take 100% width
      if (contactListSection) {
        contactListSection.style.width = '100%';
      }

      // 3. Show table header by default
      const tableHeader = windowElement.querySelector('.contact-list-table-header');
      if (tableHeader) {
        tableHeader.style.display = '';
      }

      updateContactListToolbar();
    }
  }

  function renderContactList(selectedId) {
    if (!contactList) return;
    contactList.innerHTML = '';

    // If there's no selected contact and we're not in mobile mode, show a table view
    if ((typeof selectedId === 'undefined' || selectedId === null) && !isMobileContactApp()) {
      // Make sure contact content section is hidden
      if (contactContentSection) {
        contactContentSection.style.visibility = 'hidden';
        contactContentSection.style.display = 'none';
      }

      // Make contact list section take 100% width and add table-mode class
      if (contactListSection) {
        contactListSection.style.width = '100%';
        contactListSection.classList.add('table-mode');
        contactListSection.classList.remove('contact-selected-mode');
      }

      // Use the unified contacts data for the table view

      // Create a table row for each contact
      contacts.forEach(contact => {
        const li = document.createElement('li');
        li.className = 'contact-list-item contact-table-row';

        const bgColor = `rgba(${parseInt(contact.color.slice(1, 3), 16)},${parseInt(contact.color.slice(3, 5), 16)},${parseInt(contact.color.slice(5, 7), 16)},0.1)`;

        li.innerHTML = `
          <div style="display: flex; width: 100%; align-items: center; padding: 10px 14px;">
            <div style="width: 32px; min-width: 32px; display: flex; justify-content: center; margin-right: 10px;">
<input type="checkbox" id="contact-select-all-box" name="orders-select-all-box">
            </div>
            <div style="flex: 1; display: flex; align-items: center;">
              <div class="contact-list-avatar" style="color:${contact.color};background-color:${bgColor}">
                <i class="fas ${contact.icon}"></i>
              </div>
              <span class="contact-list-first-name">${contact.firstName}</span>
            </div>
            <div style="flex: 1;" class="contact-list-last-name">${contact.lastName}</div>
            <div style="flex: 1;">${contact.creationDate}</div>
            <div style="flex: 1;">${contact.lastOrder}</div>
            <div style="flex: 1;">${contact.lastVisit}</div>
            <div style="flex: 1;">${contact.city}</div>
            <div style="flex: 1;">${contact.country}</div>
            <div style="flex: 1;">${contact.phone}</div>
            <div class="contact-list-orders-no" >${contact.ordersNo}</div>
            <div class="contact-list-total-spent" >${contact.totalSpent}</div>
            <div style="width: 20px; min-width: 20px;"></div>
          </div>
        `;

        li.onclick = () => {
          // When a row is clicked, use the contact's ID to load the detail view
          renderContactList(contact.id);
        };

        contactList.appendChild(li);
      });

      return;
    }

    // If selectedId is provided, render the regular contact list view
    Object.keys(groupedContacts).sort().forEach(letter => {
      // Letter header
      const letterHeader = document.createElement('li');
      letterHeader.className = 'contact-list-letter-header';
      letterHeader.textContent = letter;
      contactList.appendChild(letterHeader);
      groupedContacts[letter].forEach(contact => {
        const li = document.createElement('li');
        li.className = 'contact-list-item' + (contact.id === selectedId ? ' selected' : '') + (contact.favorite ? ' favorite' : '');
        li.innerHTML = `
        <div class="contact-list-avatar" style="color:${contact.color};background-color:rgba(${parseInt(contact.color.slice(1, 3), 16)},${parseInt(contact.color.slice(3, 5), 16)},${parseInt(contact.color.slice(5, 7), 16)},0.1)"><i class="fas ${contact.icon}"></i></div>
        <div class="contact-list-info">
          <div class="contact-list-name">               ${contact.online ? '<div style="width: 8px; height: 8px; border-radius: 50%; background-color: #10B981;"></div>' : ''}${contact.firstName} ${contact.lastName}</div>
          <div class="contact-list-details">${contact.company}</div>
        </div>
        <div class="contact-list-meta">
          ${contact.favorite ? '<div class="contact-list-favorite"><i class="fas fa-star"></i></div>' : ''}
          ${contact.notes ? '<div class="contact-list-notes-indicator"><i class="fas fa-sticky-note"></i></div>' : ''}
        </div>
        `;
        li.onclick = () => {
          console.log('Contact clicked:', contact.id, contact.firstName, contact.lastName);

          // On mobile, we need to use the patched renderContactList which will handle
          // showing the content panel after rendering the content
          renderContactList(contact.id);

          // On desktop or when the patched renderContactList isn't in effect yet,
          // we need to render the content directly
          if (!isMobileContactApp()) {
            renderContactContent(contact);
          }
        };
        li.ondblclick = () => {
          // Generate a unique window ID for each contact content popout
          let contactContentWindowCount = 1;
          while (openWindows[`contact-content-window-${contactContentWindowCount}`]) {
            contactContentWindowCount++;
          }
          const windowId = `contact-content-window-${contactContentWindowCount}`;

          const contactContentWindow = createWindowFromTemplate('contact-content-window', windowId, false);
          if (!contactContentWindow) return;
          
          // Add simple opening animation
          contactContentWindow.classList.add('window-anim-open');
          // Inject the full contact-content-section structure
          const content = contactContentWindow.querySelector('.contact-content-body');
          if (!content) return;

          content.innerHTML = `
          <section class="contact-content-section">
            <div class="contact-content-header">
              <button class="contact-back-button"><i class="fas fa-arrow-left"></i></button>
              <div class="contact-header-actions">
                <button class="contact-edit-button"><i class="fas fa-edit"></i></button>
                <button class="contact-delete-button"><i class="fas fa-trash"></i></button>
                <button class="contact-more-button"><i class="fas fa-ellipsis-h"></i></button>
              </div>
            </div>
            <div class="contact-content">
              ${getContactContentHTML(contact)}
            </div>
          </section>
          `;

          // Setup back button in the popout window
          const backButton = content.querySelector('.contact-back-button');
          if (backButton) {
            backButton.addEventListener('click', () => {
              const closeButton = contactContentWindow.querySelector('.window-close');
              if (closeButton) closeButton.click();
            });
          }

          // Setup edit button
          const editButton = content.querySelector('.contact-edit-button');
          if (editButton) {
            editButton.addEventListener('click', () => {
              showEditContactForm(contact, content);
            });
          }

          // Setup more options button
          const moreButton = content.querySelector('.contact-more-button');
          if (moreButton) {
            moreButton.addEventListener('click', (e) => {
              showContactMoreOptions(e.target, contact);
            });
          }
        };
        contactList.appendChild(li);
      });
    });
  }

  function renderContactContent(contact) {
    if (!contactContentSection || !contactContent) return;

    // When a contact is selected, make the content section visible
    if (!isMobileContactApp()) {
      if (contactContentSection) {
        contactContentSection.style.visibility = 'visible';
        contactContentSection.style.display = '';
      }

      // Restore contact list section width and update classes
      if (contactListSection) {
        contactListSection.style.width = '320px';
        contactListSection.classList.remove('table-mode');
        contactListSection.classList.add('contact-selected-mode');
      }

      // Hide table header
      const tableHeader = windowElement.querySelector('.contact-list-table-header');
      if (tableHeader) {
        tableHeader.style.display = 'none';
      }
    }

    contactContent.innerHTML = getContactContentHTML(contact);

    // Setup edit button
    const editButton = windowElement.querySelector('.contact-edit-button');
    if (editButton) {
      editButton.addEventListener('click', () => {
        showEditContactForm(contact, windowElement);
      });
    }

    // Setup delete button
    const deleteButton = windowElement.querySelector('.contact-delete-button');
    if (deleteButton) {
      deleteButton.addEventListener('click', () => {
        // Show confirmation dialog
        const confirmMessage = `Are you sure you want to delete ${contact.firstName} ${contact.lastName}?`;
        if (confirm(confirmMessage)) {
          // Remove contact from data
          const index = contacts.findIndex(c => c.id === contact.id);
          if (index !== -1) {
            contacts.splice(index, 1);

            // Rebuild grouped contacts
            const groupedContacts = contacts.reduce((acc, contact) => {
              if (!acc[contact.letter]) acc[contact.letter] = [];
              acc[contact.letter].push(contact);
              return acc;
            }, {});

            // Render updated list and clear content area
            renderContactList();
            if (contactContent) {
              contactContent.innerHTML = '<div class="no-contact-selected">No contact selected</div>';
            }
            // Hide the content section
            if (contactContentSection) {
              contactContentSection.style.visibility = 'hidden';
              contactContentSection.style.display = 'none';
            }
          }
        }
      });
    }

    // Setup more options button
    const moreButton = windowElement.querySelector('.contact-more-button');
    if (moreButton) {
      moreButton.addEventListener('click', (e) => {
        showContactMoreOptions(e.target, contact);
      });
    }
  }

  function getContactContentHTML(contact) {
    return `
      <div class="contact-content-wrapper">
        <div class="client-profile-container">

          
          <div class="client-info-grid">
   <div class="detail-section customer-info-with-invoice">

                    <div class="customer-info ">
                      <div class="customer-avatar">
                        <img src="img//avatar.png" alt="Customer Avatar">
                      </div>
                      <div class="customer-details-first-last-name">
                      <div class="customer-details">
                      
                          <h3>First name</h3>
                        <div class="customer-name">${contact.firstName}</div>
                      </div>
                                       <div class="customer-details">
                                        <h3>Last Name</h3>
                        <div class="customer-name">${contact.lastName}</div>
                      </div>
</div>
                    </div>

                         <div class="contact-info-with-id">
                <div class="client-id-section"><div class="client-id-with-online-status">
              <h2 class="client-id">Client ID #054</h2>                
              <div class="client-id-online-status">
              <span class="online-indicator"></span>
                <span>Online</span>
                </div></div>
              <div class="client-meta">
                <span>Joined: 12 April 2024</span>
                <span class="separator">•</span>
                <span>Last seen 28 April 2025</span>

              </div>
            </div>
              </div>

                  </div>



              <div class="contact-details-container">
              
                <div class="order-customer-details">
                  
                  
                  <div class="detail-section">
                  <div class="detail-section-header">
                  <i class="fas fa-envelope"></i>
                    <h3>Email Address</h3></div>
                    <div class="detail-value email-address">justmearg@yahoo.com</div>
                  </div>
                  
                  <div class="detail-section">
                  <div class="detail-section-header">
                  <i class="fas fa-phone"></i>
                    <h3>Phone number</h3></div>
                    <div class="detail-value">0732 743 284 <i class="fab fa-whatsapp"></i></div>
                  </div>
                  
   

                </div>

                <div class="order-payment-details">
                  <div class="detail-section">
                  <div class="detail-section-header">
                  <i class="fas fa-credit-card"></i>
                    <h3>Payment</h3></div>
                    <div class="detail-value">Credit Card</div>
                  </div>
                  
                  <div class="detail-section">
                  <div class="detail-section-header">
                  <i class="fas fa-globe"></i>
                    <h3>IP Address</h3></div>
                    <div class="detail-value">5.14.184.112</div>
                  </div>
                  

                </div>
                
                <div class="order-billing-details">
                  <div class="detail-section">
                  <div class="detail-section-header">
                  <i class="fas fa-globe"></i>
                    <h3>Channel</h3></div>
                    <div class="detail-value">Website / eMag etc</div>
                  </div>

                  <div class="detail-section">
                  <div class="detail-section-header">
                  <i class="fas fa-building"></i>
                    <h3>Billing</h3></div>
                    <div class="detail-value">Company</div>
                  </div>
                </div>
                
                <div class="order-shipping-details">
                
                                  <div class="detail-section">
          <div class="detail-section-header">
          <i class="fas fa-calendar-alt"></i>
                    <h3>Registered</h3></div>
                    <div class="detail-value">2 weeks ago</div>
                  </div>

                  <div class="detail-section">
                  <div class="detail-section-header">
                  <i class="fas fa-shopping-cart"></i>
                    <h3>Total orders</h3></div>
                    <div class="detail-value">10 orders - $ 2,545.76</div>
                  </div>
                 
                </div>
                
                
              </div>
</div>
</div>
          
          <div class="client-financial-section">
            <div class="financial-block">
              <div class="financial-icon"><i class="fas fa-dollar-sign"></i></div>
              <div class="financial-details">
                <div class="financial-amount">$2578,52</div>
                <div class="financial-label">Total spent</div>
              </div>
            </div>
            
            <div class="financial-block">
              <div class="financial-icon"><i class="fas fa-dollar-sign"></i></div>
              <div class="financial-details">
                <div class="financial-amount">$2578,52</div>
                <div class="financial-label">Total spent</div>
              </div>
            </div>
            
            <div class="financial-block">
              <div class="financial-icon"><i class="fas fa-heart"></i></div>
              <div class="financial-details">
                <div class="financial-amount">$7525</div>
                <div class="financial-label">Wishlist</div>
              </div>
            </div>
            
            <div class="financial-block">
              <div class="financial-icon"><i class="fas fa-cart-plus"></i></div>
              <div class="financial-details">
                <div class="financial-amount">$7525</div>
                <div class="financial-label">Cart right now</div>
              </div>
            </div>
          </div>
          
          
          
          <div class="client-orders-section">
            <div class="orders-tabs">
              <div class="order-tab active">
                <i class="fas fa-shopping-cart"></i>
                <span>All orders (6)</span>
              </div>
              <div class="order-tab">
                <i class="fas fa-ticket-alt"></i>
                <span>Tickets (5)</span>
              </div>
              <div class="order-tab">
                <i class="fas fa-file-alt"></i>
                <span>Documents (7)</span>
              </div>
              <div class="order-tab">
                <i class="fas fa-envelope"></i>
                <span>Emails</span>
              </div>
              <div class="order-tab">
                <i class="fas fa-chart-line"></i>
                <span>Activity</span>
              </div>
              <div class="search-orders">
                <i class="fas fa-search"></i>
              </div>
            </div>
<div class="order-list-header-table">
                          <div class="contacts-oder-list-header-item">
                          <input type="checkbox" id="orders-select-all-box" name="orders-select-all-box">
                <div class="order-icon"></div>
                <div class="order-id">Order No. <i class="fas fa-chevron-down"></i></div>
                <div class="order-date">Date</div>
                <div class="order-type">Type</div>
                <div class="order-payment">Payment</div>
                <div class="order-shipping">Shipping</div>
                <div class="order-status pending">
                  <span>Status</span>
                </div>
                <div class="order-amount">Amount</div>
                <div class="order-actions"><i class="fas fa-ellipsis-h"></i></div>
              </div>
</div>
            <div class="orders-list">
              <div class="order-item">
                <input type="checkbox" id="orders-select-all-box" name="orders-select-all-box">
                <div class="order-icon"><i class="fas fa-file-alt"></i></div>
                <div class="order-id">Order #054</div>
                <div class="order-date">Sun Nov 26 2023</div>
                <div class="order-type">Order</div>
                <div class="order-payment">Payment</div>
                <div class="order-shipping">Shipping</div>
                <div class="order-status processing">
<span class="status-badge status-processing"><i class="fas fa-cogs status-icon"></i> <div class="order-status-list-view">Processing</div></span>
                </div>
                <div class="order-amount">198.00</div>
                <div class="order-actions"><i class="fas fa-ellipsis-h"></i></div>
              </div>
              
              <div class="order-item">
                <input type="checkbox" id="orders-select-all-box" name="orders-select-all-box">
                <div class="order-icon"><i class="fas fa-file-alt"></i></div>
                <div class="order-id">Order #054</div>
                <div class="order-date">Sun Nov 26 2023</div>
                <div class="order-type">Order</div>
                <div class="order-payment">Payment</div>
                <div class="order-shipping">Shipping</div>
                <div class="order-status pending">
<span class="status-badge status-pending"><i class="fas fa-clock status-icon"></i> <div class="order-status-list-view">Pending</div></span>
                </div>
                <div class="order-amount">674.00</div>
                <div class="order-actions"><i class="fas fa-ellipsis-h"></i></div>
              </div>
              
              <div class="order-item">
                <input type="checkbox" id="orders-select-all-box" name="orders-select-all-box">
                <div class="order-icon"><i class="fas fa-file-alt"></i></div>
                <div class="order-id">Order #054</div>
                <div class="order-date">Sun Nov 26 2023</div>
                <div class="order-type">Order</div>
                <div class="order-payment">Payment</div>
                <div class="order-shipping">Shipping</div>
                <div class="order-status draft">
<span class="status-badge status-draft"><i class="fas fa-pencil-alt status-icon"></i> <div class="order-status-list-view">Draft</div></span>
                </div>
                <div class="order-amount">731.00</div>
                <div class="order-actions"><i class="fas fa-ellipsis-h"></i></div>
              </div>
              
              <div class="order-item">
                <input type="checkbox" id="orders-select-all-box" name="orders-select-all-box">
                <div class="order-icon"><i class="fas fa-file-alt"></i></div>
                <div class="order-id">Order #054</div>
                <div class="order-date">Sun Nov 26 2023</div>
                <div class="order-type">Order</div>
                <div class="order-payment">Payment</div>
                <div class="order-shipping">Shipping</div>
                <div class="order-status pending">
<span class="status-badge status-pending-payment"><i class="fas fa-money-bill-wave status-icon"></i> <div class="order-status-list-view">Pending Payment</div></span>
                </div>
                <div class="order-amount">198.00</div>
                <div class="order-actions"><i class="fas fa-ellipsis-h"></i></div>
              </div>
              
              <div class="order-item">
                <input type="checkbox" id="orders-select-all-box" name="orders-select-all-box">
                <div class="order-icon"><i class="fas fa-file-alt"></i></div>
                <div class="order-id">Order #054</div>
                <div class="order-date">Sun Nov 26 2023</div>
                <div class="order-type">Order</div>
                <div class="order-payment">Payment</div>
                <div class="order-shipping">Shipping</div>
                <div class="order-status completed">
<span class="status-badge status-completed"><i class="fas fa-check-circle status-icon"></i> <div class="order-status-list-view">Completed</div></span>
                </div>
                <div class="order-amount">674.00</div>
                <div class="order-actions"><i class="fas fa-ellipsis-h"></i></div>
              </div>
              
              <div class="order-item">
                <input type="checkbox" id="orders-select-all-box" name="orders-select-all-box">
                <div class="order-icon"><i class="fas fa-file-alt"></i></div>
                <div class="order-id">Order #054</div>
                <div class="order-date">Sun Nov 26 2023</div>
                <div class="order-type">Order</div>
                <div class="order-payment">Payment</div>
                <div class="order-shipping">Shipping</div>
                <div class="order-status draft">
<span class="status-badge status-pending-payment"><i class="fas fa-money-bill-wave status-icon"></i> <div class="order-status-list-view">Pending Payment</div></span>
                </div>
                <div class="order-amount">731.00</div>
                <div class="order-actions"><i class="fas fa-ellipsis-h"></i></div>
              </div>
              
            
            </div>

              <div class="order-total footer-pagination">
                          <div class="pagination">
              <div class="pagination-item">
                <i class="fas fa-chevron-left"></i>
              </div>
                            <div class="pagination-item">
                1
              </div>
                            <div class="pagination-item">
                2
              </div>
                            <div class="pagination-item">
                3
              </div>
                            <div class="pagination-item">
                ...
              </div>
                                          <div class="pagination-item">
                8
              </div>
              <div class="pagination-item">
                <i class="fas fa-chevron-right"></i>
              </div>
            </div>
                <div class="total-label"><span>Total earnings</span>
                <div class="total-amount">$7522.25</div>
                </div>
              </div>
          </div>


<div class="client-details-section">
            <div class="companies-section">
              <div class="section-header">
                <i class="fas fa-building"></i>
                <span>Companies</span>
              </div>
              
              <div class="company-card">
                <div class="company-details">
                  <h4>Atelierul de Gravura si Personalizare SRL</h4>
                  <div class="company-meta">
                    <div>VAT Number: RO43423898</div>
                    <div>Reg. Com.: J13/232/2321</div>
                  </div>
                </div>
                <div class="company-actions">
                  <i class="fas fa-ellipsis-h"></i>
                </div>
              </div>
              
              <div class="address-section">
                <div class="section-header">
                  <i class="fas fa-map-marker-alt"></i>
                  <span>Address</span>
                </div>
                
                <div class="address-details">
                  <p>Stefan cel mare 81, Bloc M25, Constanta</p>
                  <p>Constanta, Romania 400708</p>
                </div>
                
                <div class="map-container">
                  <div class="map-placeholder">
                    <button class="view-map-btn">View map</button>
                  </div>
                </div>
                
                <div class="address-name">
                  <i class="fas fa-map-marker-alt"></i>
                  <span>Constanta, Romania</span>
                  <i class="fas fa-ellipsis-v"></i>
                </div>
              </div>
            </div>
            
            <div class="notes-section">
              <div class="section-header">
                <i class="fas fa-pen"></i>
                <span>Notes</span>
              </div>
              
              <div class="note-card">
                <div class="note-header">
                  <div class="note-author">
                    <img src="img/avatar.png" alt="Author" class="author-avatar">
                    <span>Ioan Mihalache</span>
                  </div>
                  <div class="note-meta">
                  <div class="note-meta-note-type">
<i class="fas fa-envelope"></i><span>Sent</span>


                    </div>
                    <i class="fas fa-ellipsis-h"></i>
                  </div>
                </div>
                
                <div class="note-content">
                  M-a sunat acum 2 zile sa ma intrebe de ce si n-am stiut ce sa-i spun. Urmeaza raspunsul.dar mai bine nu ca iar ne da
                </div>
                <div class="note-to-who-timestamp">
                <div class="note-to-who"> <i class="fas fa-shopping-cart"></i> <span>Order #2456 </span> </div>
                <div class="note-timestamp">21 mai 2025 16:30</div>
                </div>
              </div>
              
              <div class="note-card">
                <div class="note-header">
                  <div class="note-author">
                    <img src="img/avatar.png" alt="Author" class="author-avatar">
                    <span>Ioan Mihalache</span>
                  </div>
                  <div class="note-meta">
                  <div class="note-meta-note-type">                    <i class="fas fa-clipboard-list"></i><span>Internal</span>
                    
                    </div>
                    <i class="fas fa-ellipsis-h"></i>
                  </div>
                </div>
                
                <div class="note-content">
                  M-a sunat acum 2 zile sa ma intrebe de ce si n-am stiut ce sa-i spun. Urmeaza raspunsul.dar mai bine nu ca iar ne da
                </div>
                <div class="note-to-who-timestamp">
                <div class="note-to-who"> <i class="fas fa-user"></i> <span>Contact note </span> </div>
                <div class="note-timestamp">21 mai 2025 16:30</div>
                </div>
              </div>
              
              <div class="load-more">
                <button class="load-more-btn">Load 3 more</button>
              </div>
            </div>
          </div>

        </div>
      </div>
    `;
  }

  function showContactMoreOptions(targetElement, contact) {
    // Create more options panel
    const morePanel = document.createElement('div');
    morePanel.className = 'contact-more-panel';
    morePanel.innerHTML = `
      <div class="more-panel-header">
        <div class="more-panel-title">Options</div>
        <button class="more-panel-close"><i class="fas fa-times"></i></button>
      </div>
      <div class="more-panel-content">
        <button class="more-panel-option ${contact.favorite ? 'active' : ''}" data-action="favorite">
          <i class="fas fa-star"></i> ${contact.favorite ? 'Remove from Favorites' : 'Add to Favorites'}
        </button>
        <button class="more-panel-option" data-action="share">
          <i class="fas fa-share-alt"></i> Share Contact
        </button>
        <button class="more-panel-option" data-action="export">
          <i class="fas fa-file-export"></i> Export Contact
        </button>
        <button class="more-panel-option" data-action="block">
          <i class="fas fa-ban"></i> Block Contact
        </button>
      </div>
    `;

    // Position the panel
    const rect = targetElement.getBoundingClientRect();
    morePanel.style.position = 'absolute';
    morePanel.style.top = `${rect.bottom + window.scrollY + 5}px`;
    morePanel.style.right = `${window.innerWidth - rect.right - window.scrollX}px`;
    document.body.appendChild(morePanel);

    // Animation
    morePanel.style.opacity = '0';
    morePanel.style.transform = 'scale(0.95)';
    morePanel.classList.add('more-panel-anim-in');

    // Handle close button
    const closeButton = morePanel.querySelector('.more-panel-close');
    if (closeButton) {
      closeButton.addEventListener('click', function hideMorePanel(ev) {
        morePanel.classList.remove('more-panel-anim-in');
        morePanel.classList.add('more-panel-anim-out');

        morePanel.addEventListener('animationend', function handler() {
          morePanel.removeEventListener('animationend', handler);
          morePanel.remove();
        });
      });
    }

    // Handle click outside
    const handleOutsideClick = (e) => {
      if (!morePanel.contains(e.target) && e.target !== targetElement) {
        morePanel.classList.remove('more-panel-anim-in');
        morePanel.classList.add('more-panel-anim-out');

        morePanel.addEventListener('animationend', function handler() {
          morePanel.removeEventListener('animationend', handler);
          morePanel.remove();
          document.removeEventListener('click', handleOutsideClick, true);
        });
      }
    };

    // Delay adding the click handler to prevent immediate closing
    setTimeout(() => {
      document.addEventListener('click', handleOutsideClick, true);
    }, 100);

    // Handle options
    const options = morePanel.querySelectorAll('.more-panel-option');
    options.forEach(option => {
      option.addEventListener('click', () => {
        const action = option.getAttribute('data-action');

        if (action === 'favorite') {
          // Toggle favorite status
          contact.favorite = !contact.favorite;
          renderContactList(contact.id);
          renderContactContent(contact);

          // Close panel
          morePanel.classList.remove('more-panel-anim-in');
          morePanel.classList.add('more-panel-anim-out');
          morePanel.addEventListener('animationend', function handler() {
            morePanel.removeEventListener('animationend', handler);
            morePanel.remove();
            document.removeEventListener('click', handleOutsideClick, true);
          });
        } else {
          // For other actions, just show a notification
          alert(`Action: ${action} - This feature is not implemented in the demo`);
        }
      });
    });
  }

  function getAddContactFormHTML() {
    return `
      <div class="add-contact-form">
        <div class="form-header">
          <h3>Add New Contact</h3>
          <button class="form-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="form-body">
          <div class="form-group">
            <label for="contact-name">Name</label>
            <input type="text" id="contact-name" placeholder="Full Name">
          </div>
          <div class="form-group">
            <label for="contact-email">Email</label>
            <input type="email" id="contact-email" placeholder="Email Address">
          </div>
          <div class="form-group">
            <label for="contact-phone">Phone</label>
            <input type="tel" id="contact-phone" placeholder="Phone Number">
          </div>
          <div class="form-group">
            <label for="contact-company">Company</label>
            <input type="text" id="contact-company" placeholder="Company Name">
          </div>
          <div class="form-group">
            <label for="contact-position">Position</label>
            <input type="text" id="contact-position" placeholder="Job Title">
          </div>
          <div class="form-group">
            <label for="contact-notes">Notes</label>
            <textarea id="contact-notes" placeholder="Additional Notes"></textarea>
          </div>
        </div>
        <div class="form-footer">
          <button class="cancel-button">Cancel</button>
          <button class="save-button">Save Contact</button>
        </div>
      </div>
    `;
  }

  function showEditContactForm(contact, parentElement) {
    const formContainer = document.createElement('div');
    formContainer.className = 'add-contact-overlay';
    formContainer.innerHTML = `
      <div class="add-contact-form">
        <div class="form-header">
          <h3>Edit Contact</h3>
          <button class="form-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="form-body">
          <div class="form-group">
            <label for="edit-contact-name">Name</label>
            <input type="text" id="edit-contact-name" value="${contact.firstName} ${contact.lastName}">
          </div>
          <div class="form-group">
            <label for="edit-contact-email">Email</label>
            <input type="email" id="edit-contact-email" value="${contact.email}">
          </div>
          <div class="form-group">
            <label for="edit-contact-phone">Phone</label>
            <input type="tel" id="edit-contact-phone" value="${contact.phone}">
          </div>
          <div class="form-group">
            <label for="edit-contact-company">Company</label>
            <input type="text" id="edit-contact-company" value="${contact.company}">
          </div>
          <div class="form-group">
            <label for="edit-contact-position">Position</label>
            <input type="text" id="edit-contact-position" value="${contact.position}">
          </div>
          <div class="form-group">
            <label for="edit-contact-notes">Notes</label>
            <textarea id="edit-contact-notes">${contact.notes || ''}</textarea>
          </div>
        </div>
        <div class="form-footer">
          <button class="cancel-button">Cancel</button>
          <button class="save-button">Save Changes</button>
        </div>
      </div>
    `;

    parentElement.appendChild(formContainer);

    // Animation
    formContainer.style.opacity = '0';
    setTimeout(() => {
      formContainer.style.opacity = '1';
    }, 10);

    // Handle close button
    const closeButton = formContainer.querySelector('.form-close');
    if (closeButton) {
      closeButton.addEventListener('click', function hidePanel(ev) {
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }

    // Handle cancel button
    const cancelButton = formContainer.querySelector('.cancel-button');
    if (cancelButton) {
      cancelButton.addEventListener('click', () => {
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }

    // Handle save button
    const saveButton = formContainer.querySelector('.save-button');
    if (saveButton) {
      saveButton.addEventListener('click', () => {
        // Update contact with form values
        contact.firstName = formContainer.querySelector('#edit-contact-name').value.split(' ')[0];
        contact.lastName = formContainer.querySelector('#edit-contact-name').value.split(' ')[1];
        contact.email = formContainer.querySelector('#edit-contact-email').value;
        contact.phone = formContainer.querySelector('#edit-contact-phone').value;
        contact.company = formContainer.querySelector('#edit-contact-company').value;
        contact.position = formContainer.querySelector('#edit-contact-position').value;
        contact.notes = formContainer.querySelector('#edit-contact-notes').value;

        // Update first letter if name changed
        const firstLetter = contact.firstName.charAt(0).toUpperCase();
        if (contact.letter !== firstLetter) {
          contact.letter = firstLetter;

          // Rebuild grouped contacts
          const groupedContacts = contacts.reduce((acc, contact) => {
            if (!acc[contact.letter]) acc[contact.letter] = [];
            acc[contact.letter].push(contact);
            return acc;
          }, {});
        }

        // Update UI
        renderContactList(contact.id);
        renderContactContent(contact);

        // Close form
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }
  }

  function isMobileContactApp() {
    return window.innerWidth <= 767 && windowElement.querySelector('.contact-app-window');
  }

  function showContactContentPanel() {
    if (isMobileContactApp() && windowMainContent) {
      // Force a reflow before adding the class to ensure smooth transition
      windowMainContent.offsetHeight;

      // Add animation class FIRST
      windowMainContent.classList.add('animate-content-transition');

      // Make sure content is visible before transition starts
      const contentSection = windowMainContent.querySelector('.contact-content-section');
      if (contentSection) {
        contentSection.style.zIndex = '2';
        contentSection.style.visibility = 'visible';
      }

      // Then add the class that triggers transform
      windowMainContent.classList.add('show-contact-content');

      // Remove animation class after transition completes
      setTimeout(() => {
        windowMainContent.classList.remove('animate-content-transition');
      }, 350);
    }
  }

  function updateContactListToolbar(selectedId) {
    const tableHeader = windowElement.querySelector('.contact-list-table-header');
    const searchSort = windowElement.querySelector('.contact-list-toolbar-searchsort1');
    if (!isMobileContactApp()) {
      if (typeof selectedId === 'undefined' || selectedId === null) {
        // No contact selected: show table header, hide search/sort
        if (tableHeader) tableHeader.style.display = '';
        if (searchSort) searchSort.style.display = 'none';
      } else {
        // Contact selected: show search/sort, hide table header
        if (tableHeader) tableHeader.style.display = 'none';
        if (searchSort) searchSort.style.display = '';
      }
    } else {
      // On mobile, always show search/sort, hide table header
      if (tableHeader) tableHeader.style.display = 'none';
      if (searchSort) searchSort.style.display = '';
    }
  }

  // Patch renderContactList to handle mobile view properly
  const origRenderContactList = renderContactList;
  renderContactList = function (selectedId) {
    updateContactListToolbar(selectedId);
    origRenderContactList(selectedId);
    const selectedContact = contacts.find(c => c.id === selectedId);

    if (isMobileContactApp() && typeof selectedId === 'number' && selectedContact) {
      // Render content first, then show panel
      renderContactContent(selectedContact);
      // Use requestAnimationFrame to ensure content is rendered before transition
      requestAnimationFrame(() => {
        showContactContentPanel();
      });
    } else if (selectedContact) {
      // On desktop, just render content
      renderContactContent(selectedContact);
    }
  };

  // On resize, update layout
  window.addEventListener('resize', function () {
    if (!isMobileContactApp() && windowMainContent) {
      windowMainContent.classList.remove('show-contact-content');
      // Reset layout when switching from mobile to desktop
      if (contactContentSection && contactContent && contactContent.querySelector('.contact-content-wrapper')) {
        // If a contact is already selected
        contactContentSection.style.visibility = 'visible';
        contactContentSection.style.display = '';
        if (contactListSection) contactListSection.style.width = '320px';
      } else {
        // If no contact is selected
        initializeContactAppLayout();
      }
    }
  });

  // Add mobile back button to toolbar if it doesn't exist
  const contactToolbar = windowElement.querySelector('.contact-content-section .window-toolbar');
  if (contactToolbar && !contactToolbar.querySelector('.contact-back-button')) {
    const backButton = document.createElement('button');
    backButton.className = 'toolbar-button contact-back-button';
    backButton.title = 'Back';
    backButton.innerHTML = '<i class="fas fa-arrow-left"></i><span>Back</span>';
    backButton.addEventListener('click', () => {
      showContactListPanel();
    });

    // Insert at the beginning of the toolbar
    const toolbarLeft = contactToolbar.querySelector('.toolbar-buttons-left');
    if (toolbarLeft) {
      toolbarLeft.insertBefore(backButton, toolbarLeft.firstChild);
    }
  }

  function showContactListPanel() {
    if (isMobileContactApp() && windowMainContent) {
      // Force a reflow before removing the class to ensure smooth transition
      windowMainContent.offsetHeight;

      // Add animation class FIRST
      windowMainContent.classList.add('animate-content-transition');

      // Then remove the class that controls transform
      windowMainContent.classList.remove('show-contact-content');

      // Remove animation class after transition completes
      setTimeout(() => {
        windowMainContent.classList.remove('animate-content-transition');
      }, 350);

      // Reset z-index after animation completes
      const contentSection = windowMainContent.querySelector('.contact-content-section');
      if (contentSection) {
        setTimeout(() => {
          if (!windowMainContent.classList.contains('show-contact-content')) {
            contentSection.style.zIndex = '';
            contentSection.style.visibility = '';
          }
        }, 350);
      }
    } else if (!isMobileContactApp()) {
      // On desktop, reset the layout
      if (contactContentSection) {
        contactContentSection.style.visibility = 'hidden';
        contactContentSection.style.display = 'none';
      }

      if (contactListSection) {
        contactListSection.style.width = '100%';
        contactListSection.classList.add('table-mode');
        contactListSection.classList.remove('contact-selected-mode');
      }

      // Show table header
      const tableHeader = windowElement.querySelector('.contact-list-table-header');
      if (tableHeader) {
        tableHeader.style.display = '';
      }

      // Render the contact list without a selected contact
      renderContactList();
    }
  }

  // Initial render
  renderContactList();
  initializeContactAppLayout();

  // Setup back button for mobile view
  const existingBackButton = windowElement.querySelector('.contact-back-button');
  if (existingBackButton) {
    existingBackButton.addEventListener('click', () => {
      showContactListPanel();
    });
  }


  // Setup compose button to add new contact
  const composeBtn = windowElement.querySelector('.compose-btn');
  if (composeBtn) {
    composeBtn.addEventListener('click', () => {
      // Generate a unique window ID for each add contact window
      let addContactWindowCount = 1;
      while (openWindows[`add-contact-window-${addContactWindowCount}`]) {
        addContactWindowCount++;
      }
      const windowId = `add-contact-window-${addContactWindowCount}`;

      // Create the window from template
      const addContactWindow = createWindowFromTemplate('add-contact-window', windowId, false);
      if (!addContactWindow) return;
      
      // Add simple opening animation
      addContactWindow.classList.add('window-anim-open');

      // Inject the add contact form HTML
      const content = addContactWindow.querySelector('.add-contact-window-content');
      if (content) {
        content.innerHTML = getAddContactFormHTML();

        // Handle close button
        const closeButton = content.querySelector('.form-close');
        if (closeButton) {
          closeButton.addEventListener('click', () => {
            // Use standard window close animation
            const standardCloseBtn = addContactWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              addContactWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              addContactWindow.classList.add('window-anim-close');
              addContactWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                  if (addContactWindow.parentNode) addContactWindow.parentNode.removeChild(addContactWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                }
              }, { once: true });
            }
          });
        }

        // Handle cancel button
        const cancelButton = content.querySelector('.cancel-button');
        if (cancelButton) {
          cancelButton.addEventListener('click', () => {
            // Use standard window close animation
            const standardCloseBtn = addContactWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              addContactWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              addContactWindow.classList.add('window-anim-close');
              addContactWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                  if (addContactWindow.parentNode) addContactWindow.parentNode.removeChild(addContactWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                }
              }, { once: true });
            }
          });
        }

        // Handle save button
        const saveButton = content.querySelector('.save-button');
        if (saveButton) {
          saveButton.addEventListener('click', () => {
            // Get form values
            const name = content.querySelector('#contact-name').value;
            const email = content.querySelector('#contact-email').value;
            const phone = content.querySelector('#contact-phone').value;
            const company = content.querySelector('#contact-company').value;
            const position = content.querySelector('#contact-position').value;
            const notes = content.querySelector('#contact-notes').value;

            if (!name) {
              alert('Name is required');
              return;
            }

            // Create new contact object
            const newContact = {
              id: contacts.length + 1,
              name,
              email,
              phone,
              company,
              position,
              notes,
              favorite: false,
              letter: name.charAt(0).toUpperCase(),
              icon: 'fa-user',
              color: '#' + Math.floor(Math.random() * 16777215).toString(16)
            };

            // Add to contacts array
            contacts.push(newContact);

            // Rebuild grouped contacts
            const groupedContacts = contacts.reduce((acc, contact) => {
              if (!acc[contact.letter]) acc[contact.letter] = [];
              acc[contact.letter].push(contact);
              return acc;
            }, {});

            // Update UI
            renderContactList(newContact.id);
            renderContactContent(newContact);

            // Close window with animation
            const standardCloseBtn = addContactWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              addContactWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              addContactWindow.classList.add('window-anim-close');
              addContactWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                  if (addContactWindow.parentNode) addContactWindow.parentNode.removeChild(addContactWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                }
              }, { once: true });
            }
          });
        }
      }

      // Register the window in openWindows
      const iconClass = 'fa-user-plus';
      const iconBgClass = 'green-icon';
      const appTitle = 'Add New Contact';
      openWindows[windowId] = {
        element: addContactWindow,
        name: 'add-contact',
        title: appTitle,
        iconClass: iconClass,
        iconBgClass: iconBgClass,
        appTitle: appTitle
      };
      makeWindowActive(addContactWindow);
      // Call renderPinnedTaskbarIcons to immediately update the taskbar
      renderPinnedTaskbarIcons();
    });
  }

  // Apply search functionality
  const searchInput = windowElement.querySelector('.orders-search-input');
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();

      if (!searchTerm) {
        renderContactList();
        return;
      }

      // Filter contacts based on search term
      const filteredContacts = contacts.filter(contact =>
        contact.firstName.toLowerCase().includes(searchTerm) ||
        contact.lastName.toLowerCase().includes(searchTerm) ||
        contact.email.toLowerCase().includes(searchTerm) ||
        contact.company.toLowerCase().includes(searchTerm) ||
        contact.position.toLowerCase().includes(searchTerm) ||
        (contact.notes && contact.notes.toLowerCase().includes(searchTerm))
      );

      // Group filtered contacts by letter
      const filteredGrouped = filteredContacts.reduce((acc, contact) => {
        if (!acc[contact.letter]) acc[contact.letter] = [];
        acc[contact.letter].push(contact);
        return acc;
      }, {});

      // Save original grouped contacts
      const originalGrouped = Object.assign({}, groupedContacts);

      // Temporarily replace grouped contacts with filtered results
      Object.keys(groupedContacts).forEach(key => {
        delete groupedContacts[key];
      });

      Object.keys(filteredGrouped).forEach(key => {
        groupedContacts[key] = filteredGrouped[key];
      });

      // Render filtered list
      renderContactList();

      // Restore original grouped contacts
      Object.keys(groupedContacts).forEach(key => {
        delete groupedContacts[key];
      });

      Object.keys(originalGrouped).forEach(key => {
        groupedContacts[key] = originalGrouped[key];
      });
    });
  }
}

//Orders App Content
function setupOrdersManager(windowElement) {
  // Sidebar: do NOT set content here. Sidebar content is defined in index.html template using the generic sidebar structure.
  // Only update dynamic values (like unread counts, user name, etc.) here if needed.

  // --- Ensure sidebar toggle and overlay exist (for consistent sidebar behavior) ---
  ensureSidebarElements(windowElement);

  if (typeof window.updateSidebarForWindow === 'function') {
    window.updateSidebarForWindow(windowElement);
  }
  if (typeof attachSidebarResizeObserver === 'function') {
    attachSidebarResizeObserver(windowElement);
  }

  // Setup toolbar buttons
  const toolbarButtons = windowElement.querySelectorAll('.window-toolbar .toolbar-button');
  toolbarButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Add ripple effect
      const ripple = document.createElement('span');
      ripple.classList.add('ripple');
      button.appendChild(ripple);
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
  });

  // Single source of orders data with all fields
  const orders = [
    {
      id: 1,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      paymentStatus: 'Paid',
      shippingStatus: 'Delivered',
      type: 'eShop',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: true
    },
    {
      id: 2,
      orderNumber: 'ORD-10002',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Pending',
      paymentStatus: 'On arrival',
      shippingStatus: '-',
      notes: false,
      type: 'Booking',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: true
    },
    {
      id: 3,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Pending Payment',
      notes: false,
      type: 'Appointment',
      paymentStatus: 'PayPal',
      shippingStatus: '-',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 4,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Processing',
      notes: false,
      type: 'Ticket',
      paymentStatus: 'On arrival',
      shippingStatus: '-',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 5,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Cancelled',
      notes: 'Express delivery',
      type: 'Digital',
      paymentStatus: 'Free',
      shippingStatus: '-',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 6,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Refunded',
      notes: 'Express delivery',
      type: 'Taxi',
      paymentStatus: 'Credit Card',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 7,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Draft',
      notes: 'Express delivery',
      type: 'Food Order',
      paymentStatus: 'Crdit Card',
      shippingStatus: 'Courier',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 8,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Deleted',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 9,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 10,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 11,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Credit Card',
      shippingStatus: 'Transport',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 12,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Transport',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 13,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 14,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 15,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 16,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: true
    },
    {
      id: 17,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: true
    },
    {
      id: 18,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 19,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: true
    },
    {
      id: 20,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 21,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 22,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 23,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    },
    {
      id: 24,
      orderNumber: 'ORD-10001',
      customerName: 'Andrei Antoniade',
      firstName: 'Andrei',
      lastName: 'Alexandru',
      avatar: 'fa-shopping-bag',
      email: 'andrei@example.com',
      phone: '0732 425 448',
      company: 'Tech Solutions Inc.',
      status: 'Completed',
      notes: 'Express delivery',
      type: 'Booking',
      paymentStatus: 'Cash',
      shippingStatus: 'Local Pickup',
      favorite: true,
      letter: 'A',
      icon: 'fa-shopping-bag',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      deliveryDate: '14:20 PM',
      lastUpdate: '12:40 AM',
      city: 'Constanta',
      country: 'Romania',
      itemsCount: 7,
      totalAmount: '$ 220.2',
      isNew: false
    }
  ];

  // Group contacts by letter
  // Group orders by first letter of customer name
  // Group orders by first letter of customer name
  let groupedOrders = orders.reduce((acc, order) => {
    // Add customerName property for orders that don't have it
    if (!order.customerName && order.firstName && order.lastName) {
      order.customerName = order.firstName + ' ' + order.lastName;
    }

    // Ensure letter is set based on customer name
    if (!order.letter && order.customerName) {
      order.letter = order.customerName.charAt(0).toUpperCase();
    }

    // Add to appropriate group
    if (order.letter) {
      if (!acc[order.letter]) acc[order.letter] = [];
      acc[order.letter].push(order);
    }
    return acc;
  }, {});

  const ordersListSection = windowElement.querySelector('.orders-list-section');
  const ordersList = windowElement.querySelector('.orders-list');
  const ordersContentSection = windowElement.querySelector('.orders-content-section');
  const ordersContent = windowElement.querySelector('.orders-content-section .orders-content');
  const windowMainContent = windowElement.querySelector('.orders-manager-window');

  // Helper function to get the appropriate icon for each status
  function getStatusIcon(status) {
    switch (status) {
      case 'Completed':
        return '<i class="fas fa-check-circle status-icon"></i>';
      case 'Pending':
        return '<i class="fas fa-clock status-icon"></i>';
      case 'Pending Payment':
        return '<i class="fas fa-money-bill-wave status-icon"></i>';
      case 'Processing':
        return '<i class="fas fa-cogs status-icon"></i>';
      case 'On Hold':
        return '<i class="fas fa-pause-circle status-icon"></i>';
      case 'Cancelled':
        return '<i class="fas fa-ban status-icon"></i>';
      case 'Refunded':
        return '<i class="fas fa-undo-alt status-icon"></i>';
      case 'Draft':
        return '<i class="fas fa-pencil-alt status-icon"></i>';
      case 'Deleted':
      case 'Trash':
        return '<i class="fas fa-trash-alt status-icon"></i>';
      default:
        return '<i class="fas fa-info-circle status-icon"></i>';
    }
  }

  // Helper function to get the appropriate icon for each status
  function getOrderTypeIcon(type) {
    switch (type) {
      case 'eShop':
        return '<i class="fas fa-cart-shopping ordertype-icon"></i>';
      case 'Booking':
        return '<i class="fas fa-hotel ordertype-icon"></i>';
      case 'Appointment':
        return '<i class="fas fa-calendar ordertype-icon"></i>';
      case 'Food Order':
        return '<i class="fas fa-utensils ordertype-icon"></i>';
      case 'Ticket':
        return '<i class="fas fa-ticket ordertype-icon"></i>';
      case 'Digital':
        return '<i class="fas fa-floppy-disk ordertype-icon"></i>';
      case 'Donation':
        return '<i class="fas fa-circle-dollar-to-slot ordertype-icon"></i>';
      case 'Subscription':
        return '<i class="fas fa-clipboard-check ordertype-icon"></i>';
      case 'Taxi':
        return '<i class="fas fa-taxi ordertype-icon"></i>';
      default:
        return '<i class="fas fa-info-circle ordertype-icon"></i>';
    }
  }

  // Initialize the layout and render the orders list
  initializeOrdersAppLayout();
  renderOrdersList();

  // Initialize desktop layout (orders list takes full width, content section hidden)
  function initializeOrdersAppLayout() {
    // Desktop layout setup:
    // 1. Hide content section initially
    if (ordersContentSection) {
      ordersContentSection.style.visibility = 'hidden';
      ordersContentSection.style.display = 'none';
    }

    // 2. Make orders list section take 100% width
    if (ordersListSection) {
      ordersListSection.style.width = '100%';
    }

    // 3. Show table header by default
    const tableHeader = windowElement.querySelector('.orders-list-table-header');
    if (tableHeader) {
      tableHeader.style.display = '';
    }

    // Make sure orders list is visible
    if (ordersList) {
      ordersList.style.display = '';
    }
  }

  function renderOrdersList(selectedId) {
    if (!ordersList) return;
    ordersList.innerHTML = '';

    // If there's no selected order and we're not in mobile mode, show a table view
    if ((typeof selectedId === 'undefined' || selectedId === null) && !isMobileOrdersApp()) {
      // Make sure orders content section is hidden
      if (ordersContentSection) {
        ordersContentSection.style.visibility = 'hidden';
        ordersContentSection.style.display = 'none';
      }

      // Make orders list section take 100% width and add table-mode class
      if (ordersListSection) {
        ordersListSection.style.width = '100%';
        ordersListSection.classList.add('table-mode');
        ordersListSection.classList.remove('orders-selected-mode');
      }

      // Use the unified orders data for the table view
      // Create a table row for each order
      orders.forEach(order => {
        const li = document.createElement('li');
        li.className = `orders-list-item order-item-status-${order.status.toLowerCase().replace(/\s+/g, '-')} orders-table-row`;

        const bgColor = `rgba(${parseInt(order.color.slice(1, 3), 16)},${parseInt(order.color.slice(3, 5), 16)},${parseInt(order.color.slice(5, 7), 16)},0.1)`;

        li.innerHTML = `
          <div style="display: flex; width: 100%; align-items: center; padding: 10px 14px;">
            <div style="width: 32px; min-width: 32px; display: flex; justify-content: center;">
              ${order.isNew ? '<div style="width: 8px; height: 8px; border-radius: 50%; background-color: var(--accent-color);"></div>' : ''}
            </div>
            <div style="flex: 1; display: flex; align-items: center; gap: 10px;">
<input type="checkbox" id="orders-select-all-box" name="orders-select-all-box" />
              <span class="orders-list-order-number" style="flex: 1.2;">${order.orderNumber}</span>
            </div>
            
            <div style="flex: 1.6; display: flex; align-items: center; gap: 10px;" class="orders-list-customer-name">
                          <div class="order-list-avatar" style="color:${order.color};background-color:${bgColor}">
                <i class="fas ${order.icon}"></i></div>
            
            ${order.firstName} ${order.lastName}</div>
            <div style="flex: 1;">${order.creationDate}</div>
            <div style="flex: 1;"><span class="status-badge status-${order.status.toLowerCase().replace(/\s+/g, '-')}">${getStatusIcon(order.status)} <div class="order-status-list-view">${order.status}</div></span></div>
                        <div style="flex: 1;"><span class="order-type-badge status-${order.type.toLowerCase().replace(/\s+/g, '-')}">${getOrderTypeIcon(order.type)} <div class="order-status-list-view">${order.type}</div></span></div>

            <div style="flex: 1;">${order.paymentStatus}</div>
            <div style="flex: 1;">${order.shippingStatus}</div>

            <div class="orders-list-total-amount">${order.totalAmount}</div>
            <div style="width: 20px; min-width: 20px;"></div>
          </div>
        `;

        li.onclick = () => {
          // When a row is clicked, use the order's ID to load the detail view
          renderOrdersList(order.id);
        };

        ordersList.appendChild(li);
      });

      return;
    }

    // If selectedId is provided, render the regular orders list view
    Object.keys(groupedOrders).sort().forEach(letter => {


      groupedOrders[letter].forEach(order => {
        const li = document.createElement('li');
        li.className = `orders-list-item order-item-status-${order.status.toLowerCase().replace(/\s+/g, '-')}` + (order.id === selectedId ? ' selected' : '') + (order.favorite ? ' favorite' : '');

        li.innerHTML = `
        <div class="orders-list-avatar" style="color:${order.color};background-color:rgba(${parseInt(order.color.slice(1, 3), 16)},${parseInt(order.color.slice(3, 5), 16)},${parseInt(order.color.slice(5, 7), 16)},0.1)"><i class="fas ${order.icon}"></i></div>
        <div class="orders-list-info">
          <div class="orders-list-name" style="display: flex; align-items: center; gap: 10px;"> ${order.isNew ? '<div style="width: 8px; height: 8px; border-radius: 50%; background-color: var(--accent-color);"></div>' : ''}${order.firstName} ${order.lastName}</div>
          <div class="orders-list-details"><span class="order-type-badge status-${order.type.toLowerCase().replace(/\s+/g, '-')}">${getOrderTypeIcon(order.type)}</span>${order.orderNumber} <span class="status-badge status-${order.status.toLowerCase().replace(/\s+/g, '-')}">${getStatusIcon(order.status)} <div class="order-status-list-view">${order.status}</div></span>            ${order.notes ? '<i class="fas fa-sticky-note"></i>' : ''}</div>
        </div>
        <div class="orders-list-meta">
          <div class="orders-list-total-amount">${order.totalAmount}</div>
          <div class="orders-list-date">${order.creationDate}</div>

        </div>
        `;

        li.onclick = () => {
          console.log('Order clicked:', order.id, order.orderNumber, order.customerName);

          // On mobile, we need to use the patched renderOrdersList which will handle
          // showing the content panel after rendering the content
          renderOrdersList(order.id);

          // On desktop or when the patched renderOrdersList isn't in effect yet,
          // we need to render the content directly
          if (!isMobileOrdersApp()) {
            renderOrdersContent(order);
          }
        };

        li.ondblclick = () => {
          // Generate a unique window ID for each order content popout
          let ordersContentWindowCount = 1;
          while (openWindows[`orders-content-window-${ordersContentWindowCount}`]) {
            ordersContentWindowCount++;
          }
          const windowId = `orders-content-window-${ordersContentWindowCount}`;

          const ordersContentWindow = createWindowFromTemplate('orders-content-window', windowId, false);
          if (!ordersContentWindow) return;
          
          // Add simple opening animation
          ordersContentWindow.classList.add('window-anim-open');

          // Inject the full orders-content-section structure
          const content = ordersContentWindow.querySelector('.orders-content-body');
          if (!content) return;

          content.innerHTML = `
          <section class="orders-content-section">
            <div class="window-toolbar">
              <div class="toolbar-buttons-left">
                <button class="toolbar-button" title="Notes"><i class="fas fa-clipboard-list"></i><span>Add Note</span></button>
                <button class="toolbar-button" title="Shipping"><i class="fas fa-shipping-fast"></i><span>Shipping</span></button>
                <button class="toolbar-button" title="Invoice"><i class="fas fa-file-invoice"></i><span>Invoice</span></button>
                <button class="toolbar-button" title="Order log"><i class="fas fa-history"></i><span>Order log</span></button>
                                <button class="toolbar-button orders-delete-button"><i class="fas fa-trash"></i></button>

              </div>
              <div class="toolbar-buttons-right">
                <div class="order-assign">
                  <span>Assign agent</span>
                  <button class="assign-agent-btn">Alina Caramitru <i class="fas fa-chevron-down"></i></button>
                </div>
              </div>
            </div>
            
            <div class="orders-content">
              ${getOrdersContentHTML(order)}
            </div>
          </section>
          `;

          // Setup back button in the popout window
          const backButton = content.querySelector('.orders-back-button');
          if (backButton) {
            backButton.addEventListener('click', () => {
              const closeButton = ordersContentWindow.querySelector('.window-close');
              if (closeButton) closeButton.click();
            });
          }

          // Setup status dropdown functionality for the popup window
          const statusButton = content.querySelector('.order-status-button');
          const statusDropdown = content.querySelector('.order-status-dropdown');

          if (statusButton && statusDropdown) {
            // Initially hide the dropdown
            statusDropdown.style.display = 'none';

            // Apply dropdown styles
            statusDropdown.style.position = 'absolute';
            statusDropdown.style.zIndex = '1000';
            statusDropdown.style.backgroundColor = '#EBF5FF';
            statusDropdown.style.borderRadius = '16px';
            statusDropdown.style.boxShadow = '0 4px 16px rgba(0,0,0,0.15)';
            statusDropdown.style.padding = '1px 0';
            statusDropdown.style.maxHeight = 'max-content';
            statusDropdown.style.overflowY = 'auto';
            statusDropdown.style.border = '1px solid var(--border-color, #e1e1e1)';
            statusDropdown.style.borderTop = 'none';
            statusDropdown.style.marginTop = '-77px';
            statusDropdown.style.width = '220px';

            // Apply styles to dropdown options
            const dropdownOptionElements = statusDropdown.querySelectorAll('.dropdown-option');
            dropdownOptionElements.forEach(option => {
              option.style.padding = '8px 18px';
              option.style.display = 'flex';
              option.style.alignItems = 'center';
              option.style.gap = '10px';
              option.style.cursor = 'pointer';
              option.style.transition = 'background-color 0.2s ease';
              option.style.borderRadius = '8px';
              option.style.margin = '3px 5px';

              const status = option.getAttribute('data-status');
              option.classList.add(`status-${status.toLowerCase().replace(/\s+/g, '-')}`);

              option.addEventListener('mouseover', () => {
                option.style.backgroundColor = 'var(--accent-color)';
                option.style.color = '#fff';
              });

              option.addEventListener('mouseout', () => {
                option.style.backgroundColor = '';
                option.style.color = '';
              });
            });

            // Toggle dropdown on button click
            statusButton.addEventListener('click', (e) => {
              if (statusDropdown.style.display === 'none') {
                // Position the dropdown directly beneath the button
                const buttonRect = statusButton.getBoundingClientRect();
                const windowRect = ordersContentWindow.getBoundingClientRect();
                const orderStatusContainer = content.querySelector('.order-status-container');

                // Calculate position relative to the window
                statusDropdown.style.top = (buttonRect.bottom - windowRect.top) + 'px';

                // Ensure dropdown is aligned with the button's container instead of the button itself
                if (orderStatusContainer) {
                  const containerRect = orderStatusContainer.getBoundingClientRect();
                  statusDropdown.style.right = (windowRect.right - containerRect.right) + 'px';
                  statusDropdown.style.left = 'auto';
                } else {
                  // Fallback if container not found
                  statusDropdown.style.right = (windowRect.right - buttonRect.right) + 'px';
                  statusDropdown.style.left = 'auto';
                }

                // Setup animation starting state
                statusDropdown.style.opacity = '0';
                statusDropdown.style.display = 'block';

                // Force reflow to ensure animation works
                statusDropdown.offsetHeight;

                // Add animation
                statusDropdown.style.transition = 'opacity 0.2s ease-out, transform 0.2s ease-out';
                statusDropdown.style.opacity = '1';
                statusDropdown.classList.add('dropdown-anim-in');
              } else {
                // Animate out
                statusDropdown.style.opacity = '0';

                // Hide after animation completes
                setTimeout(() => {
                  statusDropdown.style.display = 'none';
                  statusDropdown.style.transform = '';
                }, 200);
              }
              e.stopPropagation();
            });

            // Close dropdown when clicking elsewhere
            document.addEventListener('click', (e) => {
              if (statusDropdown.style.display === 'block' && !statusDropdown.contains(e.target) && e.target !== statusButton) {
                // Animate out
                statusDropdown.style.opacity = '0';

                // Hide after animation completes
                setTimeout(() => {
                  statusDropdown.style.display = 'none';
                  statusDropdown.style.transform = '';
                }, 200);
              }
            });

            // Handle status option selection
            const dropdownOptions = statusDropdown.querySelectorAll('.dropdown-option');
            dropdownOptions.forEach(option => {
              option.addEventListener('click', () => {
                const newStatus = option.getAttribute('data-status');
                const oldStatus = order.status;

                if (newStatus !== oldStatus) {
                  // Create confirmation overlay
                  const overlay = document.createElement('div');
                  overlay.className = 'confirmation-overlay';
                  overlay.innerHTML = `
                    <div class="confirmation-dialog">
                      <h3>Update Order Status</h3>
                      <p>Change order status from "${oldStatus}" to "${newStatus}"?</p>
                      <div class="confirmation-options">
                        <label><input type="checkbox" checked> Send email notification to customer</label>
                        <label><input type="checkbox"> Add internal note</label>
                      </div>
                      <div class="confirmation-buttons">
                        <button class="cancel-button">Cancel</button>
                        <button class="confirm-button">Update Status</button>
                      </div>
                    </div>
                  `;

                  // Add to DOM
                  document.body.appendChild(overlay);

                  // Add styles
                  overlay.style.position = 'fixed';
                  overlay.style.top = '0';
                  overlay.style.left = '0';
                  overlay.style.width = '100%';
                  overlay.style.height = '100%';
                  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
                  overlay.style.display = 'flex';
                  overlay.style.justifyContent = 'center';
                  overlay.style.alignItems = 'center';
                  overlay.style.zIndex = '9999';

                  const dialog = overlay.querySelector('.confirmation-dialog');
                  dialog.style.backgroundColor = 'var(--window-content-bg)';
                  dialog.style.padding = '24px';
                  dialog.style.borderRadius = '16px';
                  dialog.style.width = '400px';
                  dialog.style.boxShadow = '0 8px 24px rgba(0, 0, 0, 0.2)';

                  // Setup buttons
                  const cancelButton = overlay.querySelector('.cancel-button');
                  const confirmButton = overlay.querySelector('.confirm-button');

                  cancelButton.addEventListener('click', () => {
                    overlay.style.opacity = '0';
                    setTimeout(() => overlay.remove(), 300);
                  });

                  confirmButton.addEventListener('click', () => {
                    // Update the order's status
                    order.status = newStatus;

                    // Update UI
                    const statusBadge = content.querySelector('.order-status-badge');
                    if (statusBadge) {
                      statusBadge.className = `order-status-badge status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`;
                      statusBadge.innerHTML = `${getStatusIcon(newStatus)} <span>${newStatus}</span>`;
                    }

                    // Update the list item if it's visible
                    const orderItem = windowElement.querySelector(`.orders-list-item[data-id="${order.id}"] .status-badge`);
                    if (orderItem) {
                      orderItem.className = `status-badge status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`;
                      orderItem.innerHTML = `${getStatusIcon(newStatus)} <span>${newStatus}</span>`;
                    }

                    overlay.style.opacity = '0';
                    setTimeout(() => overlay.remove(), 300);

                    // Add ripple effect to selected option
                    const ripple = document.createElement('span');
                    ripple.classList.add('ripple');
                    option.appendChild(ripple);
                    setTimeout(() => {
                      ripple.remove();
                    }, 600);

                    // Close the dropdown with animation
                    statusDropdown.style.opacity = '0';
                    statusDropdown.style.transform = 'translateY(-10px)';

                    // Hide after animation completes
                    setTimeout(() => {
                      statusDropdown.style.display = 'none';
                      statusDropdown.style.transform = '';
                    }, 200);
                  });
                }
                else {
                  // If status hasn't changed, just close the dropdown
                  statusDropdown.style.opacity = '0';
                  statusDropdown.style.transform = 'translateY(-10px)';

                  // Hide after animation completes
                  setTimeout(() => {
                    statusDropdown.style.display = 'none';
                    statusDropdown.style.transform = '';
                  }, 200);
                }
              });
            });
          }

          // Setup edit button
          const editButton = content.querySelector('.orders-edit-button');
          if (editButton) {
            editButton.addEventListener('click', () => {
              showEditOrdersForm(order, content);
            });
          }

          // Setup delete button
          const deleteButton = content.querySelector('.orders-delete-button');
          if (deleteButton) {
            deleteButton.addEventListener('click', () => {
              // Show confirmation dialog
              const confirmMessage = `Are you sure you want to delete order ${order.orderNumber}?`;
              if (confirm(confirmMessage)) {
                // Remove order from data
                const index = orders.findIndex(o => o.id === order.id);
                if (index !== -1) {
                  orders.splice(index, 1);

                  // Close the window
                  const closeButton = ordersContentWindow.querySelector('.window-close');
                  if (closeButton) closeButton.click();

                  // Update the main orders list if visible
                  renderOrdersList();
                }
              }
            });
          }

          // Setup more options button
          const moreButton = content.querySelector('.orders-more-button');
          if (moreButton) {
            moreButton.addEventListener('click', (e) => {
              showOrdersMoreOptions(e.target, order);
            });
          }

          // Register the window in openWindows and show taskbar icon
          const iconClass = 'fa-shopping-bag';
          const iconBgClass = 'green-icon';
          const appTitle = `Order: ${order.orderNumber}`;
          openWindows[windowId] = {
            element: ordersContentWindow,
            name: 'orders-content',
            title: appTitle,
            iconClass: iconClass,
            iconBgClass: iconBgClass,
            appTitle: appTitle
          };

          // Update the window title with the order number
          const titleSpan = ordersContentWindow.querySelector('.window-title span');
          if (titleSpan) {
            titleSpan.textContent = `Order: ${order.orderNumber}`;
          }
          makeWindowActive(ordersContentWindow);
          renderPinnedTaskbarIcons();
        };
        ordersList.appendChild(li);
      });
    });
  }

  function renderOrdersContent(order) {
    if (!ordersContentSection || !ordersContent) return;

    // When an order is selected, make the content section visible
    if (!isMobileOrdersApp()) {
      if (ordersContentSection) {
        ordersContentSection.style.visibility = 'visible';
        ordersContentSection.style.display = '';
      }

      // Restore orders list section width and update classes
      if (ordersListSection) {
        ordersListSection.style.width = '390px';
        ordersListSection.classList.remove('table-mode');
        ordersListSection.classList.add('orders-selected-mode');
      }

      // Hide table header
      const tableHeader = windowElement.querySelector('.orders-list-table-header');
      if (tableHeader) {
        tableHeader.style.display = 'none';
      }
    }

    ordersContent.innerHTML = getOrdersContentHTML(order);

    // Setup status dropdown functionality
    const statusButton = windowElement.querySelector('.order-status-button');
    const statusDropdown = windowElement.querySelector('.order-status-dropdown');

    if (statusButton && statusDropdown) {
      // Initially hide the dropdown
      statusDropdown.style.display = 'none';

      // Apply dropdown styles
      statusDropdown.style.position = 'absolute';
      statusDropdown.style.zIndex = '1000';
      statusDropdown.style.backgroundColor = '#EBF5FF';
      statusDropdown.style.borderRadius = '16px'; // Rounded only on bottom corners
      statusDropdown.style.boxShadow = '0 4px 16px rgba(0,0,0,0.15)';
      statusDropdown.style.padding = '1px 0';
      statusDropdown.style.maxHeight = 'max-content';
      statusDropdown.style.overflowY = 'auto';
      statusDropdown.style.border = '1px solid var(--border-color, #e1e1e1)';
      statusDropdown.style.borderTop = 'none'; // Remove top border to connect with button
      statusDropdown.style.marginTop = '-75px'; // No gap between button and dropdown
      statusDropdown.style.width = '220px';

      // Apply styles to dropdown options
      const dropdownOptionElements = statusDropdown.querySelectorAll('.dropdown-option');
      dropdownOptionElements.forEach(option => {
        option.style.padding = '8px 16px';
        option.style.cursor = 'pointer';
        option.style.display = 'flex';
        option.style.alignItems = 'center';
        option.style.gap = '10px';
        option.style.transition = 'background-color 0.2s';
        option.style.color = '#333';
        option.style.fontWeight = '600';
        option.style.borderRadius = '16px';
        option.style.height = '35px';

        // Add hover effect
        option.addEventListener('mouseenter', () => {
          option.style.backgroundColor = 'var(--accent-color)';
          option.style.color = '#fff';
          option.querySelector('i').style.color = '#fff !important';
        });
        option.addEventListener('mouseleave', () => {
          option.style.backgroundColor = '';
          option.style.color = '#333';
          option.querySelector('i').style.color = 'var(--accent-color)';
        });
      });

      // Toggle dropdown on button click
      statusButton.addEventListener('click', (e) => {
        if (statusDropdown.style.display === 'none') {
          // Position the dropdown directly beneath the button
          const buttonRect = statusButton.getBoundingClientRect();
          const windowRect = windowElement.getBoundingClientRect();
          const orderStatusContainer = windowElement.querySelector('.order-status-container');

          // Calculate position relative to the window
          statusDropdown.style.top = (buttonRect.bottom - windowRect.top) + 'px';

          // Ensure dropdown is aligned with the button's container instead of the button itself
          if (orderStatusContainer) {
            const containerRect = orderStatusContainer.getBoundingClientRect();
            statusDropdown.style.right = (windowRect.right - containerRect.right) + 'px';
            statusDropdown.style.left = 'auto';
          } else {
            // Fallback if container not found
            statusDropdown.style.right = (windowRect.right - buttonRect.right) + 'px';
            statusDropdown.style.left = 'auto';
          }

          // Setup animation starting state
          statusDropdown.style.opacity = '0';
          statusDropdown.style.display = 'block';

          // Force reflow to ensure animation works
          statusDropdown.offsetHeight;

          // Add animation
          statusDropdown.style.transition = 'opacity 0.2s ease-out, transform 0.2s ease-out';
          statusDropdown.style.opacity = '1';
          statusDropdown.classList.add('dropdown-anim-in');
        } else {
          // Animate out
          statusDropdown.style.opacity = '0';

          // Hide after animation completes
          setTimeout(() => {
            statusDropdown.style.display = 'none';
            statusDropdown.style.transform = '';
          }, 200);
        }
        e.stopPropagation();
      });

      // Close dropdown when clicking elsewhere
      document.addEventListener('click', (e) => {
        if (statusDropdown.style.display === 'block' && !statusDropdown.contains(e.target) && e.target !== statusButton) {
          // Animate out
          statusDropdown.style.opacity = '0';

          // Hide after animation completes
          setTimeout(() => {
            statusDropdown.style.display = 'none';
            statusDropdown.style.transform = '';
          }, 200);
        }
      });

      // Handle status option selection
      const dropdownOptions = statusDropdown.querySelectorAll('.dropdown-option');
      dropdownOptions.forEach(option => {
        option.addEventListener('click', () => {
          const newStatus = option.getAttribute('data-status');
          const oldStatus = order.status;

          if (newStatus !== oldStatus) {
            // Show confirmation dialog
            const alertDialog = document.createElement('div');
            alertDialog.className = 'alert-dialog desktop-alert-dialog';
            alertDialog.innerHTML = `
            
              <div class="alert-dialog-container">
                        <div class="alert-icon"><i class="fas fa-repeat"></i></div>

                <div class="alert-dialog-header">
                  <div class="alert-title">Change status to ${newStatus}</div>
                </div>
                <div class="alert-dialog-content">
                  <div class="alert-message">Are you sure you want to change order status to ${newStatus}?</div>
                  <div class="alert-dialog-options">
                    <label class="alert-dialog-checkbox">
                      <input type="checkbox" id="send-email-checkbox"> Send email to customer
                    </label>
                    <label class="alert-dialog-checkbox">
                      <input type="checkbox" id="remember-answer-checkbox"> Remember answer and don't ask me again
                    </label>
                  </div>
                </div>
                <div class="alert-actions">
                  <button class="alert-btn alert-cancel desktop-alert-cancel">Cancel</button>
                  <button class="alert-btn alert-ok desktop-alert-ok">Confirm</button>
                </div>
              </div>
            `;

            // Add overlay for center positioning
            const overlay = document.createElement('div');
            overlay.className = 'desktop-alert-overlay';
            overlay.style.position = 'fixed';
            overlay.style.top = '0';
            overlay.style.left = '0';
            overlay.style.right = '0';
            overlay.style.bottom = '0';
            overlay.style.display = 'flex';
            overlay.style.alignItems = 'center';
            overlay.style.justifyContent = 'center';
            overlay.style.zIndex = '9999';
            overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';

            // Ensure the dialog itself maintains its original styling
            alertDialog.style.position = 'relative';
            alertDialog.style.margin = 'auto';

            // Place the dialog inside the overlay
            document.body.appendChild(overlay);
            overlay.appendChild(alertDialog);

            // Animation
            overlay.style.opacity = '0';
            alertDialog.style.transform = 'scale(0.95)';
            setTimeout(() => {
              overlay.style.opacity = '1';
              alertDialog.style.transform = 'scale(1)';
            }, 10);

            // Handle close button
            const closeButton = alertDialog.querySelector('.alert-dialog-close');
            if (closeButton) {
              closeButton.addEventListener('click', () => {
                overlay.style.opacity = '0';
                alertDialog.style.transform = 'scale(0.95)';
                setTimeout(() => {
                  overlay.remove();
                }, 300);
              });
            }

            // Handle cancel button
            const cancelButton = alertDialog.querySelector('.alert-dialog-cancel');
            if (cancelButton) {
              cancelButton.addEventListener('click', () => {
                overlay.style.opacity = '0';
                alertDialog.style.transform = 'scale(0.95)';
                setTimeout(() => {
                  overlay.remove();
                }, 300);
              });
            }

            // Handle confirm button
            const confirmButton = alertDialog.querySelector('.alert-dialog-confirm');
            if (confirmButton) {
              confirmButton.addEventListener('click', () => {
                // Get checkbox values
                const sendEmail = alertDialog.querySelector('#send-email-checkbox').checked;
                const rememberAnswer = alertDialog.querySelector('#remember-answer-checkbox').checked;

                // Update order status
                order.status = newStatus;

                // Update badge in the button
                const statusBadge = statusButton.querySelector('.order-status-badge');
                if (statusBadge) {
                  statusBadge.className = `order-status-badge status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`;
                  statusBadge.innerHTML = `${getStatusIcon(newStatus)} <span>${newStatus}</span>`;
                }

                // Update orders list
                renderOrdersList(order.id);

                // If sendEmail is checked, we would typically send an email here
                // This is just a placeholder
                if (sendEmail) {
                  console.log(`Would send email to ${order.email} about status change to ${newStatus}`);
                }

                // If rememberAnswer is checked, we would store this preference
                // This is just a placeholder
                if (rememberAnswer) {
                  // In a real implementation, this would store the preference
                  console.log(`Remember not to ask again for status changes to ${newStatus}`);
                  // For demo purposes, we could store this in localStorage
                  localStorage.setItem('dontAskStatusChange', 'true');
                }

                // Close dialog
                overlay.style.opacity = '0';
                alertDialog.style.transform = 'scale(0.95)';
                setTimeout(() => {
                  overlay.remove();
                }, 300);

                // Add ripple effect to selected option
                const ripple = document.createElement('span');
                ripple.classList.add('ripple');
                option.appendChild(ripple);
                setTimeout(() => {
                  ripple.remove();
                }, 600);

                // Close the dropdown with animation
                statusDropdown.style.opacity = '0';
                statusDropdown.style.transform = 'translateY(-10px)';

                // Hide after animation completes
                setTimeout(() => {
                  statusDropdown.style.display = 'none';
                  statusDropdown.style.transform = '';
                }, 200);
              });
            }
          } else {
            // If status hasn't changed, just close the dropdown
            statusDropdown.style.opacity = '0';
            statusDropdown.style.transform = 'translateY(-10px)';

            // Hide after animation completes
            setTimeout(() => {
              statusDropdown.style.display = 'none';
              statusDropdown.style.transform = '';
            }, 200);
          }
        });
      });
    }

    // Setup edit button
    const editButton = windowElement.querySelector('.orders-edit-button');
    if (editButton) {
      editButton.addEventListener('click', () => {
        showEditOrdersForm(order, windowElement);
      });
    }

    // Setup delete button
    const deleteButton = windowElement.querySelector('.orders-delete-button');
    if (deleteButton) {
      deleteButton.addEventListener('click', () => {
        // Show confirmation dialog
        const confirmMessage = `Are you sure you want to delete order ${order.orderNumber}?`;
        if (confirm(confirmMessage)) {
          // Remove order from data
          const index = orders.findIndex(o => o.id === order.id);
          if (index !== -1) {
            orders.splice(index, 1);

            // Rebuild grouped orders
            const groupedOrders = orders.reduce((acc, order) => {
              if (!acc[order.letter]) acc[order.letter] = [];
              acc[order.letter].push(order);
              return acc;
            }, {});

            // Render updated list and clear content area
            renderOrdersList();
            if (ordersContent) {
              ordersContent.innerHTML = '<div class="no-order-selected">No order selected</div>';
            }
            // Hide the content section
            if (ordersContentSection) {
              ordersContentSection.style.visibility = 'hidden';
              ordersContentSection.style.display = 'none';
            }
          }
        }
      });
    }

    // Setup more options button
    const moreButton = windowElement.querySelector('.orders-more-button');
    if (moreButton) {
      moreButton.addEventListener('click', (e) => {
        showOrdersMoreOptions(e.target, order);
      });
    }
  }

  function getOrdersContentHTML(order) {
    return `
            <!-- Order content based on the image -->
            <div class="orders-content-wrapper">
              <div class="order-header">

                <div class="order-id-and-time">
                                <div class="order-id">Order #CMD2574 details</div>
                                <div class="order-created-and-modified">
                <div class="order-created">Created: 17 April 2025 23:36:56</div>
                <div class="order-modified">Last edit: 24 April 2025 23:36:56</div>
                </div>
                </div>
                                              <div class="order-status-container">
                    <div class="order-status-text">Order status</div>
                    <div class="order-status-button"> 
                      <div class="order-status-badge status-${order.status.toLowerCase().replace(/\s+/g, '-')}">
                        ${getStatusIcon(order.status)} 
                        <span>${order.status}</span> 
                      </div>
                      <i class="fas fa-chevron-down"></i>
                    </div>
                    <div class="order-status-dropdown">

                      <div class="dropdown-option status-pending" data-status="Pending">
                        ${getStatusIcon('Pending')} <span>Pending</span>
                      </div>
                      <div class="dropdown-option status-pending-payment" data-status="Pending Payment">
                        ${getStatusIcon('Pending Payment')} <span>Pending Payment</span>
                      </div>
                      <div class="dropdown-option status-processing" data-status="Processing">
                        ${getStatusIcon('Processing')} <span>Processing</span>
                      </div>
                      <div class="dropdown-option status-on-hold" data-status="On Hold">
                        ${getStatusIcon('On Hold')} <span>On Hold</span>
                      </div>
                      <div class="dropdown-option status-cancelled" data-status="Cancelled">
                        ${getStatusIcon('Cancelled')} <span>Cancelled</span>
                      </div>
                      <div class="dropdown-option status-refunded" data-status="Refunded">
                        ${getStatusIcon('Refunded')} <span>Refunded</span>
                      </div>
                                            <div class="dropdown-option status-completed" data-status="Completed">
                        ${getStatusIcon('Completed')} <span>Completed</span>
                      </div>
                    </div>
                  </div>


              </div>
              <div class="detail-section customer-info-with-invoice">

                    <div class="customer-info ">
                      <div class="customer-avatar">
                        <img src="img//avatar.png" alt="Customer Avatar">
                      </div>
                         <div class="customer-details-first-last-name">
        <div class="customer-details">
                      
            <h3>First name</h3>
            <div class="customer-name">${order.firstName}
			</div>
        </div>
        <div class="customer-details">
            <h3>Last Name</h3>
            <div class="customer-name">${order.lastName}
			</div>
        </div>
		</div>
                    </div>

                         <div class="customer-invoice">
                <div class="invoice-icon"><i class="fas fa-file-invoice"></i></div>
                <div class="invoice-text-wrapper">
                  <div class="invoice-text-title">Invoice</div>
                  <div class="invoice-text">INOICE #234423232.</div>
                </div>
              </div>

                  </div>



              <div class="order-details-container">
              
                <div class="order-customer-details">
                  
                  
                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-envelope"></i>
                    <h3>Email Address</h3></div>
                    <div class="detail-value email-address">justmearg@yahoo.com</div>
                  </div>
                  
                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-phone"></i>
                    <h3>Phone number</h3></div>
                    <div class="detail-value">0732 743 284 <i class="fab fa-whatsapp"></i></div>
                  </div>
                  
                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-calendar-alt"></i>
                    <h3>Registered</h3></div>
                    <div class="detail-value">2 weeks ago</div>
                  </div>

                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-shopping-cart"></i>
                    <h3>Total orders</h3></div>
                    <div class="detail-value">10 orders - $ 2,545.76</div>
                  </div>

                </div>

                <div class="order-payment-details">
                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-credit-card"></i>
                    <h3>Payment</h3></div>
                    <div class="detail-value">Credit Card</div>
                  </div>
                  
                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-globe"></i>
                    <h3>IP Address</h3></div>
                    <div class="detail-value">5.14.184.112</div>
                  </div>
                  
                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-store"></i>
                    <h3>Channel</h3></div>
                    <div class="detail-value">Website / eMag etc</div>
                  </div>

                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-building"></i>
                    <h3>Billing</h3></div>
                    <div class="detail-value">Company</div>
                  </div>
                </div>
                
                <div class="order-billing-details">
                  <div class="detail-section">
                                                          <div class="detail-section-header">
                  <i class="fas fa-address-card"></i>
                    <h3>Billing Address</h3></div> 
                    <div class="detail-value">Fresh Media SRL</div>
                    <div class="detail-value">+40 721 182 557</div>
                    <div class="detail-value">VAT: RO43425589</div>
                    <div class="detail-value">J13/232/2023</div>
                    <div class="detail-value">Aleea Stefan cel Mare</div>
                    <div class="detail-value">Bloc M25, parter</div>
                    <div class="detail-value-with-flag"><span class="flag-icon flag-ro"></span> Romania</div>
                    <div class="detail-value">Constanta</div>
                    <div class="detail-value">Constanta, 400202</div>
                  </div>
                </div>
                
                <div class="order-shipping-details">
                  <div class="detail-section">
                                      <div class="detail-section-header">
                  <i class="fas fa-truck"></i>
                    <h3>Delivery Address<i class="fas fa-pen"></i></h3></div> 
                    <div class="detail-value">Argenti Radu</div>
                    <div class="detail-value">+40 721 182 557</div>
                    <div class="detail-value">Aleea Aman Theodor, B1</div>
                    <div class="detail-value">Bloc M25, parter</div>
                    <div class="detail-value-with-flag"><span class="flag-icon flag-ro"></span> Romania</div>
                    <div class="detail-value">Cluj-Napoca</div>
                    <div class="detail-value">Cluj, 400202</div>
                    <div class="map-link"><a href="#">View on map <i class="fas fa-chevron-right"></i></a></div>
                  </div>
                </div>
                
                
              </div>
              
              <div class="customer-note">
                <div class="note-icon"><i class="fas fa-info-circle"></i></div>
                <div class="note-text-wrapper">
                  <div class="note-text-title">Customer Note</div>
                  <div class="note-text">Va rog frumos sa luati in considerare aceasta nota a clientului prin care adauga acest text ca exemplu.</div>
                </div>
              </div>
              
              <div class="order-items">
                <table class="order-items-table">
                  <thead>
                    <tr>
                      <th>#</th>
                      <th>SKU</th>
                      <th>Name</th>
                      <th>Price</th>
                      <th>Qty</th>
                      <th>Disc.</th>
                      <th>Total</th>
                      <th></th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>
                        <div class="product-image">
                          <img src="img/appsimg/router.png" alt="Router">
                        </div>
                      </td>
                      <td>382934</td>
                      <td>NETGEAR R6700 Nighthawk AC1750 Dual Band</td>
                      <td>$99.00</td>
                      <td>× 1</td>
                      <td>5%</td>
                      <td>$88.80</td>
                      <td><button class="item-options-btn"><i class="fas fa-ellipsis-h"></i></button></td>
                    </tr>
                    <tr>
                      <td>
                        <div class="product-image">
                          <img src="img/appsimg/camera.png" alt="Camera">
                        </div>
                      </td>
                      <td>382955</td>
                      <td>Arlo Technologies NETGEAR Baby Monitor</td>
                      <td>$19.00</td>
                      <td>× 2</td>
                      <td>—</td>
                      <td>$38.00</td>
                      <td><button class="item-options-btn"><i class="fas fa-ellipsis-h"></i></button></td>
                    </tr>
                  </tbody>
                </table>
                
                <div class="order-totals">
                  <div class="total-row">
                    <div class="total-label">Subtotal</div>
                    <div class="total-value">$132.00</div>
                  </div>
                  <div class="total-row">
                    <div class="total-label">Shipping</div>
                    <div class="total-value">$2.00</div>
                  </div>
                  <div class="total-row">
                    <div class="total-label">Discount</div>
                    <div class="total-value">$11.00</div>
                  </div>
                  <div class="total-row final-total">
                    <div class="total-label">Total</div>
                    <div class="total-value">$134.00</div>
                  </div>
                </div>
              </div>


                            <div class="generate-invoice">
                            <div class="invoice-header">
                <div class="invoice-icon"><i class="fas fa-file-invoice"></i></div>
                <div class="invoice-text-wrapper">
                  <div class="invoice-text-title">Generate Invoice</div>
                  <div class="invoice-text">Va rog frumos sa luati in considerare aceasta nota a clientului prin care adauga acest text ca exemplu.</div>
                </div>
                </div>
                <div class="invoice-button">
                  <button class="invoice-button-text">Generate Invoice</button>
                </div>
              </div>


                         <div class="generate-shipping">
                            <div class="shipping-header">
                <div class="shipping-icon"><i class="fas fa-shipping-fast"></i></div>
                <div class="shipping-text-wrapper">
                  <div class="shipping-text-title">Generate Shipping Label</div>
                  <div class="shipping-text">Va rog frumos sa luati in considerare aceasta nota a clientului prin care adauga acest text ca exemplu.</div>
                </div>
                </div>
                <div class="shipping-button">
                  <button class="invoice-button-text">Generate Shipping</button>
                </div>
              </div>


            </div>


            
    `;
  }

  function showOrdersMoreOptions(targetElement, order) {
    // Create more options panel
    const morePanel = document.createElement('div');
    morePanel.className = 'orders-more-panel';
    morePanel.innerHTML = `
      <div class="more-panel-header">
        <div class="more-panel-title">Order Options</div>
        <button class="more-panel-close"><i class="fas fa-times"></i></button>
      </div>
      <div class="more-panel-content">
        <button class="more-panel-option ${order.favorite ? 'active' : ''}" data-action="favorite">
          <i class="fas fa-star"></i> ${order.favorite ? 'Remove from Favorites' : 'Add to Favorites'}
        </button>
        <button class="more-panel-option" data-action="print">
          <i class="fas fa-print"></i> Print Order
        </button>
        <button class="more-panel-option" data-action="export">
          <i class="fas fa-file-export"></i> Export Order
        </button>
        <button class="more-panel-option" data-action="duplicate">
          <i class="fas fa-copy"></i> Duplicate Order
        </button>
      </div>
    `;

    // Position the panel
    const rect = targetElement.getBoundingClientRect();
    morePanel.style.position = 'absolute';
    morePanel.style.top = `${rect.bottom + window.scrollY + 5}px`;
    morePanel.style.right = `${window.innerWidth - rect.right - window.scrollX}px`;
    document.body.appendChild(morePanel);

    // Animation
    morePanel.style.opacity = '0';
    morePanel.style.transform = 'scale(0.95)';
    morePanel.classList.add('more-panel-anim-in');

    // Handle close button
    const closeButton = morePanel.querySelector('.more-panel-close');
    if (closeButton) {
      closeButton.addEventListener('click', function hideMorePanel(ev) {
        morePanel.classList.remove('more-panel-anim-in');
        morePanel.classList.add('more-panel-anim-out');

        morePanel.addEventListener('animationend', function handler() {
          morePanel.removeEventListener('animationend', handler);
          morePanel.remove();
        });
      });
    }

    // Handle click outside
    const handleOutsideClick = (e) => {
      if (!morePanel.contains(e.target) && e.target !== targetElement) {
        morePanel.classList.remove('more-panel-anim-in');
        morePanel.classList.add('more-panel-anim-out');

        morePanel.addEventListener('animationend', function handler() {
          morePanel.removeEventListener('animationend', handler);
          morePanel.remove();
          document.removeEventListener('click', handleOutsideClick, true);
        });
      }
    };

    // Delay adding the click handler to prevent immediate closing
    setTimeout(() => {
      document.addEventListener('click', handleOutsideClick, true);
    }, 100);

    // Handle options
    const options = morePanel.querySelectorAll('.more-panel-option');
    options.forEach(option => {
      option.addEventListener('click', () => {
        const action = option.getAttribute('data-action');

        if (action === 'favorite') {
          // Toggle favorite status
          order.favorite = !order.favorite;
          renderOrdersList(order.id);
          renderOrdersContent(order);

          // Close panel
          morePanel.classList.remove('more-panel-anim-in');
          morePanel.classList.add('more-panel-anim-out');
          morePanel.addEventListener('animationend', function handler() {
            morePanel.removeEventListener('animationend', handler);
            morePanel.remove();
            document.removeEventListener('click', handleOutsideClick, true);
          });
        } else {
          // For other actions, just show a notification
          alert(`Action: ${action} - This feature is not implemented in the demo`);
        }
      });
    });
  }

  function getAddOrdersFormHTML() {
    return `
      <div class="add-orders-form">
        <div class="form-header">
          <h3>Add New Order</h3>
          <button class="form-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="form-body">
          <div class="form-group">
            <label for="order-number">Order Number</label>
            <input type="text" id="order-number" placeholder="Order Number" value="ORD-${Math.floor(10000 + Math.random() * 90000)}">
          </div>
          <div class="form-group">
            <label for="customer-name">Customer Name</label>
            <input type="text" id="customer-name" placeholder="Customer Name">
          </div>
          <div class="form-group">
            <label for="order-email">Email</label>
            <input type="email" id="order-email" placeholder="Email Address">
          </div>
          <div class="form-group">
            <label for="order-phone">Phone</label>
            <input type="tel" id="order-phone" placeholder="Phone Number">
          </div>
          <div class="form-group">
            <label for="order-status">Status</label>
            <select id="order-status">
              <option value="Pending">Pending</option>
              <option value="Processing">Processing</option>
              <option value="Shipped">Shipped</option>
              <option value="Completed">Completed</option>
              <option value="Cancelled">Cancelled</option>
            </select>
          </div>
          <div class="form-group">
            <label for="order-total">Total Amount</label>
            <input type="text" id="order-total" placeholder="Total Amount">
          </div>
          <div class="form-group">
            <label for="order-items">Items Count</label>
            <input type="number" id="order-items" placeholder="Number of Items">
          </div>
          <div class="form-group">
            <label for="order-notes">Notes</label>
            <textarea id="order-notes" placeholder="Additional Notes"></textarea>
          </div>
        </div>
        <div class="form-footer">
          <button class="cancel-button">Cancel</button>
          <button class="save-button">Save Order</button>
        </div>
      </div>
    `;
  }

  function showEditOrdersForm(order, parentElement) {
    const formContainer = document.createElement('div');
    formContainer.className = 'add-orders-overlay';
    formContainer.innerHTML = `
      <div class="add-orders-form">
        <div class="form-header">
          <h3>Edit Order</h3>
          <button class="form-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="form-body">
          <div class="form-group">
            <label for="edit-order-number">Order Number</label>
            <input type="text" id="edit-order-number" value="${order.orderNumber}">
          </div>
          <div class="form-group">
            <label for="edit-customer-name">Customer Name</label>
            <input type="text" id="edit-customer-name" value="${order.customerName}">
          </div>
          <div class="form-group">
            <label for="edit-order-email">Email</label>
            <input type="email" id="edit-order-email" value="${order.email}">
          </div>
          <div class="form-group">
            <label for="edit-order-phone">Phone</label>
            <input type="tel" id="edit-order-phone" value="${order.phone}">
          </div>
          <div class="form-group">
            <label for="edit-order-status">Status</label>
            <select id="edit-order-status">
              <option value="Pending" ${order.status === 'Pending' ? 'selected' : ''}>Pending</option>
              <option value="Processing" ${order.status === 'Processing' ? 'selected' : ''}>Processing</option>
              <option value="Shipped" ${order.status === 'Shipped' ? 'selected' : ''}>Shipped</option>
              <option value="Completed" ${order.status === 'Completed' ? 'selected' : ''}>Completed</option>
              <option value="Cancelled" ${order.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
            </select>
          </div>
          <div class="form-group">
            <label for="edit-order-total">Total Amount</label>
            <input type="text" id="edit-order-total" value="${order.totalAmount}">
          </div>
          <div class="form-group">
            <label for="edit-order-items">Items Count</label>
            <input type="number" id="edit-order-items" value="${order.itemsCount}">
          </div>
          <div class="form-group">
            <label for="edit-order-notes">Notes</label>
            <textarea id="edit-order-notes">${order.notes || ''}</textarea>
          </div>
        </div>
        <div class="form-footer">
          <button class="cancel-button">Cancel</button>
          <button class="save-button">Save Changes</button>
        </div>
      </div>
    `;

    parentElement.appendChild(formContainer);

    // Animation
    formContainer.style.opacity = '0';
    setTimeout(() => {
      formContainer.style.opacity = '1';
    }, 10);

    // Handle close button
    const closeButton = formContainer.querySelector('.form-close');
    if (closeButton) {
      closeButton.addEventListener('click', function hidePanel(ev) {
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }

    // Handle cancel button
    const cancelButton = formContainer.querySelector('.cancel-button');
    if (cancelButton) {
      cancelButton.addEventListener('click', () => {
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }

    // Handle save button
    const saveButton = formContainer.querySelector('.save-button');
    if (saveButton) {
      saveButton.addEventListener('click', () => {
        // Update order with form values
        order.orderNumber = formContainer.querySelector('#edit-order-number').value;
        order.customerName = formContainer.querySelector('#edit-customer-name').value;
        order.email = formContainer.querySelector('#edit-order-email').value;
        order.phone = formContainer.querySelector('#edit-order-phone').value;
        order.status = formContainer.querySelector('#edit-order-status').value;
        order.totalAmount = formContainer.querySelector('#edit-order-total').value;
        order.itemsCount = formContainer.querySelector('#edit-order-items').value;
        order.notes = formContainer.querySelector('#edit-order-notes').value;

        // Update first letter if customer name changed
        const firstName = order.customerName.split(' ')[0];
        const firstLetter = firstName.charAt(0).toUpperCase();
        if (order.letter !== firstLetter) {
          order.letter = firstLetter;

          // Rebuild grouped orders
          const groupedOrders = orders.reduce((acc, order) => {
            if (!acc[order.letter]) acc[order.letter] = [];
            acc[order.letter].push(order);
            return acc;
          }, {});
        }

        // Update UI
        renderOrdersList(order.id);
        renderOrdersContent(order);

        // Close form
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }
  }

  function isMobileOrdersApp() {
    return window.innerWidth <= 767 && windowElement.querySelector('.orders-selected-mode');
  }

  function showOrdersContentPanel() {
    if (isMobileOrdersApp() && windowMainContent) {
      // Force a reflow before adding the class to ensure smooth transition
      windowMainContent.offsetHeight;

      // Add animation class FIRST
      windowMainContent.classList.add('animate-content-transition');

      // Make sure content is visible before transition starts
      const contentSection = windowMainContent.querySelector('.orders-content-section');
      if (contentSection) {
        contentSection.style.zIndex = '2';
        contentSection.style.visibility = 'visible';
      }

      // Then add the class that triggers transform
      windowMainContent.classList.add('show-orders-content');

      // Remove animation class after transition completes
      setTimeout(() => {
        windowMainContent.classList.remove('animate-content-transition');
      }, 350);
    }
  }

  function updateOrdersListToolbar(selectedId) {
    const tableHeader = windowElement.querySelector('.orders-list-table-header');
    const searchSort = windowElement.querySelector('.orders-list-toolbar-searchsort1');
    if (!isMobileOrdersApp()) {
      if (typeof selectedId === 'undefined' || selectedId === null) {
        // No order selected: show table header, hide search/sort
        if (tableHeader) tableHeader.style.display = '';
        if (searchSort) searchSort.style.display = 'none';
      } else {
        // Order selected: show search/sort, hide table header
        if (tableHeader) tableHeader.style.display = 'none';
        if (searchSort) searchSort.style.display = '';
      }
    } else {
      // On mobile, always show search/sort, hide table header
      if (tableHeader) tableHeader.style.display = 'none';
      if (searchSort) searchSort.style.display = '';
    }
  }

  // Patch renderOrdersList to handle mobile view properly
  const origRenderOrdersList = renderOrdersList;
  renderOrdersList = function (selectedId) {
    updateOrdersListToolbar(selectedId);
    origRenderOrdersList(selectedId);
    const selectedOrder = orders.find(o => o.id === selectedId);

    if (isMobileOrdersApp() && typeof selectedId === 'number' && selectedOrder) {
      // Render content first, then show panel
      renderOrdersContent(selectedOrder);
      // Use requestAnimationFrame to ensure content is rendered before transition
      requestAnimationFrame(() => {
        showOrdersContentPanel();
      });
    } else if (selectedOrder) {
      // On desktop, just render content
      renderOrdersContent(selectedOrder);
    }
  };

  // On resize, update layout
  window.addEventListener('resize', function () {
    if (!isMobileOrdersApp() && windowMainContent) {
      windowMainContent.classList.remove('show-orders-content');
      // Reset layout when switching from mobile to desktop
      if (ordersContentSection && ordersContent && ordersContent.querySelector('.orders-content-wrapper')) {
        // If an order is already selected
        ordersContentSection.style.visibility = 'visible';
        ordersContentSection.style.display = '';
        if (ordersListSection) ordersListSection.style.width = '320px';
      } else {
        // If no order is selected
        initializeOrdersAppLayout();
      }
    }
  });

  // Add mobile back button to toolbar if it doesn't exist
  const ordersToolbar = windowElement.querySelector('.orders-content-section .window-toolbar');
  if (ordersToolbar && !ordersToolbar.querySelector('.orders-back-button')) {
    const backButton = document.createElement('button');
    backButton.className = 'toolbar-button orders-back-button';
    backButton.title = 'Back';
    backButton.innerHTML = '<i class="fas fa-arrow-left"></i><span>Back</span>';
    backButton.addEventListener('click', () => {
      showOrdersListPanel();
    });

    // Insert at the beginning of the toolbar
    const toolbarLeft = ordersToolbar.querySelector('.toolbar-buttons-left');
    if (toolbarLeft) {
      toolbarLeft.insertBefore(backButton, toolbarLeft.firstChild);
    }
  }

  function showOrdersListPanel() {
    if (isMobileOrdersApp() && windowMainContent) {
      // Force a reflow before removing the class to ensure smooth transition
      windowMainContent.offsetHeight;

      // Add animation class FIRST
      windowMainContent.classList.add('animate-content-transition');

      // Then remove the class that controls transform
      windowMainContent.classList.remove('show-orders-content');

      // Remove animation class after transition completes
      setTimeout(() => {
        windowMainContent.classList.remove('animate-content-transition');
      }, 350);

      // Reset z-index after animation completes
      const contentSection = windowMainContent.querySelector('.orders-content-section');
      if (contentSection) {
        setTimeout(() => {
          if (!windowMainContent.classList.contains('show-orders-content')) {
            contentSection.style.zIndex = '';
            contentSection.style.visibility = '';
          }
        }, 350);
      }
    } else if (!isMobileOrdersApp()) {
      // On desktop, reset the layout
      if (ordersContentSection) {
        ordersContentSection.style.visibility = 'hidden';
        ordersContentSection.style.display = 'none';
      }

      if (ordersListSection) {
        ordersListSection.style.width = '100%';
        ordersListSection.classList.add('table-mode');
        ordersListSection.classList.remove('orders-selected-mode');
      }

      // Show table header
      const tableHeader = windowElement.querySelector('.orders-list-table-header');
      if (tableHeader) {
        tableHeader.style.display = '';
      }

      // Render the orders list without a selected order
      renderOrdersList();
    }
  }

  // Initial render
  renderOrdersList();
  initializeOrdersAppLayout();

  // Setup back button for mobile view
  const existingBackButton = windowElement.querySelector('.orders-back-button');
  if (existingBackButton) {
    existingBackButton.addEventListener('click', () => {
      showOrdersListPanel();
    });
  }


  // Setup compose button to add new order
  const composeBtn = windowElement.querySelector('.compose-btn');
  if (composeBtn) {
    composeBtn.addEventListener('click', () => {
      // Generate a unique window ID for each add order window
      let addOrderWindowCount = 1;
      while (openWindows[`add-order-window-${addOrderWindowCount}`]) {
        addOrderWindowCount++;
      }
      const windowId = `add-order-window-${addOrderWindowCount}`;

      // Create the window from template
      const addOrderWindow = createWindowFromTemplate('add-order-window', windowId, false);
      if (!addOrderWindow) return;
      
      // Add simple opening animation
      addOrderWindow.classList.add('window-anim-open');

      // Inject the add order form HTML
      const content = addOrderWindow.querySelector('.add-order-window-content');
      if (content) {
        content.innerHTML = getAddOrdersFormHTML();

        // Handle close button
        const closeButton = content.querySelector('.form-close');
        if (closeButton) {
          closeButton.addEventListener('click', () => {
            // Use standard window close animation
            const standardCloseBtn = addOrderWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              addOrderWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              addOrderWindow.classList.add('window-anim-close');
              addOrderWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                  if (addOrderWindow.parentNode) addOrderWindow.parentNode.removeChild(addOrderWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                }
              }, { once: true });
            }
          });
        }

        // Handle cancel button
        const cancelButton = content.querySelector('.cancel-button');
        if (cancelButton) {
          cancelButton.addEventListener('click', () => {
            // Use standard window close animation
            const standardCloseBtn = addOrderWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              addOrderWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              addOrderWindow.classList.add('window-anim-close');
              addOrderWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                                     if (addOrderWindow.parentNode) addOrderWindow.parentNode.removeChild(addOrderWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                }
              }, { once: true });
            }
          });
        }

        // Handle save button
        const saveButton = content.querySelector('.save-button');
        if (saveButton) {
          saveButton.addEventListener('click', () => {
            // Get form values
            const orderNumber = content.querySelector('#order-number').value;
            const customerName = content.querySelector('#customer-name').value;
            const email = content.querySelector('#order-email').value;
            const phone = content.querySelector('#order-phone').value;
            const status = content.querySelector('#order-status').value;
            const totalAmount = content.querySelector('#order-total').value;
            const itemsCount = content.querySelector('#order-items').value;
            const notes = content.querySelector('#order-notes').value;

            if (!orderNumber || !customerName) {
              alert('Order number and customer name are required');
              return;
            }

            // Create new order object
            const newOrder = {
              id: orders.length + 1,
              orderNumber,
              customerName,
              firstName: customerName.split(' ')[0],
              lastName: customerName.split(' ').slice(1).join(' '),
              email,
              phone,
              status,
              notes,
              favorite: false,
              letter: customerName.charAt(0).toUpperCase(),
              icon: 'fa-shopping-bag',
              color: '#' + Math.floor(Math.random() * 16777215).toString(16),
              creationDate: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              deliveryDate: 'Pending',
              lastUpdate: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              itemsCount: itemsCount || 0,
              totalAmount: totalAmount || '$ 0.00',
              isNew: false
            };

            // Add to orders array
            orders.push(newOrder);

            // Rebuild grouped orders
            const groupedOrders = orders.reduce((acc, order) => {
              if (!acc[order.letter]) acc[order.letter] = [];
              acc[order.letter].push(order);
              return acc;
            }, {});

            // Update UI
            renderOrdersList(newOrder.id);
            renderOrdersContent(newOrder);

            // Close window with animation
            const standardCloseBtn = addOrderWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              addOrderWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              addOrderWindow.classList.add('window-anim-close');
              addOrderWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                  if (addOrderWindow.parentNode) addOrderWindow.parentNode.removeChild(addOrderWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                }
              }, { once: true });
            }
          });
        }
      }

      // Register the window in openWindows
      const iconClass = 'fa-plus-circle';
      const iconBgClass = 'green-icon';
      const appTitle = 'Add New Order';
      openWindows[windowId] = {
        element: addOrderWindow,
        name: 'add-order',
        title: appTitle,
        iconClass: iconClass,
        iconBgClass: iconBgClass,
        appTitle: appTitle
      };
      makeWindowActive(addOrderWindow);
      // Call renderPinnedTaskbarIcons to immediately update the taskbar
      renderPinnedTaskbarIcons();
    });
  }

  // Apply search functionality
  const searchInput = windowElement.querySelector('.orders-search-input');
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();

      if (!searchTerm) {
        renderOrdersList();
        return;
      }

      // Filter orders based on search term
      const filteredOrders = orders.filter(order =>
        (order.orderNumber && order.orderNumber.toLowerCase().includes(searchTerm)) ||
        (order.customerName && order.customerName.toLowerCase().includes(searchTerm)) ||
        (order.firstName && order.firstName.toLowerCase().includes(searchTerm)) ||
        (order.lastName && order.lastName.toLowerCase().includes(searchTerm)) ||
        (order.email && order.email.toLowerCase().includes(searchTerm)) ||
        (order.status && order.status.toLowerCase().includes(searchTerm)) ||
        (order.company && order.company.toLowerCase().includes(searchTerm)) ||
        (order.notes && order.notes.toLowerCase().includes(searchTerm))
      );

      // Group filtered orders by letter
      const filteredGrouped = filteredOrders.reduce((acc, order) => {
        if (!acc[order.letter]) acc[order.letter] = [];
        acc[order.letter].push(order);
        return acc;
      }, {});

      // Save original grouped orders
      const originalGrouped = Object.assign({}, groupedOrders);

      // Temporarily replace grouped orders with filtered results
      Object.keys(groupedOrders).forEach(key => {
        delete groupedOrders[key];
      });

      Object.keys(filteredGrouped).forEach(key => {
        groupedOrders[key] = filteredGrouped[key];
      });

      // Render filtered list
      renderOrdersList();

      // Restore original grouped orders
      Object.keys(groupedOrders).forEach(key => {
        delete groupedOrders[key];
      });

      Object.keys(originalGrouped).forEach(key => {
        groupedOrders[key] = originalGrouped[key];
      });
    });
  }
}

//Products App Content
function setupProductsManager(windowElement) {
  // Sidebar: do NOT set content here. Sidebar content is defined in index.html template using the generic sidebar structure.
  // Only update dynamic values (like unread counts, user name, etc.) here if needed.
  function isMobileProductsApp() {
    return window.innerWidth <= 767 && windowElement.querySelector('.products-selected-mode');
  }
  // --- Ensure sidebar toggle and overlay exist (for consistent sidebar behavior) ---
  ensureSidebarElements(windowElement);

  if (typeof window.updateSidebarForWindow === 'function') {
    window.updateSidebarForWindow(windowElement);
  }
  if (typeof attachSidebarResizeObserver === 'function') {
    attachSidebarResizeObserver(windowElement);
  }

  // Setup toolbar buttons
  const toolbarButtons = windowElement.querySelectorAll('.window-toolbar .toolbar-button');
  toolbarButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Add ripple effect
      const ripple = document.createElement('span');
      ripple.classList.add('ripple');
      button.appendChild(ripple);
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
  });

  // Single source of products data with all fields
  const products = [
    {
      id: 1,
      productSKU: 'PRD-10001',
      productName: 'Tastatura muzicala cu multe muzicute',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: true,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: true
    },
    {
      id: 2,
      productSKU: 'PRD-10001',
      productName: 'Cel mai fericit produs de pe pamant',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'Subscription',
      featured: true,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: true
    },
    {
      id: 3,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'Booking',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: true
    },
    {
      id: 4,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'Appointments',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: true
    },
    {
      id: 5,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: true,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: true
    },
    {
      id: 6,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 7,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 8,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 9,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 10,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 11,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 12,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: true,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 13,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 14,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 15,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 16,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: true
    },
    {
      id: 17,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: true
    },
    {
      id: 18,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 19,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: true
    },
    {
      id: 20,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: true,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 21,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 22,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 23,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    },
    {
      id: 24,
      productSKU: 'PRD-10001',
      productName: 'NETGEAR R6700 Nighthawk',
      category: 'Electronics',
      brand: 'NETGEAR',
      avatar: 'fa-box',
      description: 'AC1750 Dual Band Smart WiFi Router',
      price: '$99.99',
      salePrice: '$84.99',
      stock: 42,
      status: 'Published',
      notes: 'Best seller',
      type: 'eCommerce',
      featured: false,
      letter: 'N',
      icon: 'fa-box',
      color: '#F6AD55',
      creationDate: '12:40 AM',
      lastUpdate: '14:20 PM',
      tags: ['router', 'wifi', 'networking'],
      attributes: ['color: black', 'warranty: 1 year'],
      variations: ['standard', 'extended range'],
      isNew: false
    }
  ];

  // Group products by first letter of product name
  let groupedProducts = products.reduce((acc, product) => {
    // Ensure letter is set based on product name
    if (!product.letter && product.productName) {
      product.letter = product.productName.charAt(0).toUpperCase();
    }

    // Add to appropriate group
    if (product.letter) {
      if (!acc[product.letter]) acc[product.letter] = [];
      acc[product.letter].push(product);
    }
    return acc;
  }, {});

  const productsListSection = windowElement.querySelector('.products-list-section');
  const productsList = windowElement.querySelector('.products-list');
  const productsContentSection = windowElement.querySelector('.products-content-section');
  const productsContent = windowElement.querySelector('.products-content-section .products-content');
  const windowMainContent = windowElement.querySelector('.products-manager-window');

  // Helper function to get the appropriate icon for each status
  function getStatusIcon(status) {
    switch (status) {
      case 'Published':
        return '<i class="fas fa-check-circle status-icon"></i>';
      case 'Draft':
        return '<i class="fas fa-pencil-alt status-icon"></i>';
      case 'Pending Review':
        return '<i class="fas fa-clock status-icon"></i>';
      case 'On Sale':
        return '<i class="fas fa-tag status-icon"></i>';
      case 'Out of Stock':
        return '<i class="fas fa-ban status-icon"></i>';
      case 'Archived':
        return '<i class="fas fa-archive status-icon"></i>';
      case 'Deleted':
      case 'Trash':
        return '<i class="fas fa-trash-alt status-icon"></i>';
      default:
        return '<i class="fas fa-info-circle status-icon"></i>';
    }
  }

  // Helper function to get the appropriate icon for each product type
  function getProductTypeIcon(type) {
    switch (type) {
      case 'eCommerce':
        return '<i class="fas fa-cart-shopping producttype-icon"></i>';
      case 'Subscription':
        return '<i class="fas fa-clipboard-check producttype-icon"></i>';
      case 'Bookings':
        return '<i class="fas fa-calendar-check producttype-icon"></i>';
      case 'Appointments':
        return '<i class="fas fa-calendar-days producttype-icon"></i>';
      case 'Digital':
        return '<i class="fas fa-floppy-disk producttype-icon"></i>';
      case 'Physical':
        return '<i class="fas fa-box producttype-icon"></i>';
      case 'Variable':
        return '<i class="fas fa-sliders producttype-icon"></i>';
      case 'Downloadable':
        return '<i class="fas fa-download producttype-icon"></i>';
      default:
        return '<i class="fas fa-info-circle producttype-icon"></i>';
    }
  }

  // Initialize the layout and render the products list
  initializeProductsAppLayout();
  renderProductsList();

  // Initialize desktop layout (products list takes full width, content section hidden)
  function initializeProductsAppLayout() {
    // Desktop layout setup:
    // 1. Hide content section initially
    if (productsContentSection) {
      productsContentSection.style.visibility = 'hidden';
      productsContentSection.style.display = 'none';
    }

    // 2. Make products list section take 100% width
    if (productsListSection) {
      productsListSection.style.width = '100%';
    }

    // 3. Show table header by default
    const tableHeader = windowElement.querySelector('.products-list-table-header');
    if (tableHeader) {
      tableHeader.style.display = '';
    }

    // Make sure products list is visible
    if (productsList) {
      productsList.style.display = '';
    }
  }

  function renderProductsList(selectedId) {
    if (!productsList) return;
    productsList.innerHTML = '';

    // If there's no selected product and we're not in mobile mode, show a table view
    if ((typeof selectedId === 'undefined' || selectedId === null) && !isMobileProductsApp()) {
      // Make sure products content section is hidden
      if (productsContentSection) {
        productsContentSection.style.visibility = 'hidden';
        productsContentSection.style.display = 'none';
      }

      // Make products list section take 100% width and add table-mode class
      if (productsListSection) {
        productsListSection.style.width = '100%';
        productsListSection.classList.add('table-mode');
        productsListSection.classList.remove('products-selected-mode');
      }

      // Use the unified products data for the table view
      // Create a table row for each product
      products.forEach(product => {
        const li = document.createElement('li');
        li.className = 'products-list-item products-table-row';

        const bgColor = `rgba(${parseInt(product.color.slice(1, 3), 16)},${parseInt(product.color.slice(3, 5), 16)},${parseInt(product.color.slice(5, 7), 16)},0.1)`;

        li.innerHTML = `
          <div style="display: flex; width: 100%; align-items: center; padding: 14px 14px;">
            <div class="products-list-featured-icon">
              ${product.featured ? ' <i class="fas fa-star"></i>' : ''}
            </div>
            <div style="flex: 1; display: flex; align-items: center; gap: 10px;">
              
              <span class="products-list-product-sku" style="text-wrap-mode: nowrap; flex: 1; gap: 10px; display: flex; align-items: center;"><input type="checkbox" id="products-select-all-box" name="products-select-all-box" />${product.productSKU}</span>

              <div style="flex: 2.5; display: flex; align-items: center; gap: 10px;" class="products-list-product-name">
                            <div class="product-list-avatar" style="background-color: transparent;">
              <img src="${product.id % 2 === 0 ? 'img/appsimg/camera.png' : 'img/appsimg/router.png'}" alt="Product" style="width: 42px; height: 42px; object-fit: contain; border-radius: 7px;"></div>
              ${product.productName}
</div>
           
            
    
                  
            
            
            <div style="flex: 1;">${product.brand}</div>
            <div style="flex: 1;"><span class="status-badge status-${product.status.toLowerCase().replace(/\s+/g, '-')}">${getStatusIcon(product.status)} <div class="product-status-list-view">${product.status}</div></span></div>
                        <div style="flex: 1;"><span class="product-type-badge status-${product.type.toLowerCase().replace(/\s+/g, '-')}">${getProductTypeIcon(product.type)} <div class="product-status-list-view">${product.type}</div></span></div>
<div style="flex: 1;">${product.category}</div>
            <div style="flex: 1;">${product.tags}</div>
            <div style="flex: 1;">${product.creationDate}</div>
            <div style="flex: 0.3;">${product.stock}</div>
            <div style="flex: 0.3;">${product.id}</div>
            <div class="products-list-price">${product.price}</div>
            <div style="width: 20px; min-width: 20px;"></div>
          </div>
        `;

        li.onclick = () => {
          // When a row is clicked, use the product's ID to load the detail view
          renderProductsList(product.id);
        };

        productsList.appendChild(li);
      });

      return;
    }

    // If selectedId is provided, render the regular products list view
    Object.keys(groupedProducts).sort().forEach(letter => {


      groupedProducts[letter].forEach(product => {
        const li = document.createElement('li');
        li.className = 'products-list-item' + (product.id === selectedId ? ' selected' : '') + (product.favorite ? ' favorite' : '');

        li.innerHTML = `
        <div class="products-list-avatar" style="background-color: transparent;">
          <img src="${product.id % 2 === 0 ? 'img/appsimg/camera.png' : 'img/appsimg/router.png'}" alt="Product" style="width: 42px; height: 42px; object-fit: contain;">
        </div>
        <div class="products-list-info">
          <div class="products-list-name" style="display: flex; align-items: center; gap: 10px;"> ${product.featured ? ' <i class="fas fa-star"></i>' : ''} ${product.productName}</div>
          <div class="products-list-details"><span class="product-type-badge status-${product.type.toLowerCase().replace(/\s+/g, '-')}">${getProductTypeIcon(product.type)}</span>${product.productSKU} <span class="status-badge status-${product.status.toLowerCase().replace(/\s+/g, '-')}">${getStatusIcon(product.status)} <div class="product-status-list-view">${product.status}</div></span>            ${product.notes ? '<i class="fas fa-sticky-note"></i>' : ''}</div>
        </div>
        <div class="products-list-meta">
          <div class="products-list-price">${product.price}</div>
          <div class="products-list-date">${product.creationDate}</div>

        </div>
        `;

        li.onclick = () => {
          console.log('Product clicked:', product.id, product.productSKU, product.productName);

          // On mobile, we need to use the patched renderProductsList which will handle
          // showing the content panel after rendering the content
          renderProductsList(product.id);

          // On desktop or when the patched renderProductsList isn't in effect yet,
          // we need to render the content directly
          if (!isMobileProductsApp()) {
            renderProductsContent(product);
          }
        };

        li.ondblclick = () => {
          // Generate a unique window ID for each product content popout
          let productsContentWindowCount = 1;
          while (openWindows[`products-content-window-${productsContentWindowCount}`]) {
            productsContentWindowCount++;
          }
          const windowId = `products-content-window-${productsContentWindowCount}`;

          const productsContentWindow = createWindowFromTemplate('products-content-window', windowId, false);
          if (!productsContentWindow) return;
          
          // Add simple opening animation
          productsContentWindow.classList.add('window-anim-open');

          // Inject the full products-content-section structure
          const content = productsContentWindow.querySelector('.products-content-body');
          if (!content) return;

          content.innerHTML = `
          <section class="products-content-section">
            <div class="window-toolbar">
              <div class="toolbar-buttons-left">
                <button class="toolbar-button" title="Notes"><i class="fas fa-clipboard-list"></i><span>Add Note</span></button>
                <button class="toolbar-button" title="Shipping"><i class="fas fa-shipping-fast"></i><span>Shipping</span></button>
                <button class="toolbar-button" title="Invoice"><i class="fas fa-file-invoice"></i><span>Invoice</span></button>
                <button class="toolbar-button" title="Product log"><i class="fas fa-history"></i><span>Product log</span></button>
                                <button class="toolbar-button products-delete-button"><i class="fas fa-trash"></i></button>

              </div>
              <div class="toolbar-buttons-right">
                <div class="product-assign">
          <button class="btn btn-secondary">Discard</button>
          <button class="btn btn-secondary">Schedule</button>
          <button class="btn btn-primary">Save changes</button>
                </div>
              </div>
            </div>
            
            <div class="products-content">
              ${getProductsContentHTML(product)}
            </div>
          </section>
          `;

          // Setup back button in the popout window
          const backButton = content.querySelector('.products-back-button');
          if (backButton) {
            backButton.addEventListener('click', () => {
              const closeButton = productsContentWindow.querySelector('.window-close');
              if (closeButton) closeButton.click();
            });
          }

          // Setup status dropdown functionality for the popup window
          const statusButton = content.querySelector('.product-status-button');
          const statusDropdown = content.querySelector('.product-status-dropdown');

          if (statusButton && statusDropdown) {
            // Initially hide the dropdown
            statusDropdown.style.display = 'none';

            // Apply dropdown styles
            statusDropdown.style.position = 'absolute';
            statusDropdown.style.zIndex = '1000';
            statusDropdown.style.backgroundColor = '#EBF5FF';
            statusDropdown.style.borderRadius = '16px';
            statusDropdown.style.boxShadow = '0 4px 16px rgba(0,0,0,0.15)';
            statusDropdown.style.padding = '1px 0';
            statusDropdown.style.maxHeight = 'max-content';
            statusDropdown.style.overflowY = 'auto';
            statusDropdown.style.border = '1px solid var(--border-color, #e1e1e1)';
            statusDropdown.style.borderTop = 'none';
            statusDropdown.style.marginTop = '-75px';
            statusDropdown.style.width = '220px';

            // Apply styles to dropdown options
            const dropdownOptionElements = statusDropdown.querySelectorAll('.dropdown-option');
            dropdownOptionElements.forEach(option => {
              option.style.padding = '14px 18px';
              option.style.display = 'flex';
              option.style.alignItems = 'center';
              option.style.gap = '10px';
              option.style.cursor = 'pointer';
              option.style.transition = 'background-color 0.2s ease';
              option.style.borderRadius = '8px';
              option.style.margin = '3px 5px';

              const status = option.getAttribute('data-status');
              option.classList.add(`status-${status.toLowerCase().replace(/\s+/g, '-')}`);

              option.addEventListener('mouseover', () => {
                option.style.backgroundColor = 'var(--accent-color)';
                option.style.color = '#fff';
              });

              option.addEventListener('mouseout', () => {
                option.style.backgroundColor = '';
                option.style.color = '';
              });
            });

            // Toggle dropdown on button click
            statusButton.addEventListener('click', (e) => {
              if (statusDropdown.style.display === 'none') {
                // Position the dropdown directly beneath the button
                const buttonRect = statusButton.getBoundingClientRect();
                const windowRect = productsContentWindow.getBoundingClientRect();
                const productStatusContainer = content.querySelector('.product-status-container');

                // Calculate position relative to the window
                statusDropdown.style.top = (buttonRect.bottom - windowRect.top) + 'px';

                // Ensure dropdown is aligned with the button's container instead of the button itself
                if (productStatusContainer) {
                  const containerRect = productStatusContainer.getBoundingClientRect();
                  statusDropdown.style.right = (windowRect.right - containerRect.right) + 'px';
                  statusDropdown.style.left = 'auto';
                } else {
                  // Fallback if container not found
                  statusDropdown.style.right = (windowRect.right - buttonRect.right) + 'px';
                  statusDropdown.style.left = 'auto';
                }

                // Setup animation starting state
                statusDropdown.style.opacity = '0';
                statusDropdown.style.display = 'block';

                // Force reflow to ensure animation works
                statusDropdown.offsetHeight;

                // Add animation
                statusDropdown.style.transition = 'opacity 0.2s ease-out, transform 0.2s ease-out';
                statusDropdown.style.opacity = '1';
                statusDropdown.classList.add('dropdown-anim-in');
              } else {
                // Animate out
                statusDropdown.style.opacity = '0';

                // Hide after animation completes
                setTimeout(() => {
                  statusDropdown.style.display = 'none';
                  statusDropdown.style.transform = '';
                }, 200);
              }
              e.stopPropagation();
            });

            // Close dropdown when clicking elsewhere
            document.addEventListener('click', (e) => {
              if (statusDropdown.style.display === 'block' && !statusDropdown.contains(e.target) && e.target !== statusButton) {
                // Animate out
                statusDropdown.style.opacity = '0';

                // Hide after animation completes
                setTimeout(() => {
                  statusDropdown.style.display = 'none';
                  statusDropdown.style.transform = '';
                }, 200);
              }
            });

            // Handle status option selection
            const dropdownOptions = statusDropdown.querySelectorAll('.dropdown-option');
            dropdownOptions.forEach(option => {
              option.addEventListener('click', () => {
                const newStatus = option.getAttribute('data-status');
                const oldStatus = product.status;

                if (newStatus !== oldStatus) {
                  // Create confirmation overlay
                  const overlay = document.createElement('div');
                  overlay.className = 'confirmation-overlay';
                  overlay.innerHTML = `
                    <div class="confirmation-dialog">
                      <h3>Update Product Status</h3>
                      <p>Change product status from "${oldStatus}" to "${newStatus}"?</p>
                      <div class="confirmation-options">
                        <label><input type="checkbox" checked> Notify product team</label>
                        <label><input type="checkbox"> Add internal note</label>
                      </div>
                      <div class="confirmation-buttons">
                        <button class="cancel-button">Cancel</button>
                        <button class="confirm-button">Update Status</button>
                      </div>
                    </div>
                  `;

                  // Add to DOM
                  document.body.appendChild(overlay);

                  // Add styles
                  overlay.style.position = 'fixed';
                  overlay.style.top = '0';
                  overlay.style.left = '0';
                  overlay.style.width = '100%';
                  overlay.style.height = '100%';
                  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
                  overlay.style.display = 'flex';
                  overlay.style.justifyContent = 'center';
                  overlay.style.alignItems = 'center';
                  overlay.style.zIndex = '9999';

                  const dialog = overlay.querySelector('.confirmation-dialog');
                  dialog.style.backgroundColor = 'var(--window-content-bg)';
                  dialog.style.padding = '24px';
                  dialog.style.borderRadius = '16px';
                  dialog.style.width = '400px';
                  dialog.style.boxShadow = '0 8px 24px rgba(0, 0, 0, 0.2)';

                  // Setup buttons
                  const cancelButton = overlay.querySelector('.cancel-button');
                  const confirmButton = overlay.querySelector('.confirm-button');

                  cancelButton.addEventListener('click', () => {
                    overlay.style.opacity = '0';
                    setTimeout(() => overlay.remove(), 300);
                  });

                  confirmButton.addEventListener('click', () => {
                    // Update the product's status
                    product.status = newStatus;

                    // Update UI
                    const statusBadge = content.querySelector('.product-status-badge');
                    if (statusBadge) {
                      statusBadge.className = `product-status-badge status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`;
                      statusBadge.innerHTML = `${getStatusIcon(newStatus)} <span>${newStatus}</span>`;
                    }

                    // Update the list item if it's visible
                    const productItem = windowElement.querySelector(`.products-list-item[data-id="${product.id}"] .status-badge`);
                    if (productItem) {
                      productItem.className = `status-badge status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`;
                      productItem.innerHTML = `${getStatusIcon(newStatus)} <span>${newStatus}</span>`;
                    }

                    overlay.style.opacity = '0';
                    setTimeout(() => overlay.remove(), 300);

                    // Add ripple effect to selected option
                    const ripple = document.createElement('span');
                    ripple.classList.add('ripple');
                    option.appendChild(ripple);
                    setTimeout(() => {
                      ripple.remove();
                    }, 600);

                    // Close the dropdown with animation
                    statusDropdown.style.opacity = '0';
                    statusDropdown.style.transform = 'translateY(-10px)';

                    // Hide after animation completes
                    setTimeout(() => {
                      statusDropdown.style.display = 'none';
                      statusDropdown.style.transform = '';
                    }, 200);
                  });
                }
                else {
                  // If status hasn't changed, just close the dropdown
                  statusDropdown.style.opacity = '0';
                  statusDropdown.style.transform = 'translateY(-10px)';

                  // Hide after animation completes
                  setTimeout(() => {
                    statusDropdown.style.display = 'none';
                    statusDropdown.style.transform = '';
                  }, 200);
                }
              });
            });
          }

          // Setup edit button
          const editButton = content.querySelector('.products-edit-button');
          if (editButton) {
            editButton.addEventListener('click', () => {
              showEditProductsForm(product, content);
            });
          }

          // Setup delete button
          const deleteButton = content.querySelector('.products-delete-button');
          if (deleteButton) {
            deleteButton.addEventListener('click', () => {
              // Show confirmation dialog
              const confirmMessage = `Are you sure you want to delete product ${product.productSKU}?`;
              if (confirm(confirmMessage)) {
                // Remove product from data
                const index = products.findIndex(p => p.id === product.id);
                if (index !== -1) {
                  products.splice(index, 1);

                  // Close the window
                  const closeButton = productsContentWindow.querySelector('.window-close');
                  if (closeButton) closeButton.click();

                  // Update the main products list if visible
                  renderProductsList();
                }
              }
            });
          }

          // Setup more options button
          const moreButton = content.querySelector('.products-more-button');
          if (moreButton) {
            moreButton.addEventListener('click', (e) => {
              showProductsMoreOptions(e.target, product);
            });
          }

          // Register the window in openWindows and show taskbar icon
          const iconClass = 'fa-box-open';
          const iconBgClass = 'purple-icon';
          const appTitle = `Product: ${product.productSKU}`;
          openWindows[windowId] = {
            element: productsContentWindow,
            name: 'products-content',
            title: appTitle,
            iconClass: iconClass,
            iconBgClass: iconBgClass,
            appTitle: appTitle
          };

          // Update the window title with the product number
          const titleSpan = productsContentWindow.querySelector('.window-title span');
          if (titleSpan) {
            titleSpan.textContent = `Product: ${product.productSKU}`;
          }
          makeWindowActive(productsContentWindow);
          renderPinnedTaskbarIcons();
        };
        productsList.appendChild(li);
      });
    });
  }

  function renderProductsContent(product) {
    if (!productsContentSection || !productsContent) return;

    // When a product is selected, make the content section visible
    if (!isMobileProductsApp()) {
      if (productsContentSection) {
        productsContentSection.style.visibility = 'visible';
        productsContentSection.style.display = '';
      }

      // Restore products list section width and update classes
      if (productsListSection) {
        productsListSection.style.width = '390px';
        productsListSection.classList.remove('table-mode');
        productsListSection.classList.add('products-selected-mode');
      }

      // Hide table header
      const tableHeader = windowElement.querySelector('.products-list-table-header');
      if (tableHeader) {
        tableHeader.style.display = 'none';
      }
    }

    productsContent.innerHTML = getProductsContentHTML(product);

    // Initialize toggles after content is rendered
    if (typeof initializeProductSectionToggles === 'function') {
      initializeProductSectionToggles();
    }



    // Setup status dropdown functionality
    const statusButton = windowElement.querySelector('.product-status-button');
    const statusDropdown = windowElement.querySelector('.product-status-dropdown');

    if (statusButton && statusDropdown) {
      // Initially hide the dropdown
      statusDropdown.style.display = 'none';

      // Apply dropdown styles
      statusDropdown.style.position = 'absolute';
      statusDropdown.style.zIndex = '1000';
      statusDropdown.style.backgroundColor = '#EBF5FF';
      statusDropdown.style.borderRadius = '16px'; // Rounded only on bottom corners
      statusDropdown.style.boxShadow = '0 4px 16px rgba(0,0,0,0.15)';
      statusDropdown.style.padding = '1px 0';
      statusDropdown.style.maxHeight = 'max-content';
      statusDropdown.style.overflowY = 'auto';
      statusDropdown.style.border = '1px solid var(--border-color, #e1e1e1)';
      statusDropdown.style.borderTop = 'none'; // Remove top border to connect with button
      statusDropdown.style.marginTop = '-75px'; // No gap between button and dropdown
      statusDropdown.style.width = '220px';

      // Apply styles to dropdown options
      const dropdownOptionElements = statusDropdown.querySelectorAll('.dropdown-option');
      dropdownOptionElements.forEach(option => {
        option.style.padding = '8px 16px';
        option.style.cursor = 'pointer';
        option.style.display = 'flex';
        option.style.alignItems = 'center';
        option.style.gap = '10px';
        option.style.transition = 'background-color 0.2s';
        option.style.color = '#333';
        option.style.fontWeight = '600';
        option.style.borderRadius = '16px';
        option.style.height = '35px';

        // Add hover effect
        option.addEventListener('mouseenter', () => {
          option.style.backgroundColor = 'var(--accent-color)';
          option.style.color = '#fff';
          option.querySelector('i').style.color = '#fff !important';
        });
        option.addEventListener('mouseleave', () => {
          option.style.backgroundColor = '';
          option.style.color = '#333';
          option.querySelector('i').style.color = 'var(--accent-color)';
        });
      });

      // Toggle dropdown on button click
      statusButton.addEventListener('click', (e) => {
        if (statusDropdown.style.display === 'none') {
          // Position the dropdown directly beneath the button
          const buttonRect = statusButton.getBoundingClientRect();
          const windowRect = windowElement.getBoundingClientRect();
          const orderStatusContainer = windowElement.querySelector('.order-status-container');

          // Calculate position relative to the window
          statusDropdown.style.top = (buttonRect.bottom - windowRect.top) + 'px';

          // Ensure dropdown is aligned with the button's container instead of the button itself
          if (orderStatusContainer) {
            const containerRect = orderStatusContainer.getBoundingClientRect();
            statusDropdown.style.right = (windowRect.right - containerRect.right) + 'px';
            statusDropdown.style.left = 'auto';
          } else {
            // Fallback if container not found
            statusDropdown.style.right = (windowRect.right - buttonRect.right) + 'px';
            statusDropdown.style.left = 'auto';
          }

          // Setup animation starting state
          statusDropdown.style.opacity = '0';
          statusDropdown.style.display = 'block';

          // Force reflow to ensure animation works
          statusDropdown.offsetHeight;

          // Add animation
          statusDropdown.style.transition = 'opacity 0.2s ease-out, transform 0.2s ease-out';
          statusDropdown.style.opacity = '1';
          statusDropdown.classList.add('dropdown-anim-in');
        } else {
          // Animate out
          statusDropdown.style.opacity = '0';

          // Hide after animation completes
          setTimeout(() => {
            statusDropdown.style.display = 'none';
            statusDropdown.style.transform = '';
          }, 200);
        }
        e.stopPropagation();
      });

      // Close dropdown when clicking elsewhere
      document.addEventListener('click', (e) => {
        if (statusDropdown.style.display === 'block' && !statusDropdown.contains(e.target) && e.target !== statusButton) {
          // Animate out
          statusDropdown.style.opacity = '0';

          // Hide after animation completes
          setTimeout(() => {
            statusDropdown.style.display = 'none';
            statusDropdown.style.transform = '';
          }, 200);
        }
      });

      // Handle status option selection
      const dropdownOptions = statusDropdown.querySelectorAll('.dropdown-option');
      dropdownOptions.forEach(option => {
        option.addEventListener('click', () => {
          const newStatus = option.getAttribute('data-status');
          const oldStatus = order.status;

          if (newStatus !== oldStatus) {
            // Show confirmation dialog
            const alertDialog = document.createElement('div');
            alertDialog.className = 'alert-dialog desktop-alert-dialog';
            alertDialog.innerHTML = `
            
              <div class="alert-dialog-container">
                        <div class="alert-icon"><i class="fas fa-repeat"></i></div>

                <div class="alert-dialog-header">
                  <div class="alert-title">Change status to ${newStatus}</div>
                </div>
                <div class="alert-dialog-content">
                  <div class="alert-message">Are you sure you want to change order status to ${newStatus}?</div>
                  <div class="alert-dialog-options">
                    <label class="alert-dialog-checkbox">
                      <input type="checkbox" id="send-email-checkbox"> Send email to customer
                    </label>
                    <label class="alert-dialog-checkbox">
                      <input type="checkbox" id="remember-answer-checkbox"> Remember answer and don't ask me again
                    </label>
                  </div>
                </div>
                <div class="alert-actions">
                  <button class="alert-btn alert-cancel desktop-alert-cancel">Cancel</button>
                  <button class="alert-btn alert-ok desktop-alert-ok">Confirm</button>
                </div>
              </div>
            `;

            // Add overlay for center positioning
            const overlay = document.createElement('div');
            overlay.className = 'desktop-alert-overlay';
            overlay.style.position = 'fixed';
            overlay.style.top = '0';
            overlay.style.left = '0';
            overlay.style.right = '0';
            overlay.style.bottom = '0';
            overlay.style.display = 'flex';
            overlay.style.alignItems = 'center';
            overlay.style.justifyContent = 'center';
            overlay.style.zIndex = '9999';
            overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';

            // Ensure the dialog itself maintains its original styling
            alertDialog.style.position = 'relative';
            alertDialog.style.margin = 'auto';

            // Place the dialog inside the overlay
            document.body.appendChild(overlay);
            overlay.appendChild(alertDialog);

            // Animation
            overlay.style.opacity = '0';
            alertDialog.style.transform = 'scale(0.95)';
            setTimeout(() => {
              overlay.style.opacity = '1';
              alertDialog.style.transform = 'scale(1)';
            }, 10);

            // Handle close button
            const closeButton = alertDialog.querySelector('.alert-dialog-close');
            if (closeButton) {
              closeButton.addEventListener('click', () => {
                overlay.style.opacity = '0';
                alertDialog.style.transform = 'scale(0.95)';
                setTimeout(() => {
                  overlay.remove();
                }, 300);
              });
            }

            // Handle cancel button
            const cancelButton = alertDialog.querySelector('.alert-dialog-cancel');
            if (cancelButton) {
              cancelButton.addEventListener('click', () => {
                overlay.style.opacity = '0';
                alertDialog.style.transform = 'scale(0.95)';
                setTimeout(() => {
                  overlay.remove();
                }, 300);
              });
            }

            // Handle confirm button
            const confirmButton = alertDialog.querySelector('.alert-dialog-confirm');
            if (confirmButton) {
              confirmButton.addEventListener('click', () => {
                // Get checkbox values
                const sendEmail = alertDialog.querySelector('#send-email-checkbox').checked;
                const rememberAnswer = alertDialog.querySelector('#remember-answer-checkbox').checked;

                // Update order status
                product.status = newStatus;

                // Update badge in the button
                const statusBadge = statusButton.querySelector('.order-status-badge');
                if (statusBadge) {
                  statusBadge.className = `order-status-badge status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`;
                  statusBadge.innerHTML = `${getStatusIcon(newStatus)} <span>${newStatus}</span>`;
                }

                // Update orders list
                renderProductsList(product.id);

                // If sendEmail is checked, we would typically send an email here
                // This is just a placeholder
                if (sendEmail) {
                  console.log(`Would send email to ${product.email} about status change to ${newStatus}`);
                }

                // If rememberAnswer is checked, we would store this preference
                // This is just a placeholder
                if (rememberAnswer) {
                  // In a real implementation, this would store the preference
                  console.log(`Remember not to ask again for status changes to ${newStatus}`);
                  // For demo purposes, we could store this in localStorage
                  localStorage.setItem('dontAskStatusChange', 'true');
                }

                // Close dialog
                overlay.style.opacity = '0';
                alertDialog.style.transform = 'scale(0.95)';
                setTimeout(() => {
                  overlay.remove();
                }, 300);

                // Add ripple effect to selected option
                const ripple = document.createElement('span');
                ripple.classList.add('ripple');
                option.appendChild(ripple);
                setTimeout(() => {
                  ripple.remove();
                }, 600);

                // Close the dropdown with animation
                statusDropdown.style.opacity = '0';
                statusDropdown.style.transform = 'translateY(-10px)';

                // Hide after animation completes
                setTimeout(() => {
                  statusDropdown.style.display = 'none';
                  statusDropdown.style.transform = '';
                }, 200);
              });
            }
          } else {
            // If status hasn't changed, just close the dropdown
            statusDropdown.style.opacity = '0';
            statusDropdown.style.transform = 'translateY(-10px)';

            // Hide after animation completes
            setTimeout(() => {
              statusDropdown.style.display = 'none';
              statusDropdown.style.transform = '';
            }, 200);
          }
        });
      });
    }

    // Setup edit button
    const editButton = windowElement.querySelector('.orders-edit-button');
    if (editButton) {
      editButton.addEventListener('click', () => {
        showEditProductsForm(product, windowElement);
      });
    }

    // Setup delete button
    const deleteButton = windowElement.querySelector('.orders-delete-button');
    if (deleteButton) {
      deleteButton.addEventListener('click', () => {
        // Show confirmation dialog
        const confirmMessage = `Are you sure you want to delete product ${order.orderNumber}?`;
        if (confirm(confirmMessage)) {
          // Remove order from data
          const index = orders.findIndex(o => o.id === order.id);
          if (index !== -1) {
            orders.splice(index, 1);

            // Rebuild grouped orders
            const groupedOrders = orders.reduce((acc, order) => {
              if (!acc[order.letter]) acc[order.letter] = [];
              acc[order.letter].push(order);
              return acc;
            }, {});

            // Render updated list and clear content area
            renderProductsList();
            if (ordersContent) {
              productsContent.innerHTML = '<div class="no-order-selected">No order selected</div>';
            }
            // Hide the content section
            if (productsContentSection) {
              productsContentSection.style.visibility = 'hidden';
              productsContentSection.style.display = 'none';
            }
          }
        }
      });
    }

    // Setup more options button
    const moreButton = windowElement.querySelector('.orders-more-button');
    if (moreButton) {
      moreButton.addEventListener('click', (e) => {
        showOrdersMoreOptions(e.target, order);
      });
    }
  }

  // Updated getProductsContentHTML function to match the reference image with 2-column layout
  // Updated getProductsContentHTML function to match the reference image with 2-column layout
  function getProductsContentHTML(product) {
    return `
    <div class="product-edit-container">
      <div class="page-header">


<div class="order-id-and-time">
                                <div class="order-id">Edit product ${product.productName}</div>
                                <div class="order-created-and-modified">
                <div class="order-created">Created: 17 April 2025 23:36:56</div>
                <div class="order-modified">Last edit: 24 April 2025 23:36:56</div>
                </div>
                </div>



      </div>
      
      <div class="product-content-columns">
        <!-- Left Column - Product Information (2/3 width) -->
        <div class="product-main-column">
          <!-- Product Information Section -->
                      <h2 class="product-information-section-title">Product informations</h2>
          <section class="product-section">

            
            <div class="form-group">
            <div class="form-row-top-input" >
              <label for="product-name">Product name</label>
              <div class="char-count">58 of / 80 max recommended characters</div></div>
              <input type="text" id="product-name" class="form-control" value="${product.productName}">
              <div class="seo-url-preview">
                <span class="url-prefix">https://yourstore.com/products/</span><span class="url-slug">macbook-pro-m3-16-inch-2025</span> <a href="#" class="edit-link">Edit</a>
              </div>
            </div>
            
            <div class="form-group">
              <label for="product-description">Product description</label>
              <div class="rich-text-editor">
                <div class="editor-toolbar">
                <div class="toolbar-btns-left">
                  <button class="toolbar-btn"><i class="fas fa-robot"></i></button>
                  <div class="toolbar-btn-splitter"></div>
                  <button class="toolbar-btn"><i class="fas fa-paragraph"></i> Paragraph</button>
                  <div class="toolbar-btn-splitter"></div>
                  <button class="toolbar-btn"><i class="fas fa-bold"></i></button>
                  <button class="toolbar-btn"><i class="fas fa-italic"></i></button>
                  <button class="toolbar-btn"><i class="fas fa-underline"></i></button>
                  <div class="toolbar-btn-splitter"></div>
                  <button class="toolbar-btn"><i class="fas fa-align-left"></i></button>
                  <button class="toolbar-btn"><i class="fas fa-list"></i></button>
                  <div class="toolbar-btn-splitter"></div>
                  <button class="toolbar-btn"><i class="fas fa-link"></i></button>
                  <button class="toolbar-btn"><i class="fas fa-image"></i></button>
                  <button class="toolbar-btn"><i class="fas fa-video"></i></button>
                  <div class="toolbar-btn-splitter"></div>

                  <button class="toolbar-btn"><i class="fas fa-ellipsis-h"></i></button>
                  </div>
                  <div class="toolbar-btns-right">
                  <button class="toolbar-btn"><i class="fas fa-code"></i></button>
                  </div>
                </div>
                <div class="editor-content" contenteditable="true">
                  <p>Experience the next evolution of performance and portability with the all-new MacBook Pro powered by Apple's revolutionary M3 chip. Designed for creative professionals, developers, and power users, this 16-inch powerhouse combines stunning visuals with blazing speed, all wrapped in a sleek, durable chassis.</p>
                  <p>Key Features:</p>
                  <ul>
                    <li>Apple M3 Chip - Built with a 3nm architecture for unmatched speed efficiency, and graphics.</li>
                    <li>16.2" Liquid Retina XDR Display - Immerse yourself in ultra-rich colors, deep blacks, and up to 1600 nits of brightness.</li>
                    <li>Up to 22 Hours Battery Life - Work or create all day on a single charge.</li>
                  </ul>
                </div>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group half">
                <label for="sku">SKU</label>
                <input type="text" id="sku" class="form-control" value="MB-M3-16-512">
              </div>
              <div class="form-group half">
                <label for="category">Category</label>
                <div class="select-container">
                <select id="category" class="form-control category-dropdown-select">
                  <option value="">Select category</option>
                </select>
                <div class="category-dropdown">
                  <div class="category-dropdown-header">
                    <i class="fas fa-search"></i><h3>Type to search...</h3>
                  </div>
                  <div class="category-tabs">
                    <div class="category-tab active">All categories</div>
                    <div class="category-tab">Most Used</div>
                  </div>
                  <div class="category-options-container">
                    <div class="category-dropdown-option"><input type="checkbox"> Artisti</div>
                    <div class="category-dropdown-option"><input type="checkbox"> Editabile</div>
                    <div class="category-dropdown-option category-child"><input type="checkbox"> Animale</div>
                    <div class="category-dropdown-option category-child"><input type="checkbox"> Desene Animate</div>
                    <div class="category-dropdown-option category-child"><input type="checkbox"> Food & Drinks</div>
                    <div class="category-dropdown-option category-child"><input type="checkbox"> Muzica</div>
                    <div class="category-dropdown-option category-child"><input type="checkbox"> Pasiuni</div>
                    <div class="category-dropdown-option category-child"><input type="checkbox"> Profesii</div>
                  </div>
                  <div class="category-dropdown-footer">
                    <a href="#" class="add-category-link">+ Add new category</a>
                  </div>
                </div>
                </div>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group half">
                <label for="gtin">GTIN, UPC, EAN, or ISBN</label>
                <input type="text" id="gtin" class="form-control" value="">
              </div>
              <div class="form-group half">
                <label for="product-id">Brand Name</label>
                <div class="select-container">
                <select id="brand" class="form-control">
                  <option value="laptop" selected>Apple</option>
                  <option value="laptop"  style="color: var(--os-gray-dark) !important;">Samsung</option>
                  <option value="laptop"  style="color: var(--os-gray-dark) !important;">Microsoft</option>
                  <option value="laptop"  style="color: var(--os-gray-dark) !important;">Lenovo</option>
                  <option value="laptop"  style="color: var(--os-gray-dark) !important;">Dell</option>
                  <option value="laptop"  style="color: var(--os-gray-dark) !important;">HP</option>
                  <option value="laptop"  style="color: var(--os-gray-dark) !important;">Asus</option>
                  <option value="laptop"  style="color: var(--os-gray-dark) !important;">Acer</option>
                </select>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label>Tags</label>
              <div class="tags-container">
                <span class="tag">MacBook <i class="fas fa-times"></i></span>
                <span class="tag">Apple <i class="fas fa-times"></i></span>
                <span class="tag">M3 <i class="fas fa-times"></i></span>
                <span class="tag">16-inch <i class="fas fa-times"></i></span>
              </div>
            </div>
          </section>
          
          <!-- Product Images Section -->
          <section class="product-section">
          <div class="product-media-container">
            <h2>Product images & Media <i class="fas fa-info-circle"></i></h2>
            <div class="product-media-options">
              <div class="product-media-option">
                <i class="fas fa-image"></i>
                <span>Add 360 Viewer</span>
              </div>
              <div class="product-media-option">
                <i class="fas fa-video"></i>
                <span>Add Video</span>
            </div></div></div>
            <div class="product-images-container">
              <div class="product-image-upload">
                <div class="upload-icon">
                  <i class="fas fa-cloud-upload-alt"></i>
                </div>
                <div class="upload-text">Drop your image here</div>
                <div class="upload-subtext">or select <a href="#">Click to browse</a></div>
              </div>
              
              <div class="product-image-preview">
                <img src="img/appsimg/macbook-pro.png" alt="MacBook Pro" class="main-preview-image">
              </div>
            </div>
            
            <div class="product-image-gallery">
              <div class="image-thumbnail-nav prev-nav">
                <i class="fas fa-chevron-left"></i>
              </div>
              <div class="image-thumbnails-container">
                <div class="image-thumbnail selected">
                  <img src="img/appsimg/macbook-pro.png" alt="MacBook Pro">
                </div>
                <div class="image-thumbnail">
                  <img src="img/appsimg/macbook-pro.png" alt="MacBook Pro">
                </div>
                <div class="image-thumbnail">
                  <img src="img/appsimg/macbook-pro.png" alt="MacBook Pro">
                </div>
                <div class="image-thumbnail">
                  <img src="img/appsimg/macbook-pro.png" alt="MacBook Pro">
                </div>
                <div class="image-thumbnail">
                  <img src="img/appsimg/macbook-pro.png" alt="MacBook Pro">
                </div>
              </div>
              <div class="image-thumbnail-nav next-nav">
                <i class="fas fa-chevron-right"></i>
              </div>
            </div>
            
            <div class="image-info-text">Only image of .jpeg, .jpg, .png and a minimum size of 500 x 500px for optimal image use.</div>
          </section>



          
          <!-- Pricing Section -->
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Pricing</h2>
              <div class="toggle-container">
                <span class="toggle-label">Enable catalog mode (disable pricing)</span>
                <label class="toggle-switch">
                  <input type="checkbox" class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              <div class="form-row">
                <div class="form-group half"><div class="form-row-top-input">
                  <label for="regular-price">Regular price</label>
                  <a href="#" class="schedule-link">Schedule</a>
                  </div>
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="text" id="regular-price" class="form-control" value="2,989">
                  </div>
                </div>
                <div class="form-group half">  <div class="form-row-top-input">
                  <label for="sale-price">Sale price</label>
                
                    <a href="#" class="schedule-link">Schedule</a>
                  </div>
                  <div class="input-group sale-price-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="text" id="sale-price" class="form-control" value="3,599">
                  </div>

                </div>
              </div>
                            <div class="checkbox-option">
                <input type="checkbox" id="continue-selling" checked>
                <label for="continue-selling">Charge tax on this variant</label>
              </div>
            </div>
          </section>
          
          <!-- Stock and Inventory Section -->
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Stock and inventory</h2>
              <div class="toggle-container">
                <span class="toggle-label">Enable stock for this product</span>
                <label class="toggle-switch">
                  <input type="checkbox" checked class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              <div class="form-row">
                <div class="form-group half">
                  <label for="available-quantity">Available Quantity</label>
                  <input type="number" id="available-quantity" class="form-control" value="25">
                </div>
                <div class="form-group half">
                  <label for="minimum-stock">Low Stock Alert</label>
                  <input type="number" id="minimum-stock" class="form-control" value="5">
                </div>
                                <div class="form-group half">
                  <label for="minimum-stock">In stock?</label>
                                  <div class="select-container">
                  <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">In stock</option>
                <option value="draft" style="color: #333 !important;">Out of stock</option>
                <option value="archived" style="color: #333 !important;">Backorder</option>
              </select>
              </div>
                </div>
              </div>
              
              <div class="form-group"><div class="form-row-top-input">
                <label for="inventory-location">Inventory Location</label>
                                <div class="more-settings-container">
                  <a href="#" class="link-text more-settings">More Stock settings</a>
                </div> </div>
                <div class="select-container">
                  <select id="inventory-location" class="form-control">
                    <option value="main-warehouse" selected>Main Warehouse - San Francisco, California</option>
                  </select>
                </div>

              </div>
              
              <div class="checkbox-option">
                <input type="checkbox" id="continue-selling" checked>
                <label for="continue-selling">Continue selling when out of stock</label>
              </div>
            </div>
          </section>
          
          <!-- Attributes Section -->
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Attributes</h2>
              <div class="toggle-container">
                <span class="toggle-label">Enable attributes for this product</span>
                <label class="toggle-switch">
                  <input type="checkbox" checked class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              <div class="section-description">
                Attributes help products be filtered better in search results
              </div>
              
              <div class="attribute-group">
                <div class="attribute-header">
                            <div class="variant-header-left">
                <i class="fa-solid fa-bars-staggered"></i>
                            <h3> Attribute 1</h3>
                </div>
                  <div class="attribute-actions">
                    <a href="#" class="link-text">Advanced attribut</a>
                    <button class="delete-btn"><i class="fas fa-trash"></i></button>
                  </div>
                </div>
                
                <div class="form-row">
                  <div class="form-group half" style="flex: 0.4 !important;">
                    <label>Type</label>
                    <div class="select-container">
                      <select class="form-control">
                        <option value="color" selected>Color</option>
                      </select>
                    </div>
                  </div>
                  <div class="form-group half">
                    <label>Value</label>
                    <div class="tags-container">
                      <div class="tag">
                        <span class="color-dot black"></span>
                        <span>Space Black</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="attribute-group">
                <div class="attribute-header">
                            <div class="variant-header-left">
                <i class="fa-solid fa-bars-staggered"></i>
                            <h3> Attribute 2</h3>
                </div>
                  <div class="attribute-actions">
                    <a href="#" class="link-text">Advanced attribut</a>
                    <button class="delete-btn"><i class="fas fa-trash"></i></button>
                  </div>
                </div>
                
                <div class="form-row">
                  <div class="form-group half" style="flex: 0.4 !important;">
                    <label>Type</label>
                    <div class="select-container">
                      <select class="form-control">
                        <option value="ssd" selected>SSD</option>
                      </select>
                    </div>
                  </div>
                  <div class="form-group half">
                    <label>Value</label>
                    <div class="tags-container">
                      <div class="tag">
                        <span>512GB</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="add-more-container">
                <button class="btn btn-add"><i class="fas fa-plus"></i> Add attribut</button>
              </div>
            </div>
          </section>
          
          <!-- Product Options Section -->
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Product Options</h2>
              <div class="toggle-container">
                <span class="toggle-label">Product has options</span>
                <label class="toggle-switch">
                  <input type="checkbox" checked class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              <div class="section-description">
                Options allow users to select different options for the same product like color, size, etc.
              </div>
              
              <div class="variant-group">
                <div class="variant-header">
                            <div class="variant-header-left">
                <i class="fa-solid fa-bars-staggered"></i>
                            <h3> Option 1</h3>
                </div>
                  <div class="variant-actions">
                    <button class="delete-btn"><i class="fas fa-trash"></i></button>
                  </div>
                </div>
                
                <div class="form-row">
                  <div class="form-group half" style="flex: 0.4 !important;">
                    <label>Type</label>
                    <div class="select-container" >
                      <select class="form-control">
                        <option value="color" selected>Color</option>
                      </select>
                    </div>
                  </div>
                  <div class="form-group half" >
                    <label>Value</label>
                    <div class="tags-container">
                      <div class="tag">
                        <span class="color-dot black"></span>
                        <span>Space Black</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                      <div class="tag">
                        <span class="color-dot silver"></span>
                        <span>Silver</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="variant-group">
                <div class="variant-header">
                            <div class="variant-header-left">
                <i class="fa-solid fa-bars-staggered"></i>
                            <h3> Option 2</h3>
                </div>
                  <div class="variant-actions">
                      <button class="delete-btn"><i class="fas fa-trash"></i></button>
                  </div>
                </div>
                
                <div class="form-row">
                  <div class="form-group half" style="flex: 0.4 !important;">
                    <label>Type</label>
                    <div class="select-container">
                      <select class="form-control">
                        <option value="ssd" selected>Size</option>
                      </select>
                    </div>
                  </div>
                  <div class="form-group half">
                    <label>Value</label>
                    <div class="tags-container">
                      <div class="tag">
                        <span>Small</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                      <div class="tag">
                        <span>Medium</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                      <div class="tag">
                        <span>Large</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="add-more-container">
                <button class="btn btn-add"><i class="fas fa-plus"></i> Add Product Option</button>
              </div>
            </div>
          </section>


<!-- Variants Section -->
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Variants</h2>
              <div class="toggle-container">
                <span class="toggle-label">Product has variants</span>
                <label class="toggle-switch">
                  <input type="checkbox" checked class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              <div class="section-description">
                Variants allow users to select variations of the same product but with different prices and stock.
              </div>
              
              <div class="variant-group">
                <div class="variant-header">
                            <div class="variant-header-left">
                <i class="fa-solid fa-bars-staggered"></i>
                            <h3> Variant 1</h3>
                </div>
                  <div class="variant-actions">
                    <a href="#" class="link-text">Advanced variation</a>
                    <button class="delete-btn"><i class="fas fa-trash"></i></button>
                  </div>
                </div>
                
                <div class="form-row">
                  <div class="form-group half" style="flex: 0.4 !important;">
                    <label>Type</label>
                    <div class="variant-image-upload-container" >
<div class="variant-image-upload">
                <div class="upload-icon">
                  <i class="fas fa-cloud-upload-alt"></i>
                </div>

              </div>
                              <span class="variant-image-upload-text">Small</span>
                    </div>
                  </div>
                  <div class="form-group half" >
                    <label>Value</label>
                     <div class="variant-price-container">
<div class="variant-text-group">
                    text
                  </div>

                    </div>
                  </div>

                  <div class="form-group half" >
                    <label>Value</label>
                     <div class="variant-price-container">
<div class="variant-text-group">
                    text
                  </div>

                    </div>
                  </div>

                  <div class="form-group half" >
                    <label>Value</label>
                     <div class="variant-price-container">
<div class="variant-text-group">
                    text
                  </div>

                    </div>
                  </div>


                  <div class="form-group half" >
                    <label>Price</label>
                    <div class="variant-price-container">
<div class="input-group sale-price-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="text" id="sale-price" class="form-control" value="3,599">
                  </div>

                    </div>
                  </div>
                </div>
              </div>


 <div class="variant-group">
                <div class="variant-header">
                            <div class="variant-header-left">
                <i class="fa-solid fa-bars-staggered"></i>
                            <h3> Variant 1</h3>
                </div>
                  <div class="variant-actions">
                    <a href="#" class="link-text">Edit variant</a>
                    <button class="delete-btn"><i class="fas fa-trash"></i></button>
                  </div>
                </div>
                
                <div class="form-row">
                  <div class="form-group half" style="flex: 0.4 !important;">
                    <label>Type</label>
                    <div class="variant-image-upload-container" >
<div class="variant-image-upload">
                <div class="upload-icon">
                  <i class="fas fa-cloud-upload-alt"></i>
                </div>

              </div>
                              <span class="variant-image-upload-text">Small</span>
                    </div>
                  </div>
                  <div class="form-group half" >
                    <label>Value</label>
                     <div class="variant-price-container">
<div class="select-container">
                      <select class="form-control">
                        <option value="color" selected="">Color</option>
                      </select>
                    </div>

                    </div>
                  </div>

                  <div class="form-group half" >
                    <label>Value</label>
                     <div class="variant-price-container">
<div class="select-container">
                      <select class="form-control">
                        <option value="color" selected="">Color</option>
                      </select>
                    </div>

                    </div>
                  </div>

                  <div class="form-group half" >
                    <label>Value</label>
                     <div class="variant-price-container">
<div class="select-container">
                      <select class="form-control">
                        <option value="color" selected="">Color</option>
                      </select>
                    </div>

                    </div>
                  </div>


                  <div class="form-group half" >
                    <label>Price</label>
                    <div class="variant-price-container">
<div class="input-group sale-price-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="text" id="sale-price" class="form-control" value="3,599">
                  </div>

                    </div>
                  </div>
                </div>
              </div>




              



              

              <div class="variant-group">
              <div class="variant-header">
                            <div class="variant-header-left">
                <i class="fa-solid fa-bars-staggered"></i>
                            <h3> Variant 1</h3> <i class="fa-solid fa-chevron-up"></i>
                </div>
                <div class="variant-actions">
                  <a href="#" class="link-text">Edit variant</a>
                  <button class="delete-btn"><i class="fas fa-trash"></i></button>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group half" style="flex: 0.4 !important;">
                  <div class="variant-image-upload-container" >
<div class="variant-image-upload">
              <div class="upload-icon">
                <i class="fas fa-cloud-upload-alt"></i>
              </div>

            </div>
            
                  </div>
                </div>
                <div class="form-group half" >
                   <div class="variant-price-container">
<div class="select-container">
                    <select class="form-control">
                      <option value="color" selected="">Color</option>
                    </select>
                  </div>

                  </div>
                </div>

                <div class="form-group half" >
                   <div class="variant-price-container">
<div class="select-container">
                    <select class="form-control">
                      <option value="color" selected="">Color</option>
                    </select>
                  </div>

                  </div>
                </div>

                <div class="form-group half" >
                   <div class="variant-price-container">
<div class="sku-container">
<input type="text" id="sale-price" class="form-control" value="SKU">
                  </div>

                  </div>
                </div>


                <div class="form-group half" >
                  <div class="variant-price-container">
<div class="input-group sale-price-group">
                  <div class="input-group-prepend">
                    <span class="input-group-text">$</span>
                  </div>
                  <input type="text" id="sale-price" class="form-control" value="3,599">
                </div>

                  </div>
                </div>
              </div>
            </div>


              



            <div class="variant-group">
            
            
            <div class="form-row">
              <div class="form-group half" style="flex: 0.4 !important;">
                <div class="variant-image-upload-container" >
<div class="variant-image-upload">
            <div class="upload-icon">
              <i class="fas fa-cloud-upload-alt"></i>
            </div>

          </div>
          
                </div>
              </div>
              <div class="variant-user-content-with-header">
              <div class="variant-header">
                          <div class="variant-header-left">
              <i class="fa-solid fa-bars-staggered"></i>
                          <h3> Variant 1</h3> <i class="fa-solid fa-chevron-up"></i>
              </div>
              <div class="variant-actions">
                <a href="#" class="link-text">Edit variant</a>
                <button class="delete-btn"><i class="fas fa-trash"></i></button>
              </div>
            </div>
                            <div class="variant-user-content">
              <div class="form-group half" >
                 <div class="variant-price-container">
<div class="select-container">
                  <select class="form-control">
                    <option value="color" selected="">Color</option>
                  </select>
                </div>

                </div>
              </div>

              <div class="form-group half" >
                 <div class="variant-price-container">
<div class="select-container">
                  <select class="form-control">
                    <option value="color" selected="">Color</option>
                  </select>
                </div>

                </div>
              </div>

              <div class="form-group half" >
                 <div class="variant-price-container">
<div class="sku-container">
<input type="text" id="sale-price" class="form-control" value="SKU">
                </div>

                </div>
              </div>


              <div class="form-group half" >
                <div class="variant-price-container">
<div class="input-group sale-price-group">
                <div class="input-group-prepend">
                  <span class="input-group-text">$</span>
                </div>
                <input type="text" id="sale-price" class="form-control" value="3,599">
              </div>
</div></div>
                </div>
              </div>
            </div>
          </div>

            



          <div class="variant-group">
            
            
          <div class="form-row">

            <div class="variant-user-content-with-header">
            <div class="variant-header">
                        <div class="variant-header-left">
            <i class="fa-solid fa-bars-staggered"></i>
                        <h3> Variant 1</h3> <i class="fa-solid fa-chevron-up"></i>
            </div>
            <div class="variant-actions">
              <a href="#" class="link-text">Edit variant</a>
              <button class="delete-btn"><i class="fas fa-trash"></i></button>
            </div>
          </div>
                          <div class="variant-user-content">
            <div class="form-group half" >
               <div class="variant-price-container">
<div class="select-container">
                <select class="form-control">
                  <option value="color" selected="">Color</option>
                </select>
              </div>

              </div>
            </div>

            <div class="form-group half" >
               <div class="variant-price-container">
<div class="select-container">
                <select class="form-control">
                  <option value="color" selected="">Color</option>
                </select>
              </div>

              </div>
            </div>

            <div class="form-group half" >
               <div class="variant-price-container">
<div class="sku-container">
<input type="text" id="sale-price" class="form-control" value="SKU">
              </div>

              </div>
            </div>


            <div class="form-group half" >
              <div class="variant-price-container">
<div class="input-group sale-price-group">
              <div class="input-group-prepend">
                <span class="input-group-text">$</span>
              </div>
              <input type="text" id="sale-price" class="form-control" value="3,599">
            </div>
</div></div>
              </div>
            </div>
                          <div class="form-group half" style="flex: 0.4 !important;">
              <div class="variant-image-upload-container" >
<div class="variant-image-upload">
          <div class="upload-icon">
            <i class="fas fa-cloud-upload-alt"></i>
          </div>

        </div>
        
              </div>
            </div>
          </div>
        </div>



              
              <div class="add-more-container">
                <button class="btn btn-add"><i class="fas fa-plus"></i> Add Variant</button>
              </div>
            </div>
          </section>

          
          <!-- Shipping & Logistics Section -->
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Shipping & Logistics</h2>
              <div class="toggle-container">
                <span class="toggle-label">This product require shipping</span>
                <label class="toggle-switch">
                  <input type="checkbox" checked class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              <div class="form-row">
                <div class="form-group half">
                  <label for="shipping-weight">Shipping Weight (kg)</label>


                  <div class="select-container shipping-weight">
                  <input type="text" class="form-control" value="200">
                    <select id="shipping-weight" class="form-control">
                      <option value="grams" selected>Grams</option>
                                            <option value="grams" selected>KG</option>
                    </select>
                  </div>


                </div>
                <div class="form-group half">
                  <label for="shipping-class">Shipping Class</label>
                  <div class="select-container">
                    <select id="shipping-class" class="form-control">
                      <option value="heavy" selected>Heavy</option>
                    </select>
                  </div>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group third">
                  <label for="length">Length</label>
<div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">cm</span>
                    </div>
                    <input type="text" class="form-control" value="2,989">
                  </div>
                </div>
                <div class="form-group third">
                  <label for="breadth">Breadth</label>
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">cm</span>
                    </div>
                    <input type="text" class="form-control" value="2,989">
                  </div>
                </div>
                <div class="form-group third">
                  <label for="width">Width</label>
<div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">cm</span>
                    </div>
                    <input type="text" class="form-control" value="2,989">
                  </div>
                </div>
              </div>
              
              <div class="add-more-container">
                <a href="#" class="link-text">Add customes shipping information</a>
              </div>
            </div>
          </section>



          <!-- Product Video Section 
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Product video</h2>
              <div class="toggle-container">
                <label class="toggle-switch">
                  <input type="checkbox" checked class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              <div class="form-group"><div class="form-row-top-input">
                <label for="product-short-description">Video link</label>
                </div>
                <input type="text" id="product-short-description" class="form-control" rows="3" placeholder="https://www.youtube.com/watch?v=dQw4w9WgXcQ">
              </div>

                          <div class="product-images-container">
              <div class="product-image-upload">
                <div class="upload-icon">
                  <i class="fas fa-cloud-upload-alt"></i>
                </div>
                <div class="upload-text">Drop your thumbnail video image here</div>
                <div class="upload-subtext">or select <a href="#">Click to browse</a></div>
              </div>
              
              <div class="product-image-preview">
                <img src="img/appsimg/macbook-pro.png" alt="MacBook Pro" class="main-preview-image">
              </div>
            </div>
              
            </div>
          </section>-->




          
          <!-- Additional Info Section -->
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Aditional info</h2>
              <div class="toggle-container">
                <label class="toggle-switch">
                  <input type="checkbox" checked class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              <div class="form-group"><div class="form-row-top-input">
                <label for="product-short-description">Product short description</label>
                <div class="char-count">111 out of 160 max recommended characters.</div>
                </div>
                <textarea id="product-short-description" class="form-control" rows="3" placeholder="Max 160 characters"></textarea>
              </div>
              
              <div class="form-group">
                <label for="after-purchase-note">After Purchase note</label>
                <textarea id="after-purchase-note" class="form-control" rows="5"></textarea>
              </div>
            </div>
          </section>
          




          <!-- Upsale & Crosssell Section -->
          <section class="product-section toggle-section">
            <div class="section-header-with-toggle">
              <h2>Upsale & Crosssell</h2>
              <div class="toggle-container">
                <span class="toggle-label">Product has upsale & crosssell</span>
                <label class="toggle-switch">
                  <input type="checkbox" checked class="section-toggle">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="section-content">
              
              
              <div class="upsale-group">
                              
                <div class="form-row">
                  
                  <div class="form-group half" >
                    <label>Upsale</label>
                    <div class="tags-container">
                      <div class="tag">
<div class="products-list-avatar" style="background-color: transparent;">
          <img src="img/appsimg/router.png" alt="Product" style="width: 42px; height: 42px; object-fit: contain;">
        </div>
                        <span>Space Black nume produs mai lung sa vedem cum se vede</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                      <div class="tag">
                        <div class="products-list-avatar" style="background-color: transparent;">
          <img src="img/appsimg/camera.png" alt="Product" style="width: 42px; height: 42px; object-fit: contain;">
        </div>
                        <span>Silver</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="crosssell-group">
                
                
                <div class="form-row">
                  
                  <div class="form-group half">
                    <label>Crosssell</label>
                    <div class="tags-container">
                      <div class="tag">
                        <div class="products-list-avatar" style="background-color: transparent;">
          <img src="img/appsimg/router.png" alt="Product" style="width: 42px; height: 42px; object-fit: contain;">
        </div>
                        <span>512GB</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                      <div class="tag">
                        <span>1TB</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                      <div class="tag">
                        <span>2TB</span>
                        <button class="remove-tag"><i class="fas fa-times"></i></button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
             
            </div>
          </section>




          <!-- Snippet Preview Section -->
          <section class="product-section">
            <div class="section-header-with-link">
              <h2>Snippet Preview</h2>
              <a href="#" class="link-text">Social Media Post Customizer</a>
            </div>
            
            <div class="section-content">
              <div class="snippet-preview">
                              <div class="snippet-site-title-url">Street-wear.ro</div>
                <div class="snippet-url">https://street-wear.ro/produs/tricouri-altfel/tricouri-destepte/its-about-time/</div>
                <h3 class="snippet-title">It's about time – Tricouri & Hanorace Personalizate – Street-wear.ro</h3>
                <p class="snippet-description">Este timpul... sau este despre timp... Tricouri si hanorace personalizate de artisti romani - Calitate premium!</p>
              </div>
            </div>
          </section>
        </div>
        
        <!-- Right Column - Publishing Options (1/3 width) -->
        <div class="product-product-publish-column">
          <h2 class="sidebar-title">Publishing Settings</h2>
          <div class="publishing-options-section">
          
          <div class="publish-section">
          <div class="form-row-top-input">
            <label class="publish-label">Status</label>
            <div class="schedule-publish-btn">Schedule</div>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected style="color: #333 !important;">Active</option>
                <option value="draft" style="color: #333 !important;">Draft</option>
                <option value="archived" style="color: #333 !important;">Staff Review</option>
              </select>
            </div>
          </div>
          
          <div class="publish-section">
            <label class="publish-label">Schedule publishing</label>
            <div class="date-picker-container">
              <input type="text" class="form-control date-input" value="05-01-2025">
              <button class="calendar-button">
                <i class="fas fa-calendar-alt"></i>
              </button>
            </div>
          </div>





</div>

          <div class="publish-section featured-product">
            <div class="featured-product-content">
              <div class="star-icon">★</div>
              <span>This is a featured product</span>
            </div>
            <label class="toggle-switch">
              <input type="checkbox" checked>
              <span class="toggle-slider"></span>
            </label>
          </div>



          <div class="publish-section-toggle">
            <input type="checkbox" id="selling-type-toggle" class="section-toggle-input" checked>
            <div class="publish-section-header">
              <h3>Language</h3>
              <label class="toggle-switch" for="selling-type-toggle">
                <span class="toggle-slider"></span>
              </label>
            </div>
            
            <div class="publish-section-content">
<div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Language</label>
                        <div class="schedule-publish-btn">Generate with A.I.</div>

            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">English</option>
                                <option value="draft" style="color: #333 !important;">Spanish</option>
                <option value="draft" style="color: #333 !important;">French</option>
                <option value="archived" style="color: #333 !important;">German</option>
              </select>
            </div>
          </div>
<div class="translation-buttons-section">
<button class="btn btn-secondary">Manual translation</button>
<button class="btn btn-primary">Generate with A.I.</button>
</div>
          
              </div>
            </div>
          


          


          <div class="publish-section-toggle">
              <input type="checkbox" id="additional-toggle" class="section-toggle-input" checked>
            <div class="publish-section-header">
              <h3>Additional</h3>
              <label class="toggle-switch" for="additional-toggle">
                <span class="toggle-slider"></span>
              </label>
            </div>
            
            <div class="publish-section-content">
              <div class="profit-calculator">
                <div class="calc-row">
                  <label>Custom badge</label>
                  <div class="input-group">

                    <input type="text" class="form-control" value="HOT">
                  </div>
                </div>
                
                
                <div class="calc-row">
                  <label>Margin</label>
                  <div class="input-group">
                    <input type="text" class="form-control" value="800 x 800" disabled>
                  </div>
                </div>
              </div>
            </div>
          </div>



<div class="publish-section-toggle">
            <input type="checkbox" id="visibility-toggle" class="section-toggle-input" checked>
            <div class="publish-section-header">
              <h3>Visibility</h3>
              <label class="toggle-switch" for="visibility-toggle">
                <span class="toggle-slider"></span>
              </label>
            </div>
            
            <div class="publish-section-content">
<div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Selling type</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Both in-store and online</option>
                                <option value="draft" style="color: #333 !important;">Online selling only</option>
                <option value="draft" style="color: #333 !important;">In-store selling only/option>
              </select>
            </div>
          </div>


          <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Visibility</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">Shop and search results</option>
                                <option value="draft" style="color: #333 !important;">Shop only</option>
                <option value="draft" style="color: #333 !important;">Search results only</option>
                <option value="archived" style="color: #333 !important;">Hidden</option>
              </select>
            </div>
          </div>



          <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Markets</label>
            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">All over the world</option>
                                <option value="draft" style="color: #333 !important;">Continental (Europe)</option>
                <option value="draft" style="color: #333 !important;">National (Romania)</option>
                <option value="archived" style="color: #333 !important;">Judet (Constanta)</option>
                                <option value="archived" style="color: #333 !important;">Local (Constanta area)</option>

              </select>
            </div>
          </div>


          <div class="publish-section">  
 <div class="form-row-top-input">
            <label class="publish-label">Language</label>
                        <div class="schedule-publish-btn">Generate with A.I.</div>

            </div>
            <div class="select-container">
              <select class="form-control">
                <option value="active" selected="" style="color: #333 !important;">English</option>
                                <option value="draft" style="color: #333 !important;">Spanish</option>
                <option value="draft" style="color: #333 !important;">French</option>
                <option value="archived" style="color: #333 !important;">German</option>
              </select>
            </div>
          </div>
          


          

          
              </div>
            </div>





          
          <div class="publish-section-toggle">
            <input type="checkbox" id="profit-calculator-toggle" class="section-toggle-input" checked>
            <div class="publish-section-header">
              <h3>Profit calculator</h3>
              <label class="toggle-switch" for="profit-calculator-toggle">
                <span class="toggle-slider"></span>
              </label>
            </div>
            
            <div class="publish-section-content">
              <div class="profit-calculator">
                <div class="calc-row">
                  <label>Cost per item</label>
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="text" class="form-control" value="2,989">
                  </div>
                </div>
                
                <div class="calc-row">
                  <label>Profit</label>
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="text" class="form-control" value="200" disabled>
                  </div>
                </div>
                
                <div class="calc-row">
                  <label>Margin</label>
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="text" class="form-control" value="8.3%" disabled>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="publish-section-toggle">
            <input type="checkbox" id="example-toggle" class="section-toggle-input">
            <div class="publish-section-header">
              <h3>Example of closed item</h3>
              <label class="toggle-switch" for="example-toggle">
                <span class="toggle-slider"></span>
              </label>
            </div>
            
            <div class="publish-section-content">
              <!-- Content would go here when toggle is on -->
              <p>This content is hidden when the toggle is off.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
  }

  // Note: The toggle functionality is now handled by the initializeProductSectionToggles function in app.js
  // This ensures we don't have duplicate functions causing conflicts

  // Initialize product section toggles for both columns
  function initializeProductSectionToggles() {
    console.log('Initializing product section toggles');

    // Handle toggles in product-main-column
    const mainColumnToggles = document.querySelectorAll('.product-main-column .section-toggle');
    mainColumnToggles.forEach(toggle => {
      const toggleSection = toggle.closest('.toggle-section');
      const sectionContent = toggleSection.querySelector('.section-content');

      // Set initial state (all on by default except pricing)
      if (toggleSection.querySelector('h2').textContent.trim().toLowerCase() === 'pricing') {
        toggle.checked = false;
        if (sectionContent) sectionContent.style.display = 'none';
      } else {
        toggle.checked = true;
        if (sectionContent) sectionContent.style.display = 'block';
      }

      // Add event listener
      toggle.addEventListener('change', () => {
        if (sectionContent) {
          sectionContent.style.display = toggle.checked ? 'block' : 'none';
        }
      });
    });

    // Handle toggles in product-product-publish-column (already working, but adding for consistency)
    const publishColumnToggles = document.querySelectorAll('.product-product-publish-column .section-toggle-input');
    publishColumnToggles.forEach(toggle => {
      const toggleSection = toggle.closest('.publish-section-toggle');
      const sectionContent = toggleSection.querySelector('.publish-section-content');

      // Set initial state based on checked attribute
      if (sectionContent) {
        sectionContent.style.display = toggle.checked ? 'block' : 'none';
      }

      // Add event listener
      toggle.addEventListener('change', () => {
        if (sectionContent) {
          sectionContent.style.display = toggle.checked ? 'block' : 'none';
        }
      });
    });
    
    // Initialize category dropdown
    initializeCategoryDropdown();
  }
  
  // Initialize the category dropdown functionality
  function initializeCategoryDropdown() {
    const categorySelect = document.getElementById('category');
    const categoryDropdown = document.querySelector('.category-dropdown');
    const selectContainer = categorySelect ? categorySelect.closest('.select-container') : null;
    
    if (!categorySelect || !categoryDropdown || !selectContainer) return;
    
    // Ensure dropdown is initially hidden
    categoryDropdown.style.display = 'none';
    categoryDropdown.classList.remove('show');
    
    // Prevent the native dropdown from showing
    categorySelect.addEventListener('mousedown', (e) => {
      e.preventDefault();
      e.stopPropagation();
    });
    
    // Show dropdown when clicking on the select container
    selectContainer.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      if (categoryDropdown.classList.contains('show')) {
        categoryDropdown.style.opacity = '0';
        setTimeout(() => {
          categoryDropdown.classList.remove('show');
          categoryDropdown.style.display = 'none';
        }, 200);
      } else {
        // Position the dropdown
        categoryDropdown.classList.add('show');
        categoryDropdown.style.display = 'block';
        categoryDropdown.style.opacity = '0';
        
        // Force reflow
        categoryDropdown.offsetHeight;
        
        // Animate in
        categoryDropdown.style.transition = 'opacity 0.2s ease-out';
        categoryDropdown.style.opacity = '1';
      }
    });
    
    // Handle tab switching
    const tabs = categoryDropdown.querySelectorAll('.category-tab');
    tabs.forEach(tab => {
      tab.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        
        // In a real implementation, you would show/hide categories based on the selected tab
        // For this demo, we'll just keep all categories visible
      });
    });
    
    // Handle option selection
    const options = categoryDropdown.querySelectorAll('.category-dropdown-option');
    options.forEach(option => {
      option.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Update the checkbox
        const checkbox = option.querySelector('input[type="checkbox"]');
        checkbox.checked = !checkbox.checked;
        
        // Update the selected state visually
        if (checkbox.checked) {
          option.classList.add('selected');
          
          // Update the select value
          const selectedOption = categorySelect.querySelector('option');
          if (selectedOption) {
            selectedOption.textContent = option.textContent.trim();
          }
        } else {
          option.classList.remove('selected');
        }
      });
    });
    
    // Create add new category form HTML
    const addCategoryFormHTML = `
      <div class="add-category-form">
        <div class="form-group">
          <label for="new-category-name">Category name</label>
          <input type="text" id="new-category-name" class="form-control" placeholder="Enter category name">
        </div>
        <div class="form-group">
          <label for="parent-category">Parent category</label>
          <div class="select-container">
            <select id="parent-category" class="form-control">
              <option value="" selected style="color: #333;" >— Parent Brand —</option>
              <option value="artisti" style="color: #333;">Artisti</option>
              <option value="editabile" style="color: #333;">Editabile</option>
            </select>
          </div>
        </div>
        <div class="add-category-actions">
          <button class="btn-cancel">Cancel</button>
          <button class="btn-add-category">Add Category</button>
        </div>
      </div>
    `;
    
    // Define the add category handler function separately so we can reuse it
    function handleAddCategoryClick(e) {
      e.preventDefault();
      e.stopPropagation();
      
      // Check if form is already added
      const existingForm = categoryDropdown.querySelector('.add-category-form');
      if (existingForm) {
        // Form already exists, just show it
        existingForm.style.display = 'block';
        return;
      }
      
      // Add the form to the dropdown
      const footer = categoryDropdown.querySelector('.category-dropdown-footer');
      footer.innerHTML = addCategoryFormHTML;
      
      // Increase the dropdown height to accommodate the form
      categoryDropdown.style.maxHeight = '500px';
      
      // Handle cancel button
      const cancelBtn = footer.querySelector('.btn-cancel');
      cancelBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Restore the original footer content
        footer.innerHTML = '<a href="#" class="add-category-link">+ Add new category</a>';
        
        // Reset the dropdown height
        categoryDropdown.style.maxHeight = '400px';
        
        // Re-attach the event listener to the new add category link
        const newAddCategoryLink = footer.querySelector('.add-category-link');
        if (newAddCategoryLink) {
          newAddCategoryLink.addEventListener('click', handleAddCategoryClick);
        }
      });
      
      // Handle add category button
      const addCategoryBtn = footer.querySelector('.btn-add-category');
      addCategoryBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const categoryName = footer.querySelector('#new-category-name').value;
        const parentCategory = footer.querySelector('#parent-category').value;
        
        if (!categoryName) {
          alert('Please enter a category name');
          return;
        }
        
        // In a real implementation, you would add the category to the database
        // For this demo, we'll just add it to the dropdown
        const optionsContainer = categoryDropdown.querySelector('.category-options-container');
        const newOption = document.createElement('div');
        newOption.className = 'category-dropdown-option' + (parentCategory ? ' category-child' : '');
        newOption.innerHTML = `<input type="checkbox"> ${categoryName}`;
        
        // Add the new option to the options container
        optionsContainer.appendChild(newOption);
        
        // Add event listener to the new option
        newOption.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const checkbox = newOption.querySelector('input[type="checkbox"]');
          checkbox.checked = !checkbox.checked;
          
          if (checkbox.checked) {
            newOption.classList.add('selected');
            
            // Update the select value
            const selectedOption = categorySelect.querySelector('option');
            if (selectedOption) {
              selectedOption.textContent = newOption.textContent.trim();
            }
          } else {
            newOption.classList.remove('selected');
          }
        });
        
        // Restore the original footer content
        footer.innerHTML = '<a href="#" class="add-category-link">+ Add new category</a>';
        
        // Reset the dropdown height
        categoryDropdown.style.maxHeight = '400px';
        
        // Re-attach the event listener to the new add category link
        const newAddCategoryLink = footer.querySelector('.add-category-link');
        if (newAddCategoryLink) {
          newAddCategoryLink.addEventListener('click', handleAddCategoryClick);
        }
      });
    }
    
    // Handle add new category link
    const addCategoryLink = categoryDropdown.querySelector('.add-category-link');
    if (addCategoryLink) {
      addCategoryLink.addEventListener('click', handleAddCategoryClick);
    }
    
    // Prevent dropdown from closing when clicking inside it
    categoryDropdown.addEventListener('click', (e) => {
      e.stopPropagation();
    });
    
    // Close dropdown only when clicking outside
    document.addEventListener('click', (e) => {
      if (categoryDropdown.classList.contains('show') && 
          !categoryDropdown.contains(e.target) && 
          !selectContainer.contains(e.target)) {
        categoryDropdown.style.opacity = '0';
        setTimeout(() => {
          categoryDropdown.classList.remove('show');
          categoryDropdown.style.display = 'none';
        }, 200);
      }
    });
  }

  // Make sure toggles and dropdowns are initialized when product content is loaded
  document.addEventListener('DOMContentLoaded', function () {
    // If the function exists in the global scope (from app.js), call it
    if (typeof initializeProductSectionToggles === 'function') {
      initializeProductSectionToggles();
    }
    
    // Initialize category dropdown
    initializeCategoryDropdown();
  });






  function showProductsMoreOptions(targetElement, product) {
    // Create more options panel
    const morePanel = document.createElement('div');
    morePanel.className = 'orders-more-panel';
    morePanel.innerHTML = `
      <div class="more-panel-header">
        <div class="more-panel-title">Products Options</div>
        <button class="more-panel-close"><i class="fas fa-times"></i></button>
      </div>
      <div class="more-panel-content">
        <button class="more-panel-option ${product.favorite ? 'active' : ''}" data-action="favorite">
          <i class="fas fa-star"></i> ${product.favorite ? 'Remove from Favorites' : 'Add to Favorites'}
        </button>
        <button class="more-panel-option" data-action="print">
          <i class="fas fa-print"></i> Print Order
        </button>
        <button class="more-panel-option" data-action="export">
          <i class="fas fa-file-export"></i> Export Order
        </button>
        <button class="more-panel-option" data-action="duplicate">
          <i class="fas fa-copy"></i> Duplicate Order
        </button>
      </div>
    `;

    // Position the panel
    const rect = targetElement.getBoundingClientRect();
    morePanel.style.position = 'absolute';
    morePanel.style.top = `${rect.bottom + window.scrollY + 5}px`;
    morePanel.style.right = `${window.innerWidth - rect.right - window.scrollX}px`;
    document.body.appendChild(morePanel);

    // Animation
    morePanel.style.opacity = '0';
    morePanel.style.transform = 'scale(0.95)';
    morePanel.classList.add('more-panel-anim-in');

    // Handle close button
    const closeButton = morePanel.querySelector('.more-panel-close');
    if (closeButton) {
      closeButton.addEventListener('click', function hideMorePanel(ev) {
        morePanel.classList.remove('more-panel-anim-in');
        morePanel.classList.add('more-panel-anim-out');

        morePanel.addEventListener('animationend', function handler() {
          morePanel.removeEventListener('animationend', handler);
          morePanel.remove();
        });
      });
    }

    // Handle click outside
    const handleOutsideClick = (e) => {
      if (!morePanel.contains(e.target) && e.target !== targetElement) {
        morePanel.classList.remove('more-panel-anim-in');
        morePanel.classList.add('more-panel-anim-out');

        morePanel.addEventListener('animationend', function handler() {
          morePanel.removeEventListener('animationend', handler);
          morePanel.remove();
          document.removeEventListener('click', handleOutsideClick, true);
        });
      }
    };

    // Delay adding the click handler to prevent immediate closing
    setTimeout(() => {
      document.addEventListener('click', handleOutsideClick, true);
    }, 100);

    // Handle options
    const options = morePanel.querySelectorAll('.more-panel-option');
    options.forEach(option => {
      option.addEventListener('click', () => {
        const action = option.getAttribute('data-action');

        if (action === 'favorite') {
          // Toggle favorite status
          order.favorite = !order.favorite;
          renderProductsList(product.id);
          renderProductsContent(product);

          // Close panel
          morePanel.classList.remove('more-panel-anim-in');
          morePanel.classList.add('more-panel-anim-out');
          morePanel.addEventListener('animationend', function handler() {
            morePanel.removeEventListener('animationend', handler);
            morePanel.remove();
            document.removeEventListener('click', handleOutsideClick, true);
          });
        } else {
          // For other actions, just show a notification
          alert(`Action: ${action} - This feature is not implemented in the demo`);
        }
      });
    });
  }

  function getAddProductsFormHTML() {
    return `
      <div class="add-orders-form">
        <div class="form-header">
          <h3>Add New Order</h3>
          <button class="form-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="form-body">
          <div class="form-group">
            <label for="order-number">Order Number</label>
            <input type="text" id="order-number" placeholder="Order Number" value="ORD-${Math.floor(10000 + Math.random() * 90000)}">
          </div>
          <div class="form-group">
            <label for="customer-name">Customer Name</label>
            <input type="text" id="customer-name" placeholder="Customer Name">
          </div>
          <div class="form-group">
            <label for="order-email">Email</label>
            <input type="email" id="order-email" placeholder="Email Address">
          </div>
          <div class="form-group">
            <label for="order-phone">Phone</label>
            <input type="tel" id="order-phone" placeholder="Phone Number">
          </div>
          <div class="form-group">
            <label for="order-status">Status</label>
            <select id="order-status">
              <option value="Pending">Pending</option>
              <option value="Processing">Processing</option>
              <option value="Shipped">Shipped</option>
              <option value="Completed">Completed</option>
              <option value="Cancelled">Cancelled</option>
            </select>
          </div>
          <div class="form-group">
            <label for="order-total">Total Amount</label>
            <input type="text" id="order-total" placeholder="Total Amount">
          </div>
          <div class="form-group">
            <label for="order-items">Items Count</label>
            <input type="number" id="order-items" placeholder="Number of Items">
          </div>
          <div class="form-group">
            <label for="order-notes">Notes</label>
            <textarea id="order-notes" placeholder="Additional Notes"></textarea>
          </div>
        </div>
        <div class="form-footer">
          <button class="cancel-button">Cancel</button>
          <button class="save-button">Save Order</button>
        </div>
      </div>
    `;
  }

  function showEditProductsForm(order, parentElement) {
    const formContainer = document.createElement('div');
    formContainer.className = 'add-orders-overlay';
    formContainer.innerHTML = `
      <div class="add-orders-form">
        <div class="form-header">
          <h3>Edit Order</h3>
          <button class="form-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="form-body">
          <div class="form-group">
            <label for="edit-order-number">Order Number</label>
            <input type="text" id="edit-order-number" value="${order.orderNumber}">
          </div>
          <div class="form-group">
            <label for="edit-customer-name">Customer Name</label>
            <input type="text" id="edit-customer-name" value="${order.customerName}">
          </div>
          <div class="form-group">
            <label for="edit-order-email">Email</label>
            <input type="email" id="edit-order-email" value="${order.email}">
          </div>
          <div class="form-group">
            <label for="edit-order-phone">Phone</label>
            <input type="tel" id="edit-order-phone" value="${order.phone}">
          </div>
          <div class="form-group">
            <label for="edit-order-status">Status</label>
            <select id="edit-order-status">
              <option value="Pending" ${order.status === 'Pending' ? 'selected' : ''}>Pending</option>
              <option value="Processing" ${order.status === 'Processing' ? 'selected' : ''}>Processing</option>
              <option value="Shipped" ${order.status === 'Shipped' ? 'selected' : ''}>Shipped</option>
              <option value="Completed" ${order.status === 'Completed' ? 'selected' : ''}>Completed</option>
              <option value="Cancelled" ${order.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
            </select>
          </div>
          <div class="form-group">
            <label for="edit-order-total">Total Amount</label>
            <input type="text" id="edit-order-total" value="${order.totalAmount}">
          </div>
          <div class="form-group">
            <label for="edit-order-items">Items Count</label>
            <input type="number" id="edit-order-items" value="${order.itemsCount}">
          </div>
          <div class="form-group">
            <label for="edit-order-notes">Notes</label>
            <textarea id="edit-order-notes">${order.notes || ''}</textarea>
          </div>
        </div>
        <div class="form-footer">
          <button class="cancel-button">Cancel</button>
          <button class="save-button">Save Changes</button>
        </div>
      </div>
    `;

    parentElement.appendChild(formContainer);

    // Animation
    formContainer.style.opacity = '0';
    setTimeout(() => {
      formContainer.style.opacity = '1';
    }, 10);

    // Handle close button
    const closeButton = formContainer.querySelector('.form-close');
    if (closeButton) {
      closeButton.addEventListener('click', function hidePanel(ev) {
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }

    // Handle cancel button
    const cancelButton = formContainer.querySelector('.cancel-button');
    if (cancelButton) {
      cancelButton.addEventListener('click', () => {
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }

    // Handle save button
    const saveButton = formContainer.querySelector('.save-button');
    if (saveButton) {
      saveButton.addEventListener('click', () => {
        // Update order with form values
        product.orderNumber = formContainer.querySelector('#edit-order-number').value;
        product.customerName = formContainer.querySelector('#edit-customer-name').value;
        product.email = formContainer.querySelector('#edit-order-email').value;
        product.phone = formContainer.querySelector('#edit-order-phone').value;
        product.status = formContainer.querySelector('#edit-order-status').value;
        product.totalAmount = formContainer.querySelector('#edit-order-total').value;
        product.itemsCount = formContainer.querySelector('#edit-order-items').value;
        product.notes = formContainer.querySelector('#edit-order-notes').value;

        // Update first letter if customer name changed
        const firstName = order.customerName.split(' ')[0];
        const firstLetter = firstName.charAt(0).toUpperCase();
        if (order.letter !== firstLetter) {
          order.letter = firstLetter;

          // Rebuild grouped orders
          const groupedProducts = products.reduce((acc, product) => {
            if (!acc[product.letter]) acc[product.letter] = [];
            acc[product.letter].push(product);
            return acc;
          }, {});
        }

        // Update UI
        renderProductsList(product.id);
        renderProductsContent(product);

        // Close form
        formContainer.style.opacity = '0';
        setTimeout(() => {
          formContainer.remove();
        }, 300);
      });
    }
  }

  function isMobileProductsApp() {
    return window.innerWidth <= 767 && windowElement.querySelector('.products-selected-mode');
  }

  function showProductsContentPanel() {
    if (isMobileProductsApp() && windowMainContent) {
      // Force a reflow before adding the class to ensure smooth transition
      windowMainContent.offsetHeight;

      // Add animation class FIRST
      windowMainContent.classList.add('animate-content-transition');

      // Make sure content is visible before transition starts
      const contentSection = windowMainContent.querySelector('.products-content-section');
      if (contentSection) {
        contentSection.style.zIndex = '2';
        contentSection.style.visibility = 'visible';
      }

      // Then add the class that triggers transform
      windowMainContent.classList.add('show-products-content');

      // Remove animation class after transition completes
      setTimeout(() => {
        windowMainContent.classList.remove('animate-content-transition');
      }, 350);
    }
  }

  function updateProductsListToolbar(selectedId) {
    const tableHeader = windowElement.querySelector('.products-list-table-header');
    const searchSort = windowElement.querySelector('.products-list-toolbar-searchsort1');
    if (!isMobileProductsApp()) {
      if (typeof selectedId === 'undefined' || selectedId === null) {
        // No order selected: show table header, hide search/sort
        if (tableHeader) tableHeader.style.display = '';
        if (searchSort) searchSort.style.display = 'none';
      } else {
        // Order selected: show search/sort, hide table header
        if (tableHeader) tableHeader.style.display = 'none';
        if (searchSort) searchSort.style.display = '';
      }
    } else {
      // On mobile, always show search/sort, hide table header
      if (tableHeader) tableHeader.style.display = 'none';
      if (searchSort) searchSort.style.display = '';
    }
  }

  // Patch renderProductsList to handle mobile view properly
  const origRenderProductsList = renderProductsList;
  renderProductsList = function (selectedId) {
    updateProductsListToolbar(selectedId);
    origRenderProductsList(selectedId);
    const selectedProduct = products.find(p => p.id === selectedId);

    if (isMobileProductsApp() && typeof selectedId === 'number' && selectedProduct) {
      // Render content first, then show panel
      renderProductsContent(selectedProduct);
      // Use requestAnimationFrame to ensure content is rendered before transition
      requestAnimationFrame(() => {
        showProductsContentPanel();
      });
    } else if (selectedProduct) {
      // On desktop, just render content
      renderProductsContent(selectedProduct);
    }
  };

  // On resize, update layout
  window.addEventListener('resize', function () {
    if (!isMobileProductsApp() && windowMainContent) {
      windowMainContent.classList.remove('show-products-content');
      // Reset layout when switching from mobile to desktop
      if (productsContentSection && productsContent && productsContent.querySelector('.products-content-wrapper')) {
        // If an order is already selected
        productsContentSection.style.visibility = 'visible';
        productsContentSection.style.display = '';
        if (productsListSection) productsListSection.style.width = '320px';
      } else {
        // If no order is selected
        initializeProductsAppLayout();
      }
    }
  });

  // Add mobile back button to toolbar if it doesn't exist
  const productsToolbar = windowElement.querySelector('.products-content-section .window-toolbar');
  if (productsToolbar && !productsToolbar.querySelector('.products-back-button')) {
    const backButton = document.createElement('button');
    backButton.className = 'toolbar-button products-back-button';
    backButton.title = 'Back';
    backButton.innerHTML = '<i class="fas fa-arrow-left"></i><span>Back</span>';
    backButton.addEventListener('click', () => {
      showProductsListPanel();
    });

    // Insert at the beginning of the toolbar
    const toolbarLeft = productsToolbar.querySelector('.toolbar-buttons-left');
    if (toolbarLeft) {
      toolbarLeft.insertBefore(backButton, toolbarLeft.firstChild);
    }
  }

  function showProductsListPanel() {
    if (isMobileProductsApp() && windowMainContent) {
      // Force a reflow before removing the class to ensure smooth transition
      windowMainContent.offsetHeight;

      // Add animation class FIRST
      windowMainContent.classList.add('animate-content-transition');

      // Then remove the class that controls transform
      windowMainContent.classList.remove('show-products-content');

      // Remove animation class after transition completes
      setTimeout(() => {
        windowMainContent.classList.remove('animate-content-transition');
      }, 350);

      // Reset z-index after animation completes
      const contentSection = windowMainContent.querySelector('.products-content-section');
      if (contentSection) {
        setTimeout(() => {
          if (!windowMainContent.classList.contains('show-products-content')) {
            contentSection.style.zIndex = '';
            contentSection.style.visibility = '';
          }
        }, 350);
      }
    } else if (!isMobileProductsApp()) {
      // On desktop, reset the layout
      if (productsContentSection) {
        productsContentSection.style.visibility = 'hidden';
        productsContentSection.style.display = 'none';
      }

      if (productsListSection) {
        productsListSection.style.width = '100%';
        productsListSection.classList.add('table-mode');
        productsListSection.classList.remove
      }

      // Show table header
      const tableHeader = windowElement.querySelector('.products-list-table-header');
      if (tableHeader) {
        tableHeader.style.display = '';
      }

      // Render the products list without a selected order
      renderProductsList();
    }
  }

  // Initial render
  renderProductsList();
  initializeProductsAppLayout();

  // Setup back button for mobile view
  const existingBackButton = windowElement.querySelector('.products-back-button');
  if (existingBackButton) {
    existingBackButton.addEventListener('click', () => {
      showProductsListPanel();
    });
  }


  // Setup compose button to add new product
  const composeBtn = windowElement.querySelector('.compose-btn');
  if (composeBtn) {
    composeBtn.addEventListener('click', () => {
      // Generate a unique window ID for each add product window
      let addProductWindowCount = 1;
      while (openWindows[`add-product-window-${addProductWindowCount}`]) {
        addProductWindowCount++;
      }
      const windowId = `add-product-window-${addProductWindowCount}`;

      // Create the window from template
      const addProductWindow = createWindowFromTemplate('add-product-window', windowId, false);
      if (!addProductWindow) return;
      
      // Add simple opening animation
      addProductWindow.classList.add('window-anim-open');

      // Inject the add product form HTML
      const content = addProductWindow.querySelector('.add-product-window-content');
      if (content) {
        content.innerHTML = getAddProductsFormHTML();

        // Add CSS for the new form
        const styleElement = document.createElement('style');
        styleElement.textContent = `
          .add-products-form {
            width: 100%;
            height: 100%;
            background-color: #121212;
            display: flex;
            flex-direction: column;
            overflow: hidden;
          }
          
          .form-container {
            display: flex;
            overflow-y: auto;
            padding: 20px;
            gap: 20px;
            flex: 1;
          }
          
          .form-section {
            flex: 1;
            padding: 20px;
          }
          
          .form-section h2 {
            margin-top: 0;
            margin-bottom: 20px;
            color: white;
            font-size: 18px;
            font-weight: 600;
          }
          
          .form-group {
            margin-bottom: 20px;
          }
          
          .form-row {
            display: flex;
            gap: 20px;
          }
          
          .form-group.half {
            flex: 1;
          }
          
          .form-group label {
            display: block;
            margin-bottom: 8px;
            color: white;
            font-weight: 500;
          }
          
          .input-container {
            position: relative;
          }
          

          
          .dropdown-arrow {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #888;
          }
          
          .info-circle {
            color: #888;
            margin-left: 5px;
          }
          
          .helper-text {
            margin-top: 5px;
            color: #888;
            font-size: 14px;
          }
          
          .rich-text-editor {
            border: 1px solid #333;
            border-radius: 5px;
            overflow: hidden;
          }
          

          

          

          
          .editor-select {
            background-color: #1e1e1e;
            color: white;
            border: 1px solid #333;
            padding: 5px;
            margin-left: 10px;
          }
          
          textarea.form-control {
            min-height: 150px;
            resize: vertical;
            border-top: none;
            border-radius: 0 0 5px 5px;
          }
          
          .radio-group {
            margin-bottom: 20px;
          }
          
          .radio-container {
            display: block;
            position: relative;
            padding-left: 30px;
            margin-bottom: 12px;
            cursor: pointer;
            color: white;
          }
          
          .radio-container input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
          }
          
          .radio-custom {
            position: absolute;
            top: 0;
            left: 0;
            height: 20px;
            width: 20px;
            background-color: #1e1e1e;
            border: 1px solid #333;
            border-radius: 50%;
          }
          
          .radio-container input:checked ~ .radio-custom:after {
            content: "";
            position: absolute;
            display: block;
            top: 5px;
            left: 5px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: white;
          }
          
          .product-image-container {
            width: 100%;
            height: 200px;
            background-color: #1e1e1e;
            border: 1px solid #333;
            border-radius: 5px;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 10px;
          }
          
          .product-image-preview {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
          }
          
          .image-thumbnails {
            display: flex;
            gap: 10px;
          }
          
          .image-thumbnail {
            width: 80px;
            height: 80px;
            background-color: #1e1e1e;
            border: 1px solid #333;
            border-radius: 5px;
          }
          
          .form-footer {
            padding: 15px 20px;
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            border-top: 1px solid #333;
          }
          
          .cancel-button {
            padding: 10px 20px;
            background-color: transparent;
            border: 1px solid #555;
            color: white;
            border-radius: 5px;
            cursor: pointer;
          }
          
          .save-button {
            padding: 10px 20px;
            background-color: #3498db;
            border: none;
            color: white;
            border-radius: 5px;
            cursor: pointer;
          }
        `;
        document.head.appendChild(styleElement);

        // Handle cancel button
        const cancelButton = content.querySelector('.cancel-button');
        if (cancelButton) {
          cancelButton.addEventListener('click', () => {
            // Use standard window close animation
            const standardCloseBtn = addProductWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              addProductWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              addProductWindow.classList.add('window-anim-close');
              addProductWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                  if (addProductWindow.parentNode) addProductWindow.parentNode.removeChild(addProductWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                  styleElement.remove();
                }
              }, { once: true });
            }
          });
        }

        // Handle save button
        const saveButton = content.querySelector('.save-button');
        if (saveButton) {
          saveButton.addEventListener('click', () => {
            // Get form values
            const productName = content.querySelector('#product-name').value;
            const category = content.querySelector('#product-category').value;
            const price = content.querySelector('#product-price').value;
            const brand = content.querySelector('#product-brand').value;
            const description = content.querySelector('#product-description').value;

            // Get selected visibility status
            let status = 'Published';
            const visibilityRadios = content.querySelectorAll('input[name="visibility"]');
            for (const radio of visibilityRadios) {
              if (radio.checked) {
                if (radio.value === 'published') {
                  status = 'Published';
                } else if (radio.value === 'schedule') {
                  status = 'Schedule';
                } else if (radio.value === 'hidden') {
                  status = 'Hidden';
                }
                break;
              }
            }

            if (!productName) {
              alert('Product name is required');
              return;
            }

            // Create new product object
            const newProduct = {
              id: products.length + 1,
              productSKU: 'PRD-' + Math.floor(10000 + Math.random() * 90000),
              productName,
              category,
              brand,
              description,
              price,
              salePrice: '',
              stock: 0,
              status,
              notes: '',
              type: 'eCommerce',
              favorite: false,
              letter: productName.charAt(0).toUpperCase(),
              icon: 'fa-box-open',
              color: '#' + Math.floor(Math.random() * 16777215).toString(16),
              creationDate: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              lastUpdate: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
              tags: [],
              attributes: [],
              variations: [],
              isNew: true
            };

            // Add to products array
            products.push(newProduct);

            // Rebuild grouped products
            groupedProducts = products.reduce((acc, product) => {
              // Ensure letter is set based on product name
              if (!product.letter && product.productName) {
                product.letter = product.productName.charAt(0).toUpperCase();
              }

              // Add to appropriate group
              if (product.letter) {
                if (!acc[product.letter]) acc[product.letter] = [];
                acc[product.letter].push(product);
              }
              return acc;
            }, {});

            // Update UI
            renderProductsList(newProduct.id);
            renderProductsContent(newProduct);

            // Close window with animation
            const standardCloseBtn = addProductWindow.querySelector('.window-close');
            if (standardCloseBtn) {
              standardCloseBtn.click();
            } else {
              // Fallback: manual close with animation
              addProductWindow.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
              addProductWindow.classList.add('window-anim-close');
              addProductWindow.addEventListener('animationend', function handler(ev) {
                if (ev.animationName === 'windowClose') {
                  if (addProductWindow.parentNode) addProductWindow.parentNode.removeChild(addProductWindow);
                  if (openWindows[windowId]) delete openWindows[windowId];
                  styleElement.remove();
                }
              }, { once: true });
            }
          });
        }
      }

      // Register the window in openWindows
      const iconClass = 'fa-plus-circle';
      const iconBgClass = 'green-icon';
      const appTitle = 'Add New Product';
      openWindows[windowId] = {
        element: addProductWindow,
        name: 'add-product',
        title: appTitle,
        iconClass: iconClass,
        iconBgClass: iconBgClass,
        appTitle: appTitle
      };
      makeWindowActive(addProductWindow);
      // Call renderPinnedTaskbarIcons to immediately update the taskbar
      renderPinnedTaskbarIcons();
    });
  }

  // Apply search functionality
  const searchInput = windowElement.querySelector('.orders-search-input');
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();

      if (!searchTerm) {
        renderOrdersList();
        return;
      }

      // Filter orders based on search term
      const filteredOrders = orders.filter(order =>
        (order.orderNumber && order.orderNumber.toLowerCase().includes(searchTerm)) ||
        (order.customerName && order.customerName.toLowerCase().includes(searchTerm)) ||
        (order.firstName && order.firstName.toLowerCase().includes(searchTerm)) ||
        (order.lastName && order.lastName.toLowerCase().includes(searchTerm)) ||
        (order.email && order.email.toLowerCase().includes(searchTerm)) ||
        (order.status && order.status.toLowerCase().includes(searchTerm)) ||
        (order.company && order.company.toLowerCase().includes(searchTerm)) ||
        (order.notes && order.notes.toLowerCase().includes(searchTerm))
      );

      // Group filtered orders by letter
      const filteredGrouped = filteredOrders.reduce((acc, order) => {
        if (!acc[order.letter]) acc[order.letter] = [];
        acc[order.letter].push(order);
        return acc;
      }, {});

      // Save original grouped orders
      const originalGrouped = Object.assign({}, groupedOrders);

      // Temporarily replace grouped orders with filtered results
      Object.keys(groupedOrders).forEach(key => {
        delete groupedOrders[key];
      });

      Object.keys(filteredGrouped).forEach(key => {
        groupedOrders[key] = filteredGrouped[key];
      });

      // Render filtered list
      renderOrdersList();

      // Restore original grouped orders
      Object.keys(groupedOrders).forEach(key => {
        delete groupedOrders[key];
      });

      Object.keys(originalGrouped).forEach(key => {
        groupedOrders[key] = originalGrouped[key];
      });
    });
  }
}


//appstore
// Example data (replace with API or JSON fetch)
const featured = [
  {
    section: "SYSTEM",
    image: "img/featured1.png",
    title: "OS Apps",
    subtitle: "Apps that helps you cloud and system"
  },
  {
    section: "Website",
    image: "img/featured2.png",
    title: "Website Apps",
    subtitle: "Apps that power up your website"
  }
];

const appSections = [
  {
    title: "Start selling online",
    seeAll: "#",
    apps: [
      {
        iconClass: "fa-cart-shopping",
        iconBgClass: "blue-icon",
        name: "eCommerce",
        subtitle: "Sell online and in person, locally and globally, on desktop and mobile.",
        price: "$49.99",
        priceDescription: "One time payment",
        author: "Alien Host"
      },
      {
        iconClass: "fa-utensils",
        iconBgClass: "purple-icon",
        name: "Food Menu",
        subtitle: "Online menu & food ordering for your restaurant and fastfood.",
        price: "$49.99",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-hotel",
        iconBgClass: "green-icon",
        name: "Bookings",
        subtitle: "Get rooms reservations online and in person, on desktop and mobile.",
        price: "GET APP",
        priceDescription: "Free",
        author: "John Doe"
      },
      {
        iconClass: "fa-ticket",
        iconBgClass: "orange-icon",
        name: "Tickets & Events",
        subtitle: "Easily create events, sell tickets and manage guests.",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-calendar-check",
        iconBgClass: "red-icon",
        name: "Appointments",
        subtitle: "Get appointments & resevations and manage guests online.",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-taxi",
        iconBgClass: "teal-icon",
        name: "Taxi & Ride sharing",
        subtitle: "Get car requests online and track and manage drivers.",
        price: "INSTALLED",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-mountain-sun",
        iconBgClass: "gray-icon",
        name: "Digital Products",
        subtitle: "Sell your digitals online",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-user-check",
        iconBgClass: "yellow-icon",
        name: "Subscriptions",
        subtitle: "Sell subscriptions to your fans",
        price: "$9.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-hands-holding-circle",
        iconBgClass: "pink-icon",
        name: "Donations & Gifts",
        subtitle: "Get donations & gifts",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-gavel",
        iconBgClass: "pink-icon",
        name: "Auction & Bidding",
        subtitle: "Sell your products like auctions and bidding.",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      }
    ]
  },
  {
    title: "Sell Channels",
    seeAll: "#",
    apps: [
      {
        iconClass: "fa-cash-register",
        iconBgClass: "blue-icon",
        name: "POS System",
        subtitle: "Point of sale for your business to sell in person.",
        price: "$49.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-users",
        iconBgClass: "purple-icon",
        name: "eCommerce Marketplaces",
        subtitle: "Sell your products to marketplaces like Amazon, eBay, and Etsy.",
        price: "$49.99",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-users",
        iconBgClass: "purple-icon",
        name: "Bookings Marketplaces",
        subtitle: "Sync with Bookings.com, AirBNB, and other platforms.",
        price: "$49.99",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-boxes-packing",
        iconBgClass: "green-icon",
        name: "Social Media Marketplaces",
        subtitle: "Sell your products to social media platforms like Facebook, Instagram, and Twitter.",
        price: "GET APP",
        priceDescription: "Free",
        author: "John Doe"
      },
      {
        iconClass: "fa-money-bill",
        iconBgClass: "orange-icon",
        name: "Reseller & Drop Shipping",
        subtitle: "Sell your products to resellers and drop shippers with a commission.",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-user-tie",
        iconBgClass: "red-icon",
        name: "Affiliates",
        subtitle: "Allow people to sell your products for you with a commission.",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-chart-line",
        iconBgClass: "teal-icon",
        name: "Mobile App",
        subtitle: "Sell your products on mobile apps.",
        price: "INSTALLED",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      }
    ]
  },
  {
    title: "Marketing",
    seeAll: "#",
    apps: [
      {
        iconClass: "fa-image",
        iconBgClass: "blue-icon",
        name: "Social Media Manager",
        subtitle: "Manage all Social Media accounts from one place with A.i.",
        price: "$49.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-magic",
        iconBgClass: "purple-icon",
        name: "Chat App",
        subtitle: "Sync all chat channels in a single app and auto answear with A.I.",
        price: "INSTALLED",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-robot",
        iconBgClass: "green-icon",
        name: "Ads Manager",
        subtitle: "Manage all ads from different platforms in one place",
        price: "GET APP",
        priceDescription: "Free",
        author: "John Doe"
      },
      {
        iconClass: "fa-adjust",
        iconBgClass: "orange-icon",
        name: "SEO & LMO",
        subtitle: "Advanced SEO settings for search engines and A.I. chats",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-envelope",
        iconBgClass: "red-icon",
        name: "Email Marketing",
        subtitle: "Create & manage email marketing campaings in a few clicks",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-water",
        iconBgClass: "teal-icon",
        name: "SMS Campaigns",
        subtitle: "Create and manage bulk SMS campaings",
        price: "INSTALLED",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-user-edit",
        iconBgClass: "gray-icon",
        name: "Acorn 6 Image Editor",
        subtitle: "Image editor for humans",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-sun",
        iconBgClass: "yellow-icon",
        name: "Flare 2",
        subtitle: "Smart photo editing",
        price: "$9.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-camera-retro",
        iconBgClass: "pink-icon",
        name: "RAW Power",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Pictorial",
        subtitle: "Photography",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      }
    ]
  },
  {
    title: "Media & Productivity",
    seeAll: "#",
    apps: [
      {
        iconClass: "fa-image",
        iconBgClass: "blue-icon",
        name: "Photopea",
        subtitle: "Edit photos in a Photoshop like interface",
        price: "$49.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-magic",
        iconBgClass: "purple-icon",
        name: "ImageAI",
        subtitle: "Create perfect images from your products with A.I.",
        price: "$49.99",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-robot",
        iconBgClass: "green-icon",
        name: "Canva",
        subtitle: "Fully automatic photo editor",
        price: "GET APP",
        priceDescription: "Free",
        author: "John Doe"
      },
      {
        iconClass: "fa-adjust",
        iconBgClass: "orange-icon",
        name: "Polarr Photo Editor",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-video",
        iconBgClass: "red-icon",
        name: "Video Pro",
        subtitle: "Generate A.I. videos of your products to showcase online",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-water",
        iconBgClass: "teal-icon",
        name: "Video Editor",
        subtitle: "Edit Videos like a pro",
        price: "INSTALLED",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-user-edit",
        iconBgClass: "gray-icon",
        name: "Suno",
        subtitle: "Create beautifull music for your brand with A.I.",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-sun",
        iconBgClass: "yellow-icon",
        name: "Audio Editor",
        subtitle: "Edit audio files, timp, extend, change voice, change text",
        price: "$9.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-camera-retro",
        iconBgClass: "pink-icon",
        name: "Zoom",
        subtitle: "Live conferences on zoom synced with your contacts",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Tasks",
        subtitle: "Create, edit and manage tasks for you and your team in a Trello style",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Otter.ai",
        subtitle: "Transcribing audio and video recordings, useful for meetings and lectures.",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      }
      ,
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Docs",
        subtitle: "Edit documents online directly in cloud.",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Excel",
        subtitle: "Edit excel files directly in cloud.",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      }
    ]
  },
  {
    title: "Category",
    seeAll: "#",
    apps: [
      {
        iconClass: "fa-image",
        iconBgClass: "blue-icon",
        name: "Affinity Photo",
        subtitle: "Redefining photo editing",
        price: "$49.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-magic",
        iconBgClass: "purple-icon",
        name: "Luminar 2018: Pro photo editor",
        subtitle: "Perfect photos in less time",
        price: "$49.99",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-robot",
        iconBgClass: "green-icon",
        name: "Photolemur 2",
        subtitle: "Fully automatic photo editor",
        price: "GET APP",
        priceDescription: "Free",
        author: "John Doe"
      },
      {
        iconClass: "fa-adjust",
        iconBgClass: "orange-icon",
        name: "Polarr Photo Editor",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-video",
        iconBgClass: "red-icon",
        name: "Anamorphic Pro",
        subtitle: "Photography",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-water",
        iconBgClass: "teal-icon",
        name: "Hydra - HDR Photo Editor",
        subtitle: "Create beautiful HDR images",
        price: "INSTALLED",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-user-edit",
        iconBgClass: "gray-icon",
        name: "Acorn 6 Image Editor",
        subtitle: "Image editor for humans",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-sun",
        iconBgClass: "yellow-icon",
        name: "Flare 2",
        subtitle: "Smart photo editing",
        price: "$9.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-camera-retro",
        iconBgClass: "pink-icon",
        name: "RAW Power",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Pictorial",
        subtitle: "Photography",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      }
    ]
  },
  {
    title: "Category",
    seeAll: "#",
    apps: [
      {
        iconClass: "fa-image",
        iconBgClass: "blue-icon",
        name: "Affinity Photo",
        subtitle: "Redefining photo editing",
        price: "$49.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-magic",
        iconBgClass: "purple-icon",
        name: "Luminar 2018: Pro photo editor",
        subtitle: "Perfect photos in less time",
        price: "$49.99",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-robot",
        iconBgClass: "green-icon",
        name: "Photolemur 2",
        subtitle: "Fully automatic photo editor",
        price: "GET APP",
        priceDescription: "Free",
        author: "John Doe"
      },
      {
        iconClass: "fa-adjust",
        iconBgClass: "orange-icon",
        name: "Polarr Photo Editor",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-video",
        iconBgClass: "red-icon",
        name: "Anamorphic Pro",
        subtitle: "Photography",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-water",
        iconBgClass: "teal-icon",
        name: "Hydra - HDR Photo Editor",
        subtitle: "Create beautiful HDR images",
        price: "INSTALLED",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-user-edit",
        iconBgClass: "gray-icon",
        name: "Acorn 6 Image Editor",
        subtitle: "Image editor for humans",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-sun",
        iconBgClass: "yellow-icon",
        name: "Flare 2",
        subtitle: "Smart photo editing",
        price: "$9.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-camera-retro",
        iconBgClass: "pink-icon",
        name: "RAW Power",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Pictorial",
        subtitle: "Photography",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      }
    ]
  },
  {
    title: "Category",
    seeAll: "#",
    apps: [
      {
        iconClass: "fa-image",
        iconBgClass: "blue-icon",
        name: "Affinity Photo",
        subtitle: "Redefining photo editing",
        price: "$49.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-magic",
        iconBgClass: "purple-icon",
        name: "Luminar 2018: Pro photo editor",
        subtitle: "Perfect photos in less time",
        price: "$49.99",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-robot",
        iconBgClass: "green-icon",
        name: "Photolemur 2",
        subtitle: "Fully automatic photo editor",
        price: "GET APP",
        priceDescription: "Free",
        author: "John Doe"
      },
      {
        iconClass: "fa-adjust",
        iconBgClass: "orange-icon",
        name: "Polarr Photo Editor",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-video",
        iconBgClass: "red-icon",
        name: "Anamorphic Pro",
        subtitle: "Photography",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-water",
        iconBgClass: "teal-icon",
        name: "Hydra - HDR Photo Editor",
        subtitle: "Create beautiful HDR images",
        price: "INSTALLED",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-user-edit",
        iconBgClass: "gray-icon",
        name: "Acorn 6 Image Editor",
        subtitle: "Image editor for humans",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-sun",
        iconBgClass: "yellow-icon",
        name: "Flare 2",
        subtitle: "Smart photo editing",
        price: "$9.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-camera-retro",
        iconBgClass: "pink-icon",
        name: "RAW Power",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Pictorial",
        subtitle: "Photography",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      }
    ]
  },
  {
    title: "Category",
    seeAll: "#",
    apps: [
      {
        iconClass: "fa-image",
        iconBgClass: "blue-icon",
        name: "Affinity Photo",
        subtitle: "Redefining photo editing",
        price: "$49.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-magic",
        iconBgClass: "purple-icon",
        name: "Luminar 2018: Pro photo editor",
        subtitle: "Perfect photos in less time",
        price: "$49.99",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-robot",
        iconBgClass: "green-icon",
        name: "Photolemur 2",
        subtitle: "Fully automatic photo editor",
        price: "GET APP",
        priceDescription: "Free",
        author: "John Doe"
      },
      {
        iconClass: "fa-adjust",
        iconBgClass: "orange-icon",
        name: "Polarr Photo Editor",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-video",
        iconBgClass: "red-icon",
        name: "Anamorphic Pro",
        subtitle: "Photography",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-water",
        iconBgClass: "teal-icon",
        name: "Hydra - HDR Photo Editor",
        subtitle: "Create beautiful HDR images",
        price: "INSTALLED",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-user-edit",
        iconBgClass: "gray-icon",
        name: "Acorn 6 Image Editor",
        subtitle: "Image editor for humans",
        price: "$29.99",
        priceDescription: "Monthly subscription",
        author: "John Doe"
      },
      {
        iconClass: "fa-sun",
        iconBgClass: "yellow-icon",
        name: "Flare 2",
        subtitle: "Smart photo editing",
        price: "$9.99",
        priceDescription: "One time payment",
        author: "John Doe"
      },
      {
        iconClass: "fa-camera-retro",
        iconBgClass: "pink-icon",
        name: "RAW Power",
        subtitle: "Photography",
        price: "GET APP",
        priceDescription: "In-app purchases",
        author: "John Doe"
      },
      {
        iconClass: "fa-paint-brush",
        iconBgClass: "blue-icon",
        name: "Pictorial",
        subtitle: "Photography",
        price: "$59.99",
        priceDescription: "One time payment",
        author: "John Doe"
      }
    ]
  }
  // Add more sections as needed
];


function setupAppStore(windowElement) {
  ensureSidebarElements(windowElement);
  if (typeof window.updateSidebarForWindow === 'function') {
    window.updateSidebarForWindow(windowElement);
  }
  const menuToggle = windowElement.querySelector('.menu-toggle');
  // Find the containers inside this window
  const featuredContainer = windowElement.querySelector('#featured-cards');
  const sectionsContainer = windowElement.querySelector('#appstore-sections');
  const mainContent = windowElement.querySelector('.window-main-content');

  // Helper: Remove any existing app detail panel
  let lastAppStoreScroll = 0;
  function removeAppDetailPanel() {
    const existingPanel = mainContent.querySelector('.app-detail-panel');
    if (existingPanel) {
      existingPanel.classList.remove('slide-in');
      existingPanel.classList.add('slide-out');
      existingPanel.addEventListener('animationend', () => {
        if (existingPanel.parentNode) existingPanel.parentNode.removeChild(existingPanel);
      }, { once: true });
    }
    mainContent.classList.remove('app-detail-open');
    // Restore scroll position
    mainContent.scrollTop = lastAppStoreScroll;
    mainContent.style.overflow = '';
  }

  // Render featured cards
  featuredContainer.innerHTML = '';
  featured.forEach(card => {
    featuredContainer.innerHTML += `
      <div class="featured-card">
      <div class="featured-card-content">
        <span class="section-link">${card.section}</span>

        <h2>${card.title}</h2>
        <p>${card.subtitle}</p>
        </div>
                <img src="${card.image}" alt="${card.title}">
      </div>
    `;
  });

  // Render app sections
  sectionsContainer.innerHTML = '';
  appSections.forEach(section => {
    let appsHTML = section.apps.map((app, idx) => {
      const priceLower = app.price && app.price.toLowerCase();
      const isFree = priceLower === 'get app';
      const isInstalled = priceLower === 'installed';
      const priceClass = isInstalled
        ? 'app-price-button--installed'
        : isFree
          ? 'app-price-button--free'
          : 'app-price-button--paid';
      return `
      <div class="app-card" data-app-section="${section.title}" data-app-index="${idx}">
        <div class="app-card-content">
          <div class="icon-container ${app.iconBgClass || 'blue-icon'}">
            <i class="fas ${app.iconClass || 'fa-cube'}"></i>
          </div>
          <h3>${app.name}</h3>
          <p>${app.subtitle}</p>
        </div>
        <div class="app-card-footer">
        <button class="app-price-button ${priceClass}">${app.price}</button>
        <p class="app-price-description">${app.priceDescription}</p>
        </div>
      </div>
    `}).join('');
    sectionsContainer.innerHTML += `
      <div class="appstore-section">
        <div class="section-header">
          <h2>${section.title}</h2>
          <a href="${section.seeAll}">See All</a>
        </div>
        <div class="appstore-grid">
          ${appsHTML}
        </div>
      </div>
    `;
  });

  // Add click event to app cards for sliding panel
  sectionsContainer.querySelectorAll('.app-card').forEach(card => {
    card.addEventListener('click', function (e) {
      // Prevent double opening
      if (mainContent.querySelector('.app-detail-panel')) return;
      const sectionTitle = card.getAttribute('data-app-section');
      const appIdx = parseInt(card.getAttribute('data-app-index'), 10);
      const section = appSections.find(s => s.title === sectionTitle);
      if (!section) return;
      const app = section.apps[appIdx];
      if (!app) return;
      // Save scroll position before opening panel
      lastAppStoreScroll = mainContent.scrollTop;
      // Create panel
      const panel = document.createElement('div');
      panel.className = 'app-detail-panel slide-in';
      // Set panel position and size to match visible area
      panel.style.position = 'absolute';
      panel.style.top = mainContent.scrollTop + 'px';
      panel.style.left = '0';
      panel.style.width = '100%';
      panel.style.height = '100%';
      const priceLower = app.price && app.price.toLowerCase();
      const isFree = priceLower === 'get app';
      const isInstalled = priceLower === 'installed';
      const priceClass = isInstalled
        ? 'app-price-button--installed'
        : isFree
          ? 'app-price-button--free'
          : 'app-price-button--paid';
      panel.innerHTML = `
        <div class="window-toolbar">
          <button class="back-btn" title="Back"><i class="fas fa-arrow-left"></i></button>
          <span class="toolbar-title">${app.name}</span>
        </div>
        <div class="app-detail-content">
        <div class="app-detail-content-container">
        <div class="app-detail-content-header">
        <div class="app-detail-content-header-icon-title">
        <div class="app-detail-content-header-icon">
          <div class="icon-container ${app.iconBgClass || 'blue-icon'}">
            <i class="fas ${app.iconClass || 'fa-cube'}"></i>
          </div>
          </div>
          <div class="app-detail-content-header-text">
          <h2>${app.name}</h2>
          <p class="appstore-app-author">By ${app.author}</p>
          </div>
          </div>
          <div class="app-detail-price"><button class="app-price-button ${priceClass}">${app.price}</button><p class="app-price-description">${app.priceDescription}</p></div></div>


          <div class="app-detail-description">More information about <b>${app.name}</b> will go here. (Add your own details!)
          Lorem Ipsum is simply dummy text of the printing and typesetting industry. <br><br> Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. <br><br>It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</div>
          <div class="app-detail-description-images">
          <img src="img/appsimg/windows-list.jpg" alt="${app.name}">
          <img src="img/appsimg/touch.jpg" alt="${app.name}">
          <img src="img/appsimg/windows-icons.jpg" alt="${app.name}">
          <img src="img/appsimg/windows-11.jpg" alt="${app.name}">
          <img src="img/appsimg/windows-classic.jpg" alt="${app.name}">
          </div>
          <div class="app-detail-moreinfo">
          <h3>More information about <b>${app.name}</b> will go here. (Add your own details!)</h3>
          <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
          
          
          <div class="app-detail-moreinfo-list">
          <h4>Features</h4>
          <div class="app-detail-moreinfo-list-items">
          <div class="app-detail-moreinfo-list-item">
          <i class="fas fa-wallet"></i>
          <div class="app-detail-moreinfo-list-item-text"><h5>Feature 1</h5><p>Lorem Ipsum has been the industry's standard dummy</p></div>
          </div>
          <div class="app-detail-moreinfo-list-item">
          <i class="fas fa-earth-asia"></i>
          <div class="app-detail-moreinfo-list-item-text"><h5>Feature 2</h5><p>Lorem Ipsum has been the industry's standard dummy </p></div>
          </div>
          <div class="app-detail-moreinfo-list-item">
          <i class="fas fa-earth-asia"></i>
          <div class="app-detail-moreinfo-list-item-text"><h5>Feature 2</h5><p>Lorem Ipsum has been the industry's standard dummy </p></div>
          </div>
            <div class="app-detail-moreinfo-list-item">
          <i class="fas fa-earth-asia"></i>
          <div class="app-detail-moreinfo-list-item-text"><h5>Feature 2</h5><p>Lorem Ipsum has been the industry's standard dummy </p></div>
          </div>
            <div class="app-detail-moreinfo-list-item">
          <i class="fas fa-earth-asia"></i>
          <div class="app-detail-moreinfo-list-item-text"><h5>Feature 2</h5><p>Lorem Ipsum has been the industry's standard dummy </p></div>
          </div>
          </div>
          
          </div>



                    <div class="app-detail-needsinstall">
          <h3>Requirements</h3>
          <p>This apps will also be installed as they need to be installed. </p>
          </div>

                              <div class="app-detail-whatisnew">
          <h3>What's new</h3>
          <p>This apps will also be installed as they need to be installed. </p>
          </div>

          <div class="app-reviews">
          <div class="app-detail-reviews-header">
          <div class="app-detail-reviews-details">
          <h3>Reviews for <b>${app.name}</b> </h3>
          <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
          </div>
              <div class="app-detail-reviews-number-container">
                  <div class="app-detail-reviews-number">
                      <span> 4.5 </span> 
                      <div class="app-detail-reviews-number-stars">
                      <i class="fas fa-star"></i>
                      <span class="app-detail-reviews-number-text">/ 5</span>
                      </div>
                  </div>
                  <div class="app-reviews-number-text">
                    <p>123 reviews</p>
                  </div>
              </div>
          </div>
          <div class="app-detail-reviews-list">
            <div class="app-detail-reviews-list-item">
              <div class="app-detail-reviews-list-item-header">
                <div class="app-detail-reviews-list-item-stars">
                  <i class="fas fa-star"></i>
                  <i class="fas fa-star"></i>
                  <i class="fas fa-star-half-stroke"></i>
                  <i class="fa-regular fa-star start-no-review"></i>
                  <i class="fa-regular fa-star start-no-review"></i>
                </div>
                                  <div class="app-detail-reviews-user-info">
                  <h4>John Doe</h4>
                  <div class="app-detail-reviews-user-date">12/06/2025</div>
                  </div>
              </div>
              <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
            </div>
          
              <div class="app-detail-reviews-list-item">
                <div class="app-detail-reviews-list-item-header">
                  <div class="app-detail-reviews-list-item-stars">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star-half-stroke"></i>
                    <i class="fa-regular fa-star start-no-review"></i>
                    <i class="fa-regular fa-star start-no-review"></i>
                  </div>
                  <div class="app-detail-reviews-user-info">
                  <h4>John Doe</h4>
                  <div class="app-detail-reviews-user-date">12/06/2025</div>
                  </div>
                </div>
                <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
              </div>
           

              <div class="app-detail-reviews-list-item">
                <div class="app-detail-reviews-list-item-header">
                  <div class="app-detail-reviews-list-item-stars">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star-half-stroke"></i>
                    <i class="fa-regular fa-star start-no-review"></i>
                    <i class="fa-regular fa-star start-no-review"></i>
                  </div>
                                    <div class="app-detail-reviews-user-info">
                  <h4>John Doe</h4>
                  <div class="app-detail-reviews-user-date">12/06/2025</div>
                  </div>
                </div>
                <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
              </div>

              <div class="app-detail-reviews-list-item">
                <div class="app-detail-reviews-list-item-header">
                  <div class="app-detail-reviews-list-item-stars">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star-half-stroke"></i>
                    <i class="fa-regular fa-star start-no-review"></i>
                    <i class="fa-regular fa-star start-no-review"></i>
                  </div>
                                    <div class="app-detail-reviews-user-info">
                  <h4>John Doe</h4>
                  <div class="app-detail-reviews-user-date">12/06/2025</div>
                  </div>
                </div>
                <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
              </div>

          </div>


         </div>
        </div>

                            <div class="appstore-author-info">
          <h3>About the author: ${app.author}</h3>
          <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
          </div>
      `;
      // Back button closes panel
      panel.querySelector('.back-btn').addEventListener('click', removeAppDetailPanel);
      mainContent.appendChild(panel);
      mainContent.classList.add('app-detail-open');
      // Ensure detail panel is scrolled to top
      panel.scrollTop = 0;
      // Prevent background scroll
      mainContent.style.overflow = 'hidden';
    });
  });


}


//Notification//Notification system 
let notifications = [];
let lastAddedNotificationId = null;

function clearAllNotifications() {
  const notificationsPanel = document.getElementById('notifications-panel');
  if (notificationsPanel) {
    const notifCards = Array.from(notificationsPanel.querySelectorAll('.notif-card'));
    let cardsToRemove = notifCards.length;
    let prevPositions = notifCards.map(card => card.getBoundingClientRect().top);
    let prevIds = notifCards.map(card => card.dataset.notifId);
    notifCards.forEach((card, idx) => {
      setTimeout(() => {
        card.style.transition = 'transform 0.3s cubic-bezier(0.4,0,0.2,1), opacity 0.3s cubic-bezier(0.4,0,0.2,1)';
        card.style.transform = 'translateX(120%)';
        card.style.opacity = '0';
        setTimeout(() => {
          card.remove();
          // FLIP animate remaining cards up
          const remainingCards = Array.from(notificationsPanel.querySelectorAll('.notif-card'));
          remainingCards.forEach(remCard => {
            const notifId = remCard.dataset.notifId;
            const prevIdx = prevIds.indexOf(notifId);
            if (prevIdx !== -1) {
              const oldTop = prevPositions[prevIdx];
              const newTop = remCard.getBoundingClientRect().top;
              const dy = oldTop - newTop;
              if (dy !== 0) {
                remCard.style.transition = 'none';
                remCard.style.transform = `translateY(${dy}px)`;
                requestAnimationFrame(() => {
                  remCard.style.transition = 'transform 0.35s cubic-bezier(0.4,0,0.2,1)';
                  remCard.style.transform = '';
                });
                remCard.addEventListener('transitionend', function handler() {
                  remCard.style.transition = '';
                  remCard.removeEventListener('transitionend', handler);
                });
              }
            }
          });
          cardsToRemove--;
          if (cardsToRemove === 0) {
            notifications.length = 0;
            renderNotificationsPanel();
            renderNotificationsScreen(); // Also render the mobile notifications screen
            if (typeof updateNotificationsBadge === 'function') updateNotificationsBadge();
            const toastContainer = document.getElementById('os-toast-container');
            if (toastContainer) {
              Array.from(toastContainer.children).forEach(child => child.remove());
            }
          }
        }, 300);
      }, idx * 30); // 60ms delay between each
    });
  } else {
    notifications.length = 0;
    renderNotificationsPanel();
    renderNotificationsScreen(); // Also render the mobile notifications screen
    if (typeof updateNotificationsBadge === 'function') updateNotificationsBadge();
    const toastContainer = document.getElementById('os-toast-container');
    if (toastContainer) {
      Array.from(toastContainer.children).forEach(child => child.remove());
    }
  }
}

function renderNotificationsScreen() {
  const notificationsScreen = document.getElementById('notifications-screen');
  if (!notificationsScreen) return;
  
  // Add the mobile-notifications-screen class
  notificationsScreen.classList.add('mobile-notifications-screen');
  
  let notificationsContent = notificationsScreen.querySelector('.notifications-panel-content');
  if (!notificationsContent) {
    notificationsContent = document.createElement('div');
    notificationsContent.className = 'notifications-panel-content';
    notificationsScreen.appendChild(notificationsContent);
  }
  
  notificationsContent.innerHTML = '';
  
  // Header
  const headerRow = document.createElement('div');
  headerRow.className = 'notifications-header';
  headerRow.innerHTML = `
      <div class="notif-title"><i class="fas fa-bell"></i> <span> Notifications</span></div>
    `;
  notificationsContent.appendChild(headerRow);
  
  // Section label (only if notifications exist)
  if (notifications.length > 0) {
    const sectionLabel = document.createElement('div');
    sectionLabel.className = 'notif-section-label';
    sectionLabel.innerHTML = 'Today <span class="notif-clear">Clear all</span>';
    notificationsContent.appendChild(sectionLabel);
  }
  
  // List
  const todayList = document.createElement('div');
  todayList.className = 'notif-list';
  notifications.forEach((notif, idx) => {
    const card = document.createElement('div');
    card.className = 'notif-card' + (notif.unread ? ' unread' : '');
    card.dataset.notifId = notif.id;
    card.innerHTML = `
      <button class="notif-delete-btn" title="Delete notification">&times;</button>
      <div class="notif-icon-bg ${notif.iconBgClass}"><i class="fas ${notif.iconClass}"></i></div>
      <div class="notif-content">
        <div class="notif-main-row">
          <span class="notif-main-title">${notif.title}</span>
        </div>
        <div class="notif-desc">${notif.desc}</div>
        <div class="notif-meta">${notif.meta}</div>
      </div>
      <img class="notif-avatar" src="${notif.avatar}" />
    `;
    todayList.appendChild(card);
  });
  notificationsContent.appendChild(todayList);
  
  if (notifications.length === 0) {
    console.log('renderNotificationsScreen: Showing empty message, notifications.length =', notifications.length);
    const emptyMsg = document.createElement('div');
    emptyMsg.className = 'no-notifications-msg';
    emptyMsg.textContent = 'No new notifications';
    emptyMsg.style.cssText = 'display: flex; align-items: center; justify-content: center; height: 100%; color: #888; font-size: 1.15rem; font-weight: 500; text-align: center; margin-top: 60px;';
    notificationsContent.appendChild(emptyMsg);
  } else {
    console.log('renderNotificationsScreen: Not showing empty message, notifications.length =', notifications.length);
  }
  
    // Add event listeners for clear all and delete buttons
  const clearAllBtn = notificationsContent.querySelector('.notif-clear');
  if (clearAllBtn) {
    clearAllBtn.addEventListener('click', clearAllNotifications);
  }

  const deleteButtons = notificationsContent.querySelectorAll('.notif-delete-btn');
  deleteButtons.forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.stopPropagation();
      const card = this.closest('.notif-card');
      const notifId = card.dataset.notifId;
      const notifIndex = notifications.findIndex(n => n.id === notifId);
      if (notifIndex !== -1) {
        notifications.splice(notifIndex, 1);
        renderNotificationsScreen();
        renderNotificationsPanel(); // Also update the panel if it exists
        if (typeof updateNotificationsBadge === 'function') updateNotificationsBadge();
      }
    });
  });

  // Enable swipe-to-delete functionality for mobile notifications screen
  if (typeof enableNotificationSwipeToDelete === 'function') {
    enableNotificationSwipeToDelete();
  }
}

function renderNotificationsPanel() {
  const notificationsPanel = document.getElementById('notifications-panel');
  if (!notificationsPanel) return;
  let todaySection = notificationsPanel.querySelector('.notifications-panel-content');
  if (!todaySection) {
    todaySection = document.createElement('div');
    todaySection.className = 'notifications-panel-content';
    notificationsPanel.appendChild(todaySection);
  }
  todaySection.innerHTML = '';
  // Header
  const headerRow = document.createElement('div');
  headerRow.className = 'notifications-header';
  headerRow.innerHTML = `
      <button class="notif-menu-toggle" aria-label="Menu"><i class="fas fa-bars"></i></button>
      <div class="notif-title"><i class="fas fa-bell"></i> <span> Notifications</span></div>
      <button id="notif-close-btn" class="panel-close-btn" aria-label="Close notifications"><i class="fas fa-times"></i></button>
    `;
  todaySection.appendChild(headerRow);
  // Section label (only if notifications exist)
  if (notifications.length > 0) {
    const sectionLabel = document.createElement('div');
    sectionLabel.className = 'notif-section-label';
    sectionLabel.innerHTML = 'Today <span class="notif-clear">Clear all</span>';
    todaySection.appendChild(sectionLabel);
  }
  // List
  const todayList = document.createElement('div');
  todayList.className = 'notif-list';
  notifications.forEach((notif, idx) => {
    const card = document.createElement('div');
    card.className = 'notif-card' + (notif.unread ? ' unread' : '');
    card.dataset.notifId = notif.id;
    card.innerHTML = `
      <button class="notif-delete-btn" title="Delete notification">&times;</button>
      <div class="notif-icon-bg ${notif.iconBgClass}"><i class="fas ${notif.iconClass}"></i></div>
      <div class="notif-content">
        <div class="notif-main-row">
          <span class="notif-main-title">${notif.title}</span>
        </div>
        <div class="notif-desc">${notif.desc}</div>
        <div class="notif-meta">${notif.meta}</div>
      </div>
      <img class="notif-avatar" src="${notif.avatar}" />
    `;
    // --- SLIDE IN ANIMATION ONLY FOR NEWEST ---
    if (notif.id && notif.id === lastAddedNotificationId) {
      card.style.transform = 'translateX(120%)';
      card.style.opacity = '0';
      requestAnimationFrame(() => {
        card.style.transition = 'transform 0.3s cubic-bezier(0.4,0,0.2,1), opacity 0.3s cubic-bezier(0.4,0,0.2,1)';
        card.style.transform = 'translateX(0)';
        card.style.opacity = '1';
      });
    }
    todayList.appendChild(card);
  });
  todaySection.appendChild(todayList);
  if (notifications.length === 0) {
    console.log('renderNotificationsPanel: Showing empty message, notifications.length =', notifications.length);
    const emptyMsg = document.createElement('div');
    emptyMsg.className = 'no-notifications-msg';
    emptyMsg.textContent = 'No new notifications';
    emptyMsg.style.cssText = 'display: flex; align-items: center; justify-content: center; height: 100%; color: #888; font-size: 1.15rem; font-weight: 500; text-align: center; margin-top: 60px;';
    todaySection.appendChild(emptyMsg);
  } else {
    console.log('renderNotificationsPanel: Not showing empty message, notifications.length =', notifications.length);
  }
  if (typeof updateNotificationsBadge === 'function') updateNotificationsBadge();
  renderNotificationsScreen(); // Also render the mobile notifications screen
  // Clear the lastAddedNotificationId after rendering
  lastAddedNotificationId = null;
}

function addNotification({
  title = 'New incoming notification',
  desc = 'This is a test notification',
  meta = 'now',
  iconClass = 'fa-shopping-cart',
  iconBgClass = 'notif-bg-blue',
  avatar = 'img/avatar.png',
  unread = true
} = {}) {
  const notificationsPanel = document.getElementById('notifications-panel');
  let prevPositions = [];
  let prevIds = [];
  let panelOpen = false;
  if (notificationsPanel && notificationsPanel.style.display === 'flex' && notificationsPanel.classList.contains('notifications-visible')) {
    panelOpen = true;
    const prevCards = notificationsPanel.querySelectorAll('.notif-card');
    prevCards.forEach(card => {
      prevPositions.push(card.getBoundingClientRect().top);
      prevIds.push(card.dataset.notifId);
    });
  }
  // Add a unique id (timestamp-based)
  const id = 'notif-' + Date.now() + '-' + Math.random().toString(36).slice(2);
  notifications.unshift({ id, title, desc, meta, iconClass, iconBgClass, avatar, unread });
  lastAddedNotificationId = id;
  renderNotificationsPanel();
  renderNotificationsScreen(); // Also render the mobile notifications screen
  // FLIP animation for existing notifications
  if (panelOpen) {
    const notifCards = notificationsPanel.querySelectorAll('.notif-card');
    notifCards.forEach((card, idx) => {
      const notifId = card.dataset.notifId;
      if (notifId && notifId !== id) {
        const prevIdx = prevIds.indexOf(notifId);
        if (prevIdx !== -1) {
          const oldTop = prevPositions[prevIdx];
          const newTop = card.getBoundingClientRect().top;
          const dy = oldTop - newTop;
          if (dy !== 0) {
            card.style.transition = 'none';
            card.style.transform = `translateY(${dy}px)`;
            requestAnimationFrame(() => {
              card.style.transition = 'transform 0.35s cubic-bezier(0.4,0,0.2,1)';
              card.style.transform = '';
            });
            card.addEventListener('transitionend', function handler(e) {
              card.style.transition = '';
              card.removeEventListener('transitionend', handler);
            });
          }
        }
      }
    });
  }
  if (notificationsPanel && notificationsPanel.style.display !== 'flex') {
    showToastNotification({
      content: `
        <button class="notif-delete-btn" title="Dismiss notification">&times;</button>
        <div class="notif-icon-bg ${iconBgClass}"><i class="fas ${iconClass}"></i></div>
        <div class="notif-content">
          <div class="notif-main-row">
            <span class="notif-main-title">${title}</span>
          </div>
          <div class="notif-desc">${desc}</div>
          <div class="notif-meta">${meta}</div>
        </div>
        <img class="notif-avatar" src="${avatar}" />
      `
    });
  }
  if (typeof updateNotificationsBadge === 'function') updateNotificationsBadge();
}

// Show a toast notification in the bottom right
function showToastNotification({ content }) {
  let toastContainer = document.getElementById('os-toast-container');
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.id = 'os-toast-container';
    toastContainer.style.position = 'fixed';
    toastContainer.style.bottom = '32px';
    toastContainer.style.right = '32px';
    toastContainer.style.zIndex = '999999';
    toastContainer.style.display = 'flex';
    toastContainer.style.flexDirection = 'column-reverse';
    toastContainer.style.gap = '12px';
    document.body.appendChild(toastContainer);
  }
  const toast = document.createElement('div');
  toast.className = 'os-toast-notification';
  toast.innerHTML = content;
  toast.style.background = 'var(--widget-bg)';
  toast.style.backdropFilter = 'blur(30px)';
  toast.style.color = '#fff';
  toast.style.fontSize = '15px';
  toast.style.fontWeight = '400';
  toast.style.padding = '16px 24px 16px 16px';
  toast.style.borderRadius = '16px';
  toast.style.boxShadow = '0 4px 24px rgba(0,0,0,0.18)';
  toast.style.opacity = '0';
  toast.style.transform = 'translateY(40px)';
  toast.style.transition = 'opacity 0.25s, transform 0.25s';
  toast.style.position = 'relative';
  toast.style.display = 'flex';
  toast.style.alignItems = 'center';
  toast.style.gap = '16px';
  // Dismiss button logic
  const dismissBtn = toast.querySelector('.notif-delete-btn');
  if (dismissBtn) {
    dismissBtn.addEventListener('click', () => {
      toast.style.opacity = '0';
      toast.style.transform = 'translateY(40px)';
      setTimeout(() => toast.remove(), 250);
    });
  }
  toastContainer.appendChild(toast);
  setTimeout(() => {
    toast.style.opacity = '1';
    toast.style.transform = 'translateY(0)';
  }, 10);
  setTimeout(() => {
    toast.style.opacity = '0';
    toast.style.transform = 'translateY(40px)';
    setTimeout(() => toast.remove(), 250);
  }, 4000);
}

// --- Taskbar Icon Animation Helpers ---
function animateTaskbarIconIn(iconEl) {
  // Force reflow before adding the class
  void iconEl.offsetWidth;
  iconEl.classList.add('anim-in');
  iconEl.addEventListener('animationend', function handler(e) {
    if (e.animationName === 'taskbarAppIconIn') {
      iconEl.classList.remove('anim-in');
      iconEl.removeEventListener('animationend', handler);
    }
  });
}
function animateTaskbarIconOut(iconEl, removeCallback) {
  iconEl.classList.add('anim-out');
  iconEl.addEventListener('animationend', function handler(e) {
    if (e.animationName === 'taskbarAppIconOut') {
      iconEl.removeEventListener('animationend', handler);
      if (iconEl.parentNode) iconEl.parentNode.removeChild(iconEl);
      if (typeof removeCallback === 'function') removeCallback();
    }
  });
}

document.addEventListener('DOMContentLoaded', function () {
  // --- CLEANUP: Remove legacy/incorrect and duplicate desktop icons ---
  var validAppIds = (window.startMenuApps || []).map(app => app.id);
  var seen = new Set();
  document.querySelectorAll('.desktop-icon').forEach(icon => {
    var appId = icon.getAttribute('data-app');
    // Remove if not a valid app id, or if already seen (duplicate)
    if (!appId || !validAppIds.includes(appId) || seen.has(appId)) {
      icon.remove();
    } else {
      seen.add(appId);
    }
  });
  
  // --- Handle window resize for taskbar text mode ---
  function updateTaskbarTextMode() {
    // Only update if we're in text mode
    if (document.querySelector('.taskbar.taskbar-text-mode')) {
      // Force re-render of taskbar icons
      renderPinnedTaskbarIcons();
    }
  }
  
  // Add resize event listener
  window.addEventListener('resize', updateTaskbarTextMode);
  
  // --- Apply saved taskbar style if any ---
  function applyTaskbarStyle() {
    const savedTaskbarStyle = localStorage.getItem('taskbarStyle');
    if (savedTaskbarStyle) {
      const taskbarAppIcons = document.querySelector('.taskbar-app-icons');
      const taskbar = document.querySelector('.taskbar');
      const startButton = document.getElementById('start-button');
      
      if (taskbarAppIcons && taskbar && startButton) {
        switch (savedTaskbarStyle) {
          case 'windows11':
            // Windows 11 style
            taskbarAppIcons.classList.remove('taskbar-icons-left');
            taskbar.classList.remove('taskbar-text-mode');
            
            // Move the start button inside the app icons container at the beginning
            // for proper Windows 11 centered alignment
            if (startButton.parentElement !== taskbarAppIcons) {
              taskbarAppIcons.insertBefore(startButton, taskbarAppIcons.firstChild);
            }
            
            // Add Windows 11 style class to taskbar
            taskbar.classList.add('taskbar-windows11-style');
            
            // Fix start menu positioning for Windows 11 style
            if (typeof toggleStartMenu === 'function' && !window.originalToggleStartMenu) {
              window.originalToggleStartMenu = toggleStartMenu;
              window.toggleStartMenu = function(e) {
                const startMenu = document.getElementById('start-menu');
                if (startMenu) {
                  if (document.querySelector('.taskbar').classList.contains('taskbar-windows11-style')) {
                    const startButtonWin11 = document.getElementById('start-button');
                    if (startButtonWin11) {
                      const startButtonRect = startButtonWin11.getBoundingClientRect();
                      startMenu.style.left = startButtonRect.left + 'px';
                    }
                  } else {
                    startMenu.style.left = '';
                  }
                }
                return window.originalToggleStartMenu.apply(this, arguments);
              };
            }
            break;
          case 'left':
            // Left alignment
            taskbarAppIcons.classList.add('taskbar-icons-left');
            taskbar.classList.remove('taskbar-windows11-style');
            taskbar.classList.remove('taskbar-text-mode');
            
            // Ensure proper order of elements in taskbar
            const searchContainer = document.querySelector('.search-container');
            if (searchContainer) {
              // Make sure start button is first
              taskbar.insertBefore(startButton, taskbar.firstChild);
              
              // Make sure search container is after start button
              if (searchContainer.previousElementSibling !== startButton) {
                taskbar.insertBefore(searchContainer, startButton.nextSibling);
              }
              
              // Make sure app icons container is after search container
              taskbar.insertBefore(taskbarAppIcons, searchContainer.nextSibling);
            }
            
            // Reset start menu positioning
            const startMenu = document.getElementById('start-menu');
            if (startMenu) {
              startMenu.style.left = '';
            }
            
            // Restore original toggleStartMenu if needed
            if (window.originalToggleStartMenu) {
              window.toggleStartMenu = window.originalToggleStartMenu;
              window.originalToggleStartMenu = null;
            }
            break;
            
          case 'text':
            // Icons and text mode
            taskbarAppIcons.classList.add('taskbar-icons-left');
            taskbar.classList.remove('taskbar-windows11-style');
            taskbar.classList.add('taskbar-text-mode');
            
            // Ensure proper order of elements in taskbar
            const searchContainerText = document.querySelector('.search-container');
            if (searchContainerText) {
              // Make sure start button is first
              taskbar.insertBefore(startButton, taskbar.firstChild);
              
              // Make sure search container is after start button
              if (searchContainerText.previousElementSibling !== startButton) {
                taskbar.insertBefore(searchContainerText, startButton.nextSibling);
              }
              
              // Make sure app icons container is after search container
              taskbar.insertBefore(taskbarAppIcons, searchContainerText.nextSibling);
            }
            
            // Reset start menu positioning
            const startMenuText = document.getElementById('start-menu');
            if (startMenuText) {
              startMenuText.style.left = '';
            }
            
            // Restore original toggleStartMenu if needed
            if (window.originalToggleStartMenu) {
              window.toggleStartMenu = window.originalToggleStartMenu;
              window.originalToggleStartMenu = null;
            }
            
            // Force re-render of taskbar icons to include text
            renderPinnedTaskbarIcons();
            break;
          default:
            // Default style
            taskbarAppIcons.classList.remove('taskbar-icons-left');
            taskbar.classList.remove('taskbar-windows11-style');
            
            // Ensure proper order of elements in taskbar
            const defaultSearchContainer = document.querySelector('.search-container');
            if (defaultSearchContainer) {
              // Make sure start button is first
              taskbar.insertBefore(startButton, taskbar.firstChild);
              
              // Make sure search container is after start button
              if (defaultSearchContainer.previousElementSibling !== startButton) {
                taskbar.insertBefore(defaultSearchContainer, startButton.nextSibling);
              }
              
              // Make sure app icons container is after search container
              taskbar.insertBefore(taskbarAppIcons, defaultSearchContainer.nextSibling);
            }
            
            // Reset start menu positioning
            const defaultStartMenu = document.getElementById('start-menu');
            if (defaultStartMenu) {
              defaultStartMenu.style.left = '';
            }
            
            // Restore original toggleStartMenu if needed
            if (window.originalToggleStartMenu) {
              window.toggleStartMenu = window.originalToggleStartMenu;
              window.originalToggleStartMenu = null;
            }
            break;
        }
      }
    }
  }

  // --- Utility function to ensure start button exists for Windows 11 style ---
  function ensureStartButtonForWindows11Style() {
    // Only proceed if we need to restore Windows 11 style
    if (localStorage.getItem('taskbarStyle') !== 'windows11') return;
    
    const taskbar = document.querySelector('.taskbar');
    const taskbarAppIcons = document.querySelector('.taskbar-app-icons');
    let startButton = document.getElementById('start-button');
    
    if (!taskbar || !taskbarAppIcons) return;
    
    // If start button is missing, recreate it
    if (!startButton) {
      if (window._savedStartButtonHTML) {
        // Create from saved HTML
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = window._savedStartButtonHTML;
        startButton = tempDiv.firstChild;
        taskbar.appendChild(startButton);
      } else {
        // Create a new start button as fallback
        startButton = document.createElement('div');
        startButton.className = 'start-button';
        startButton.id = 'start-button';
        startButton.innerHTML = '<i class="fas fa-th"></i>';
        taskbar.appendChild(startButton);
        
        // Add click event listener
        startButton.addEventListener('click', function() {
          if (typeof toggleStartMenu === 'function') {
            toggleStartMenu();
          }
        });
      }
    }
    
    // Ensure start button is in the correct position for Windows 11 style
    if (startButton && startButton.parentElement !== taskbarAppIcons) {
      taskbarAppIcons.insertBefore(startButton, taskbarAppIcons.firstChild);
    }
    
    // Ensure taskbar has Windows 11 style class
    taskbar.classList.add('taskbar-windows11-style');
    
    // Mark that we've restored the start button
    localStorage.removeItem('restore_windows11_style');
  }

  // --- Initial Load Animations ---
  function initializeLoadAnimations() {
    // Get all elements that need initial load animations
    const taskbar = document.querySelector('.taskbar');
    const widgetsScreen = document.getElementById('widgets-screen');
    const desktopIcons = document.querySelector('.desktop-icons');
    const mobileProfileTopBar = document.querySelector('.mobile-profile-top-bar');
    
    // Function to remove initial-load class after animation completes
    function removeInitialLoadClass(element, animationDuration = 600) {
      if (element) {
        setTimeout(() => {
          element.classList.remove('initial-load');
          // Ensure final state is correct
          element.style.opacity = '';
          element.style.transform = '';
        }, animationDuration);
      }
    }
    
    // Let CSS handle the timing - remove classes after animation completes
    if (taskbar) {
      removeInitialLoadClass(taskbar, 600);
    }
    
    if (desktopIcons) {
      removeInitialLoadClass(desktopIcons, 600);
    }
    
    if (widgetsScreen) {
      removeInitialLoadClass(widgetsScreen, 600);
    }
        
    if (mobileProfileTopBar) {
      removeInitialLoadClass(mobileProfileTopBar, 600);
    }
    
  }

  // --- Dynamically create the Taskbar ---
  function createTaskbar() {
    const desktopArea = document.getElementById('desktop-area');
    if (!desktopArea) return;
    // Create taskbar
    const taskbar = document.createElement('div');
    taskbar.className = 'taskbar initial-load';
    // Start button
    const startButton = document.createElement('div');
    startButton.className = 'start-button';
    startButton.id = 'start-button';
    startButton.innerHTML = '<i class="fas fa-th"></i>';
    // Search container
    const searchContainer = document.createElement('div');
    searchContainer.className = 'search-container';
    searchContainer.innerHTML = '<input type="text" placeholder="Search" class="search-input"><i class="fas fa-search search-icon"></i>';
    // App icons container
    const appIcons = document.createElement('div');
    appIcons.className = 'taskbar-app-icons';
    appIcons.id = 'taskbar-app-icons';
    // Taskbar right
    const taskbarRight = document.createElement('div');
    taskbarRight.className = 'taskbar-right';
    // Notifications
    const notifIcon = document.createElement('div');
    notifIcon.className = 'taskbar-icon';
    notifIcon.style.position = 'relative';
    notifIcon.innerHTML = '<button id="notifications-btn" class="taskbar-user-btn"><i class="fas fa-bell"></i></button>';
    // Wallet
    const walletIcon = document.createElement('div');
    walletIcon.className = 'taskbar-icon';
    walletIcon.innerHTML = '<button id="wallet-btn" class="taskbar-user-btn"><i class="fas fa-wallet"></i></button>';
    // Fullscreen
    const fullscreenIcon = document.createElement('div');
    fullscreenIcon.className = 'taskbar-icon';
    fullscreenIcon.innerHTML = '<button id="fullscreen-btn" class="taskbar-user-btn"><i class="fas fa-expand"></i></button>';
    // Volume
    const volumeIcon = document.createElement('div');
    volumeIcon.className = 'taskbar-icon';
    volumeIcon.innerHTML = '<button id="volume-btn" class="taskbar-user-btn" title="Volume"><i class="fas fa-volume-up"></i></button>';
    // Global search
    const globalSearchIcon = document.createElement('div');
    globalSearchIcon.className = 'taskbar-icon';
    globalSearchIcon.innerHTML = '<button id="global-search-btn" class="taskbar-search-btn"><i class="fas fa-search"></i></button>';
    // App launcher
    const appLauncherIcon = document.createElement('div');
    appLauncherIcon.className = 'taskbar-icon';
    appLauncherIcon.innerHTML = '<button id="app-launcher-btn" class="taskbar-user-btn"><i class="fas fa-th"></i></button>';
    // Time
    const taskbarTime = document.createElement('div');
    taskbarTime.className = 'taskbar-time';
    taskbarTime.innerHTML = '<span id="current-time">22:30</span><span class="date">Mie. 25 Aprilie</span>';
    // AI button
    const taskbarAI = document.createElement('div');
    taskbarAI.className = 'taskbar-ai';
    taskbarAI.innerHTML = '<button id="ai-chat-btn" class="taskbar-user-btn"><img src="img/alien.png" alt="User" class="user-avatar"></button>';
    // Widgets toggle
    const widgetsToggleBtn = document.createElement('button');
    widgetsToggleBtn.setAttribute('id', 'widgets-toggle-btn');
    widgetsToggleBtn.setAttribute('class', 'taskbar-icon');
    widgetsToggleBtn.innerHTML = '<span id="widgets-toggle-arrow"><i class="fas fa-chevron-right"></i></span>';
    // Append right icons
    taskbarRight.appendChild(notifIcon);
    taskbarRight.appendChild(walletIcon);
    taskbarRight.appendChild(fullscreenIcon);
    taskbarRight.appendChild(volumeIcon);
    taskbarRight.appendChild(globalSearchIcon);
    taskbarRight.appendChild(appLauncherIcon);
    taskbarRight.appendChild(taskbarTime);
    taskbarRight.appendChild(taskbarAI);
    taskbarRight.appendChild(widgetsToggleBtn);
    // Assemble taskbar
    taskbar.appendChild(startButton);
    taskbar.appendChild(searchContainer);
    taskbar.appendChild(appIcons);
    taskbar.appendChild(taskbarRight);
    // Insert into DOM (at the end of .desktop-area)
    desktopArea.appendChild(taskbar);

    // Attach robust listeners to right-side icons (wallet, volume, etc.)
    taskbarRight.querySelectorAll('.taskbar-icon, .taskbar-time, .taskbar-ai').forEach(function (el) {
      if (typeof attachTaskbarIconListeners === 'function') attachTaskbarIconListeners(el);
    });
  }
  createTaskbar();
  
  // Apply saved taskbar style after a short delay to ensure DOM is ready
  setTimeout(applyTaskbarStyle, 100);
  
  // Initialize initial load animations
  setTimeout(initializeLoadAnimations, 100);



  // --- Calendar Slide-out Logic ---
  const calendarTodayBtn = document.getElementById('calendar-today-btn');
  const calendarPanel = document.getElementById('calendar-panel');
  const taskbarTime = document.querySelector('.taskbar-time');
  let calendarPanelVisible = false;
  let todayPanel = null;

  function positionTodayPanel() {
    if (!todayPanel || !calendarPanel) return;
    const rect = calendarPanel.getBoundingClientRect();
    todayPanel.style.position = 'fixed';
    todayPanel.style.left = rect.left + 'px';
    todayPanel.style.width = rect.width + 'px';
    todayPanel.style.zIndex = 5000;
  }

  // Centralized close function for today panel
  function closeTodayPanel() {
    if (!todayPanel) return;
    todayPanel.classList.remove('active');
    window.removeEventListener('resize', positionTodayPanel);
    setTimeout(() => {
      if (todayPanel && todayPanel.parentNode) {
        todayPanel.parentNode.removeChild(todayPanel);
      }
      todayPanel = null;
    }, 350);
  }

  // Prevent outside click handler when pressing the today button
  calendarTodayBtn.addEventListener('pointerdown', function (e) {
    e.stopPropagation();
  });


  // Toggle today panel on button click
  calendarTodayBtn.addEventListener('click', function () {
    if (!todayPanel) {
      // Open today panel
      todayPanel = document.createElement('div');
      todayPanel.className = 'calendar-today-panel-slide';
      todayPanel.innerHTML = `
          <div style="padding: 18px 18px 10px 18px; color: #fff; font-size: 16px; font-weight: 600; display: flex; align-items: center; justify-content: space-between;">
            <span>Today Panel (placeholder)</span>
            <button class="panel-close-btn" id="calendar-today-panel-close" aria-label="Close today panel"><i class="fas fa-times"></i></button>
          </div>
          <div style="padding: 18px 18px 10px 18px; color: #fff; font-size: 16px; font-weight: 500; display: flex; align-items: center; justify-content: center; height: 100%; text-align: center;">
            <span>No events today</span>
          </div>
        `;
      calendarPanel.parentNode.appendChild(todayPanel);
      positionTodayPanel();
      window.addEventListener('resize', positionTodayPanel);
      setTimeout(() => {
        todayPanel.classList.add('active');
      }, 10);

      todayPanel.querySelector('#calendar-today-panel-close').onclick = function (ev) {
        ev.stopPropagation();
        closeTodayPanel();
      };
    } else {
      // Close today panel
      closeTodayPanel();
    }
  });

  // Outside click handler: always closes both panels if open
  document.addEventListener('mousedown', function (e) {
    const clickedInsideCalendar = calendarPanel && calendarPanel.contains(e.target);
    const clickedInsideTodayPanel = todayPanel && todayPanel.contains(e.target);
    const clickedTaskbarTime = taskbarTime && taskbarTime.contains(e.target);
    const clickedTodayBtn = calendarTodayBtn && calendarTodayBtn.contains(e.target);

    // If click is on the today button, do nothing
    if (clickedTodayBtn) return;

    // If click is outside both panels and taskbar time, close both panels if open
    if (!clickedInsideCalendar && !clickedInsideTodayPanel && !clickedTaskbarTime) {
      if (calendarPanelVisible) hideCalendarPanel();
      if (todayPanel) closeTodayPanel();
    }
  });





  function showCalendarPanel() {
    if (typeof window.hideWalletSidebar === 'function') window.hideWalletSidebar();
    // Hide ai-chat panel if visible
    const aiChatWindow = document.getElementById('ai-chat-window');
    if (aiChatWindow && aiChatWindow.classList.contains('ai-chat-visible')) {
      aiChatWindow.classList.remove('ai-chat-visible');
      aiChatWindow.addEventListener('transitionend', function handler(e) {
        if (e.propertyName === 'transform') {
          aiChatWindow.style.display = 'none';
          aiChatWindow.removeEventListener('transitionend', handler);
        }
      });
    }
    if (!calendarPanel) return;
    calendarPanel.style.display = 'flex';
    requestAnimationFrame(() => {
      calendarPanel.classList.add('visible');
      calendarPanelVisible = true;
    });
    renderCalendar();
  }
  function hideCalendarPanel() {
    if (!calendarPanel) return;
    calendarPanel.classList.remove('visible');
    calendarPanelVisible = false;
    setTimeout(() => {
      if (!calendarPanelVisible) calendarPanel.style.display = 'none';
    }, 350);
  }
  function toggleCalendarPanel() {
    if (calendarPanelVisible) {
      hideCalendarPanel();
    } else {
      showCalendarPanel();
    }
  }
  if (taskbarTime && calendarPanel) {
    taskbarTime.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleCalendarPanel();
    });
    document.addEventListener('mousedown', (e) => {
      const todayPanel = document.querySelector('.calendar-today-panel-slide');
      const calendarPanel = document.getElementById('calendar-panel');
      const clickedInsideCalendar = calendarPanel && calendarPanel.contains(e.target);
      const clickedInsideTodayPanel = todayPanel && todayPanel.contains(e.target);
      const clickedTaskbarTime = taskbarTime && taskbarTime.contains(e.target);
      const clickedTodayBtn = calendarTodayBtn && calendarTodayBtn.contains(e.target);

      // If click is on the today button, do nothing (let its handler run)
      if (clickedTodayBtn) return;

      // If click is outside both panels and taskbar time, close both panels if open
      if (!clickedInsideCalendar && !clickedInsideTodayPanel && !clickedTaskbarTime) {
        if (calendarPanelVisible) hideCalendarPanel();
        if (todayPanel) {
          todayPanel.classList.remove('active');
          setTimeout(() => {
            if (todayPanel.parentNode) todayPanel.parentNode.removeChild(todayPanel);

          }, 350);
        }
      }
    });
    document.addEventListener('keydown', (e) => {
      if (calendarPanelVisible && e.key === 'Escape') {
        hideCalendarPanel();
      }
    });
  }
  // Simple calendar rendering (current month)
  function renderCalendar() {
    const calendarBody = document.getElementById('calendar-body');
    const calendarMonth = document.getElementById('calendar-month');
    if (!calendarBody || !calendarMonth) return;
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth();
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    calendarMonth.textContent = `${monthNames[month]} ${year}`;
    // Calendar grid
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    let html = '<div class="calendar-days" style="display:grid;grid-template-columns:repeat(7,1fr);gap:2px;text-align:center;font-size:0.95em;">';
    const weekDays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
    for (let d of weekDays) html += `<div class='calendar-day' style='font-weight:600;opacity:0.8;'>${d}</div>`;
    html += '</div>';
    html += '<div class="calendar-numbers" style="display:grid;grid-template-columns:repeat(7,1fr);gap:2px;text-align:center;font-size:0.95em;">';
    for (let i = 0; i < firstDay; i++) html += '<div></div>';
    for (let day = 1; day <= daysInMonth; day++) {
      const isToday = day === now.getDate();
      html += `<div class='calendar-number' style='padding:6px 0;border-radius:7px;${isToday ? "background:rgba(255,255,255,0.13);font-weight:700;" : ""}'>${day}</div>`;
    }
    html += '</div>';
    calendarBody.innerHTML = html;
  }


  // GLOBAL SEARCH OVERLAY LOGIC
  const globalSearchBtn = document.getElementById('global-search-btn');
  const globalSearchOverlay = document.getElementById('global-search-overlay');
  const globalSearchInput = document.getElementById('global-search-input');
  const globalSearchDropdownBtn = document.getElementById('global-search-dropdown-btn');
  const globalSearchDropdownList = document.getElementById('global-search-dropdown-list');
  const globalSearchSelected = document.getElementById('global-search-selected');
  let globalSearchDropdownOpen = false;
  function showGlobalSearch() {
    if (typeof window.hideWalletSidebar === 'function') window.hideWalletSidebar();
    if (window.innerWidth <= 1023) return;
    globalSearchOverlay.style.display = 'flex';
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        globalSearchOverlay.style.opacity = '1';
        globalSearchOverlay.style.visibility = 'visible';
        if (globalSearchInput) {
          // Force input to be focusable and reset focus state
          globalSearchInput.tabIndex = -1;
          globalSearchInput.blur();
          globalSearchInput.tabIndex = 0;
          globalSearchInput.focus();
          globalSearchInput.select();
        }
        document.body.style.overflow = 'hidden';
      });
    });
  }
  function hideGlobalSearch() {
    globalSearchOverlay.style.opacity = '0';
    globalSearchOverlay.style.visibility = 'hidden';
    setTimeout(() => {
      globalSearchOverlay.style.display = 'none';
      document.body.style.overflow = '';
    }, 300);
    closeDropdown();
  }
  function openDropdown() {
    globalSearchDropdownList.style.display = 'flex';
    globalSearchDropdownOpen = true;
  }
  function closeDropdown() {
    globalSearchDropdownList.style.display = 'none';
    globalSearchDropdownOpen = false;
  }
  if (globalSearchBtn && globalSearchOverlay) {
    globalSearchBtn.addEventListener('click', function () {
      if (window.innerWidth <= 1023) return;
      if (globalSearchOverlay.style.display !== 'flex') {
        globalSearchOverlay.style.display = 'flex';
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            globalSearchOverlay.style.opacity = '1';
            globalSearchOverlay.style.visibility = 'visible';
            if (globalSearchInput) {
              // Remove and re-append input for bulletproof focus
              const parent = globalSearchInput.parentNode;
              const next = globalSearchInput.nextSibling;
              parent.removeChild(globalSearchInput);
              if (next) parent.insertBefore(globalSearchInput, next);
              else parent.appendChild(globalSearchInput);
              setTimeout(() => {
                globalSearchInput.focus();
                globalSearchInput.setSelectionRange(0, globalSearchInput.value.length);
              }, 30);
            }
            document.body.style.overflow = 'hidden';
          });
        });
      } else {
        if (globalSearchInput) {
          // Remove and re-append input for bulletproof focus
          const parent = globalSearchInput.parentNode;
          const next = globalSearchInput.nextSibling;
          parent.removeChild(globalSearchInput);
          if (next) parent.insertBefore(globalSearchInput, next);
          else parent.appendChild(globalSearchInput);
          setTimeout(() => {
            globalSearchInput.focus();
            globalSearchInput.setSelectionRange(0, globalSearchInput.value.length);
          }, 30);
        }
      }
    });
    globalSearchInput && globalSearchInput.addEventListener('keydown', function (e) {
      if (e.key === 'Escape') hideGlobalSearch();
    });
    document.addEventListener('keydown', function (e) {
      if (globalSearchOverlay.style.display !== 'none' && e.key === 'Escape') hideGlobalSearch();
    });
    globalSearchOverlay.addEventListener('mousedown', function (e) {
      if (e.target === globalSearchOverlay) hideGlobalSearch();
    });
    // Dropdown logic
    if (globalSearchDropdownBtn && globalSearchDropdownList) {
      globalSearchDropdownBtn.addEventListener('click', function (e) {
        e.stopPropagation();
        if (globalSearchDropdownOpen) closeDropdown();
        else openDropdown();
      });
      globalSearchDropdownList.addEventListener('mousedown', function (e) {
        e.stopPropagation();
      });
      document.addEventListener('mousedown', function (e) {
        if (globalSearchDropdownOpen && !globalSearchDropdownList.contains(e.target) && e.target !== globalSearchDropdownBtn) {
          closeDropdown();
        }
      });
      Array.from(globalSearchDropdownList.querySelectorAll('.dropdown-item')).forEach(item => {
        item.addEventListener('click', function () {
          globalSearchDropdownList.querySelectorAll('.dropdown-item').forEach(i => i.classList.remove('selected'));
          item.classList.add('selected');
          // Set icon and text in the selected button
          globalSearchSelected.innerHTML = item.innerHTML;
          closeDropdown();
        });
      });
      // On page load, set the default selected icon+text
      const initiallySelected = globalSearchDropdownList.querySelector('.dropdown-item.selected');
      if (initiallySelected) {
        globalSearchSelected.innerHTML = initiallySelected.innerHTML;
      }
    }
  }

  // --- Dynamic Widget Generation ---
  function generateWidgets() {
    const widgetsScreen = document.getElementById('widgets-screen');
    if (!widgetsScreen) return;
    widgetsScreen.innerHTML = '';

    // Widget templates for each app (customize as needed)
    const widgetTemplates = {
      'my-files': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content notification-widget"><div class="big-number">23</div><div class="widget-subtitle">No more events today</div></div></div>`,
      'this-pc': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content disk-space-widget"><div class="big-number">23%</div><div class="progress-bar"><div class="progress" style="width: 23%"></div></div><div class="widget-subtitle">15 GB / 50 GB</div></div></div>`,
      'web-files': app => `<div class="widget" style="width: 48%; float: right;"><div class="widget-content email-widget"><div class="widget-icon"><i class="fas fa-headphones"></i></div><div class="widget-data"><div class="big-number">23</div><div class="widget-subtitle">Unread emails</div></div></div></div>`,
      'trash-sm': app => `<div class="widget" style="width: 48%;"><div class="widget-content messages-widget"><div class="widget-icon"><i class="fas fa-dollar-sign"></i></div><div class="widget-data"><div class="big-number">23</div><div class="widget-subtitle">Unread messages</div></div></div></div>`,
      'settings-sm': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Settings</div><div class="widget-subtitle">Configure your system</div></div></div>`,
      'site-builder-sm': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Site</div><div class="widget-subtitle">Build your website</div></div></div>`,
      'app-store-sm': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Store</div><div class="widget-subtitle">Find new apps</div></div></div>`,
      'social-master': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Social</div><div class="widget-subtitle">Connect with friends</div></div></div>`,
      'personalize': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Theme</div><div class="widget-subtitle">Personalize your desktop</div></div></div>`,
      'word-doc': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Docs</div><div class="widget-subtitle">Word documents</div></div></div>`,
      'excel-numbers': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Excel</div><div class="widget-subtitle">Spreadsheets</div></div></div>`,
      'notepad': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Notes</div><div class="widget-subtitle">Quick notes</div></div></div>`,
      'wordpad': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Wordpad</div><div class="widget-subtitle">Rich text notes</div></div></div>`,
      'calculator-sm': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Calc</div><div class="widget-subtitle">Calculator</div></div></div>`,
      'photoshop-sm': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Photo</div><div class="widget-subtitle">Edit images</div></div></div>`,
      'calendar-app': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Calendar</div><div class="widget-subtitle">Your events</div></div></div>`,
      'notes': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Notes</div><div class="widget-subtitle">Sticky notes</div></div></div>`,
      'email-app': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Notes</div><div class="widget-subtitle">Sticky notes</div></div></div>`,
      'point-of-sale-app': app => `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">Notes</div><div class="widget-subtitle">Sticky notes</div></div></div>`

      // Add more mappings as needed
    };

    startMenuApps.forEach(app => {
      // Skip app-launcher itself
      if (app.id === 'app-launcher') return;
      let widgetHTML = '';
      if (widgetTemplates[app.id]) {
        widgetHTML = widgetTemplates[app.id](app);
      } else {
        widgetHTML = `<div class="widget"><div class="widget-header"><span>${app.name}</span></div><div class="widget-content"><div class="big-number">App</div><div class="widget-subtitle">${app.name} widget</div></div></div>`;
      }
      widgetsScreen.insertAdjacentHTML('beforeend', widgetHTML);
    });
  }

  // Ensure widgets are visible by default on desktop
  const widgetsScreen = document.getElementById('widgets-screen');
  if (widgetsScreen && window.innerWidth > 1023) {
    widgetsScreen.classList.remove('widgets-hidden');
    widgetsScreen.style.display = '';
  }
  generateWidgets();





});





// --- Robust volume UI update function ---
function updateVolumeUI(value) {
  const volumeBtn = document.getElementById('volume-btn');
  const volumePanel = document.getElementById('volume-panel');
  const icon = volumeBtn ? volumeBtn.querySelector('i') : null;
  const panelIcon = volumePanel ? volumePanel.querySelector('.volume-slider-panel i') : null;
  const volumePercent = document.getElementById('volume-percentage');
  isMuted = (value === 0);
  if (icon) {
    icon.classList.remove('fa-volume-up', 'fa-volume-mute');
    icon.classList.add(isMuted ? 'fa-volume-mute' : 'fa-volume-up');
  }
  if (panelIcon) {
    panelIcon.classList.remove('fa-volume-up', 'fa-volume-mute');
    panelIcon.classList.add(isMuted ? 'fa-volume-mute' : 'fa-volume-up');
  }
  if (volumePercent) {
    volumePercent.textContent = value + '%';
  }
}





// Volume Panel: Live percentage and volume control
function setupVolumePanelListeners() {
  const volumeSlider = document.getElementById('browser-volume-slider');
  const volumePercent = document.getElementById('volume-percentage');
  // Try to find a global <audio> element (if you have one)
  const audio = document.querySelector('audio');

  if (volumeSlider && volumePercent) {
    const updateVolume = () => {
      const value = parseInt(volumeSlider.value, 10);
      volumePercent.textContent = value + '%';
      updateVolumeUI(value);
      if (audio) {
        audio.volume = value / 100;
      }
    };
    volumeSlider.addEventListener('input', updateVolume);
    // Set initial value
    updateVolume();
  }
}

document.addEventListener('DOMContentLoaded', function () {


  // Define the populateContextMenu function globally
  window.populateContextMenu = function (menuItems, x, y) {
    const contextMenu = document.getElementById('context-menu');
    if (!contextMenu) {
      console.error('Context menu element not found.');
      return;
    }

    // Clear existing menu items
    contextMenu.innerHTML = '';

    // Populate menu items
    menuItems.forEach(item => {
      if (item.type === 'separator') {
        const separator = document.createElement('div');
        separator.className = 'context-menu-separator';
        contextMenu.appendChild(separator);
      } else {
        const menuItem = document.createElement('div');
        menuItem.className = 'context-menu-item';
        menuItem.innerHTML = `<i class="fas ${item.icon}"></i><span>${item.label}</span>`;
        menuItem.addEventListener('click', () => {
          if (typeof window.executeContextMenuAction === 'function') {
            window.executeContextMenuAction(item.action);
          }
        });
        contextMenu.appendChild(menuItem);
      }
    });

    // Position and display the context menu
    contextMenu.style.left = `${x}px`;
    contextMenu.style.top = `${y}px`;
    contextMenu.classList.remove('hidden');
  };

  // Ensure the context menu is hidden when clicking outside
  document.addEventListener('click', (e) => {
    const contextMenu = document.getElementById('context-menu');
    if (contextMenu && !contextMenu.contains(e.target)) {
      contextMenu.classList.add('hidden');
    }
  });


  setupVolumePanelListeners();
  setNotificationsBtnOpacity();

  // Fix: Always attach close button event after DOM is ready
  const volumePanel = document.getElementById('volume-panel');
  const closeBtn = document.getElementById('close-volume-panel');
  const volumeBtn = document.getElementById('volume-btn');
  if (closeBtn && volumePanel) {
    closeBtn.addEventListener('click', () => {
      volumePanel.classList.remove('visible');
      setTimeout(() => {
        volumePanel.style.display = 'none';
      }, 350);
    });
  }

  // --- Mute/unmute logic for BOTH icons in the panel ---
  const browserVolumeSlider = document.getElementById('browser-volume-slider');
  // Icon in the slider panel
  const panelIcon = volumePanel ? volumePanel.querySelector('.volume-slider-panel i') : null;
  // Icon in the volume-panel-box (music section)
  const boxIcon = volumePanel ? volumePanel.querySelector('.music-panel-box i.fas.fa-volume-up, .music-panel-box i.fas.fa-volume-mute') : null;

  function handleMuteUnmuteClick() {
    if (!browserVolumeSlider) return;
    if (!isMuted) {
      previousVolume = browserVolumeSlider.value;
      browserVolumeSlider.value = 0;
      browserVolumeSlider.dispatchEvent(new Event('input', { bubbles: true }));
    } else {
      browserVolumeSlider.value = previousVolume;
      browserVolumeSlider.dispatchEvent(new Event('input', { bubbles: true }));
    }
  }

  if (panelIcon) {
    panelIcon.style.cursor = 'pointer';
    panelIcon.addEventListener('click', handleMuteUnmuteClick);
  }
  if (boxIcon) {
    boxIcon.style.cursor = 'pointer';
    boxIcon.addEventListener('click', handleMuteUnmuteClick);
  }

  // --- Playlist button logic: always attach after DOMContentLoaded ---
  const musicPanel = volumePanel ? volumePanel.querySelector('.music-panel-box') : null;
  const playlistBtn = musicPanel ? musicPanel.querySelector('.music-btn[title="Playlist"]') : null;
  if (playlistBtn && musicPanel) {
    playlistBtn.addEventListener('click', () => {
      if (musicPanel.style.display === 'none') return;
      let domPlaylistPanel = musicPanel.parentNode.querySelector('.playlist-panel-slide');
      if (!domPlaylistPanel) {
        domPlaylistPanel = document.createElement('div');
        domPlaylistPanel.className = 'music-panel-box playlist-panel-slide';
        domPlaylistPanel.style.position = 'absolute';
        domPlaylistPanel.style.left = '0';
        domPlaylistPanel.style.right = '0';
        domPlaylistPanel.style.bottom = '100%';
        domPlaylistPanel.style.margin = '0 auto 28px auto';
        domPlaylistPanel.style.transition = 'transform 0.35s cubic-bezier(0.4,0,0.2,1)';
        domPlaylistPanel.style.transform = 'translateY(100%)';
        domPlaylistPanel.innerHTML = '<div style="padding: 18px 18px 10px 18px; color: #fff; font-size: 1.1rem; font-weight: 600;">Playlist (placeholder)</div>';
        musicPanel.style.position = 'relative';
        musicPanel.parentNode.insertBefore(domPlaylistPanel, musicPanel);
        setTimeout(() => {
          domPlaylistPanel.style.transform = 'translateY(0)';
        }, 10);
      } else {
        domPlaylistPanel.style.transform = 'translateY(100%)';
        if (window._playlistPanelRemoveTimeout) {
          clearTimeout(window._playlistPanelRemoveTimeout);
          window._playlistPanelRemoveTimeout = null;
        }
        window._playlistPanelRemoveTimeout = setTimeout(() => {
          if (domPlaylistPanel && domPlaylistPanel.parentNode) {
            domPlaylistPanel.parentNode.removeChild(domPlaylistPanel);
          }
          window._playlistPanelRemoveTimeout = null;
        }, 350);
      }
    });
  }

  // --- Always close volume panel when clicking outside ---
  document.addEventListener('mousedown', function (e) {
    const panel = document.getElementById('volume-panel');
    const btn = document.getElementById('volume-btn');
    if (
      panel &&
      panel.classList.contains('visible') &&
      !panel.contains(e.target) &&
      !(btn && btn.contains(e.target))
    ) {
      panel.classList.remove('visible');
      setTimeout(() => {
        panel.style.display = 'none';
      }, 350);
    }
  });

  // --- Volume Panel Show/Hide Handler ---
  function attachVolumeBtnHandler() {
    const volumeBtn = document.getElementById('volume-btn');
    const volumePanel = document.getElementById('volume-panel');
    if (!volumeBtn || !volumePanel) return;
    // Remove previous click handlers by cloning
    const newBtn = volumeBtn.cloneNode(true);
    volumeBtn.parentNode.replaceChild(newBtn, volumeBtn);
    newBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      // Always reset display before toggling
      if (volumePanel.classList.contains('visible')) {
        volumePanel.classList.remove('visible');
        setTimeout(() => {
          volumePanel.style.display = 'none';
        }, 350);
      } else {
        if (typeof window.hideWalletSidebar === 'function') window.hideWalletSidebar();
        volumePanel.style.display = 'flex';
        requestAnimationFrame(() => {
          volumePanel.classList.add('visible');
        });
      }
    });
  }
  attachVolumeBtnHandler();
});



//logout function
const handleLogout = () => {
  showConfirmDialog({
    title: "Log out?",
    message: "Are you sure you want to log out?",
    iconClass: "fa-sign-out-alt",
    okText: "Log out",
    cancelText: "Cancel"
  }).then(confirmed => {
    if (confirmed) {
      if (typeof startMenu !== 'undefined' && startMenu) startMenu.style.display = 'none';
      window._loggingOut = true;
      if (window._allPopoutWindows && Array.isArray(window._allPopoutWindows)) {
        window._allPopoutWindows = window._allPopoutWindows.filter(win => {
          if (win && !win.closed) {
            try { win.close(); } catch (e) { }
            return false;
          }
          return false;
        });
      }
      setTimeout(() => { window._loggingOut = false; }, 2000);
    }
  });
};

const logOutButton = document.querySelector('.start-menu-logout-button') || document.querySelector('.logout-button');
if (logOutButton) {
  logOutButton.addEventListener('click', (e) => {
    e.preventDefault();
    handleLogout();
  });
}



function getAppIconDetails(appName) {
  // Special case for compose window
  if (appName === 'compose') {
    return { iconClass: 'fa-pen', iconBgClass: 'blue-icon' };
  }
  let iconClass = 'fa-window-maximize';
  let iconBgClass = 'gray-icon';
  // First, try to get from startMenuApps
  if (typeof startMenuApps !== 'undefined') {
    const appObj = startMenuApps.find(a => a.id === appName);
    if (appObj) {
      iconClass = appObj.iconClass || iconClass;
      iconBgClass = appObj.iconBgClass || iconBgClass;
      return { iconClass, iconBgClass };
    }
  }
  // Fallback: try to get from desktop icon
  const desktopIcon = document.querySelector(`.desktop-icon[data-app="${appName}"]`);
  if (desktopIcon) {
    const iElem = desktopIcon.querySelector('i');
    const cElem = desktopIcon.querySelector('.icon-container');
    if (iElem) iconClass = iElem.className.split(' ').find(cls => cls.startsWith('fa-')) || iconClass;
    if (cElem) iconBgClass = cElem.className.split(' ').find(cls => cls.endsWith('-icon')) || iconBgClass;
  }
  return { iconClass, iconBgClass };
}


//Top bar with icons and profile
function createAppLauncherTopBar() {
  const topBar = document.createElement('div');
  topBar.className = 'app-launcher-top-bar';
  topBar.style.display = 'flex';
  topBar.style.justifyContent = 'space-between';
  topBar.style.alignItems = 'center';
  topBar.style.height = '35px';
  topBar.style.padding = '0 15px 0 3px';
  topBar.style.background = '#050217c5';
  topBar.style.backdropFilter = 'blur(30px)';

  // Profile (left)
  const profileBtn = document.createElement('button');
  profileBtn.className = 'app-launcher-profile-btn';
  profileBtn.innerHTML = '<img src="img/avatar.png" alt="User" class="profile-avatar" style="width:24px;height:24px;border-radius:50%;">Michael Muchmore';
  profileBtn.style.background = 'transparent';
  profileBtn.style.color = '#fff';
  profileBtn.style.border = 'none';
  profileBtn.style.borderRadius = '5px';
  profileBtn.style.padding = '5px 15px';
  profileBtn.style.fontSize = '14px';
  profileBtn.style.fontWeight = '500';
  profileBtn.style.gap = '15px';
  profileBtn.style.cursor = 'pointer';
  profileBtn.style.display = 'flex';
  profileBtn.style.alignItems = 'center';
  profileBtn.style.transition = 'background 0.18s';
  profileBtn.addEventListener('mouseover', () => { profileBtn.style.background = 'var(--accent-color)' });
  profileBtn.addEventListener('mouseout', () => { profileBtn.style.background = 'transparent' });
  profileBtn.addEventListener('click', function (e) {
    e.stopPropagation();
    if (window._profileDropdown && window._profileDropdown.parentNode) window._profileDropdown.parentNode.removeChild(window._profileDropdown);
    const profileDropdown = document.createElement('div');
    window._profileDropdown = profileDropdown;
    profileDropdown.className = 'context-menu app-launcher-profile-dropdown';
    profileDropdown.style.position = 'absolute';
    profileDropdown.style.zIndex = '10000';
    const rect = profileBtn.getBoundingClientRect();
    profileDropdown.style.left = rect.left + 'px';
    profileDropdown.style.top = (rect.bottom + 4) + 'px';
    const userProfile = document.createElement('div');
    userProfile.className = 'settings-user-profile';
    userProfile.style.display = 'flex';
    userProfile.style.flexDirection = 'column';
    userProfile.style.alignItems = 'center';
    userProfile.style.justifyContent = 'center';
    userProfile.style.padding = '25px 10px';
    userProfile.style.borderBottom = '1px solid rgba(255,255,255,0.08)';
    userProfile.style.marginBottom = '6px';
    userProfile.innerHTML = `
      <img src="img/avatar.png" alt="User" class="profile-avatar" style="width:54px;height:54px;border-radius:50%;margin-bottom:8px;">
      <div class="profile-info" style="text-align:center;">
        <span class="profile-name" style="display:block;font-size:15px;font-weight:600;margin-top:5px;">Michael Muchmore</span>
        <span class="profile-id" style="display:block;font-size:13px;color:#aaa;margin-top:5px;">argenti.ro</span>
      </div>
    `;
    profileDropdown.appendChild(userProfile);
    const backToDesktop = document.createElement('div');
    backToDesktop.className = 'context-menu-item';
    backToDesktop.innerHTML = '<i class="fas fa-desktop"></i><span>Back to desktop mode</span>';
    backToDesktop.addEventListener('click', function (ev) {
      window.executeContextMenuAction && window.executeContextMenuAction('desktop-mode');
      if (profileDropdown && profileDropdown.parentNode) profileDropdown.parentNode.removeChild(profileDropdown);
      ev.stopPropagation();
    });
    profileDropdown.appendChild(backToDesktop);
    const sep1 = document.createElement('div');
    sep1.className = 'context-menu-separator';
    profileDropdown.appendChild(sep1);
    const profileAction = document.createElement('div');
    profileAction.className = 'context-menu-item';
    profileAction.innerHTML = '<i class="fas fa-user-cog"></i><span>Open Profile Settings</span>';
    profileAction.style.justifyContent = 'center';
    profileAction.addEventListener('click', function (ev) {
      openApp('settings', 'Settings', 'fa-cog', 'green');
      if (profileDropdown && profileDropdown.parentNode) profileDropdown.parentNode.removeChild(profileDropdown);
      ev.stopPropagation();
    });
    profileDropdown.appendChild(profileAction);
    const viewItem = document.createElement('div');
    viewItem.className = 'context-menu-item has-submenu';
    viewItem.innerHTML = '<i class="fas fa-eye"></i><span>View</span><i class="fas fa-chevron-right context-menu-chevron"></i>';
    const viewSubmenu = document.createElement('div');
    viewSubmenu.className = 'context-menu submenu';
    viewSubmenu.style.position = 'fixed';
    viewSubmenu.style.zIndex = '10001';
    viewSubmenu.style.visibility = 'hidden';
    viewSubmenu.innerHTML = '';
    const multitask = document.createElement('div');
    multitask.className = 'context-menu-item context-menu-submenu-item';
    multitask.innerHTML = '<i class="fas fa-object-ungroup"></i><span>Multitask</span>';
    multitask.addEventListener('click', function (ev) {
      window.executeContextMenuAction && window.executeContextMenuAction('multi-task-mode');
      if (profileDropdown && profileDropdown.parentNode) profileDropdown.parentNode.removeChild(profileDropdown);
      ev.stopPropagation();
    });
    viewSubmenu.appendChild(multitask);
    const easyMode = document.createElement('div');
    easyMode.className = 'context-menu-item context-menu-submenu-item';
    easyMode.innerHTML = '<i class="fas fa-table-columns"></i><span>Easy Mode</span>';
    easyMode.addEventListener('click', function (ev) {
      window.executeContextMenuAction && window.executeContextMenuAction('single-task-mode');
      if (profileDropdown && profileDropdown.parentNode) profileDropdown.parentNode.removeChild(profileDropdown);
      ev.stopPropagation();
    });
    viewSubmenu.appendChild(easyMode);
    let submenuHover = false;
    let submenuCloseTimer = null;
    function openSubmenu() {
      const rect = viewItem.getBoundingClientRect();
      viewSubmenu.style.left = (rect.right) + 'px';
      viewSubmenu.style.top = (rect.top) + 'px';
      viewSubmenu.style.visibility = '';
      document.body.appendChild(viewSubmenu);
    }
    function closeSubmenu() {
      if (viewSubmenu && viewSubmenu.parentNode) viewSubmenu.parentNode.removeChild(viewSubmenu);
    }
    viewItem.addEventListener('mouseenter', function () {
      if (submenuCloseTimer) { clearTimeout(submenuCloseTimer); submenuCloseTimer = null; }
      openSubmenu();
    });
    viewItem.addEventListener('mouseleave', function () {
      submenuCloseTimer = setTimeout(() => {
        if (!submenuHover) closeSubmenu();
      }, 120);
    });
    viewSubmenu.addEventListener('mouseenter', function () {
      submenuHover = true;
      if (submenuCloseTimer) { clearTimeout(submenuCloseTimer); submenuCloseTimer = null; }
    });
    viewSubmenu.addEventListener('mouseleave', function () {
      submenuHover = false;
      submenuCloseTimer = setTimeout(() => {
        closeSubmenu();
      }, 120);
    });
    profileDropdown.appendChild(viewItem);
    const settingsItem = document.createElement('div');
    settingsItem.className = 'context-menu-item';
    settingsItem.innerHTML = '<i class="fas fa-cog"></i><span>Settings</span>';
    settingsItem.addEventListener('click', function (ev) {
      openApp('settings', 'Settings', 'fa-cog', 'green');
      if (profileDropdown && profileDropdown.parentNode) profileDropdown.parentNode.removeChild(profileDropdown);
      ev.stopPropagation();
    });
    profileDropdown.appendChild(settingsItem);
    const sep2 = document.createElement('div');
    sep2.className = 'context-menu-separator';
    profileDropdown.appendChild(sep2);
    const helpItem = document.createElement('div');
    helpItem.className = 'context-menu-item';
    helpItem.innerHTML = '<i class="fas fa-question-circle"></i><span>Help and Support</span>';
    helpItem.addEventListener('click', function (ev) {
      window.executeContextMenuAction && window.executeContextMenuAction('help-and-support');
      if (profileDropdown && profileDropdown.parentNode) profileDropdown.parentNode.removeChild(profileDropdown);
      ev.stopPropagation();
    });
    profileDropdown.appendChild(helpItem);
    const logoutItem = document.createElement('div');
    logoutItem.className = 'context-menu-item';
    logoutItem.innerHTML = '<i class="fas fa-sign-out-alt"></i><span>Logout</span>';
    logoutItem.addEventListener('click', function (ev) {
      handleLogout();
      if (profileDropdown && profileDropdown.parentNode) profileDropdown.parentNode.removeChild(profileDropdown);
      ev.stopPropagation();
    });
    profileDropdown.appendChild(logoutItem);
    setTimeout(() => {
      function closeDropdown(ev) {
        if (profileDropdown && !profileDropdown.contains(ev.target) && ev.target !== profileBtn) {
          profileDropdown.classList.remove('anim-slide-down');
          profileDropdown.classList.add('anim-slide-up');
          profileDropdown.addEventListener('animationend', function handler(e) {
            if (e.animationName === 'appLauncherProfileDropdownSlideUp') {
              if (profileDropdown.parentNode) profileDropdown.parentNode.removeChild(profileDropdown);
              profileDropdown.removeEventListener('animationend', handler);
            }
          });
          document.removeEventListener('mousedown', closeDropdown);
          document.removeEventListener('scroll', closeDropdown, true);
        }
      }
      document.addEventListener('mousedown', closeDropdown);
      document.addEventListener('scroll', closeDropdown, true);
    }, 0);
    document.body.appendChild(profileDropdown);
    profileDropdown.classList.remove('anim-slide-up');
    void profileDropdown.offsetWidth;
    profileDropdown.classList.add('anim-slide-down');
    profileDropdown.addEventListener('animationend', function handler(e) {
      if (e.animationName === 'appLauncherProfileDropdownSlideDown') {
        profileDropdown.classList.remove('anim-slide-down');
      }
    });
  });
  topBar.appendChild(profileBtn);

  // Taskbar-right icons (right) - CLONE, NOT MOVE
  const rightIcons = createAppLauncherTaskbarRightIcons();
  topBar.appendChild(rightIcons);
  // Re-attach listeners to cloned icons
  rightIcons.querySelectorAll('.taskbar-icon').forEach(attachTaskbarIconListeners);
  // --- After moving/replacing, update window.walletBtn to the new element ---
  window.walletBtn = document.getElementById('wallet-btn');

  return topBar;
}


// Helper: Attach event listeners to a taskbar icon clone (robust, no event forwarding)
function attachTaskbarIconListeners(cloneBtn) {
  // Remove ID to avoid duplicate IDs in DOM, but do NOT remove id from widgets-toggle-btn, wallet-btn, notifications-btn, volume-btn, fullscreen-btn, global-search-btn, app-launcher-btn, ai-chat-btn
  if (
    cloneBtn.id &&
    !['widgets-toggle-btn', 'wallet-btn', 'notifications-btn', 'volume-btn', 'fullscreen-btn', 'global-search-btn', 'app-launcher-btn', 'ai-chat-btn'].includes(cloneBtn.id)
  ) cloneBtn.removeAttribute('id');
  // Only attach to buttons or clickable divs
  if (
    !(cloneBtn.tagName === 'BUTTON' ||
      cloneBtn.classList.contains('taskbar-icon') ||
      cloneBtn.classList.contains('taskbar-time') ||
      cloneBtn.classList.contains('taskbar-ai'))
  ) {
    return;
  }


  // Helper to attach the correct click logic to a button or div
  function attachLogicToEl(el) {
    el.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      // Always use the .taskbar-icon as the context for icon checks
      let iconContainer = el;
      if (el.tagName === 'BUTTON' && el.parentElement && el.parentElement.classList.contains('taskbar-icon')) {
        iconContainer = el.parentElement;
      }
      // AI Chat
      if (iconContainer.classList.contains('taskbar-icon') && iconContainer.querySelector('.fa-comment-dots')) {
        if (typeof openApp === 'function') openApp('ai-chat', 'AI Chat', 'fa-comment-dots', 'blue');
      }
      // Notifications (use the same function as the original button)
      else if (iconContainer.classList.contains('taskbar-icon') && iconContainer.querySelector('.fa-bell, .fa-bell-slash')) {
        if (typeof toggleNotificationsPanel === 'function') toggleNotificationsPanel();
      }
      // Fullscreen
      else if (iconContainer.classList.contains('taskbar-icon') && iconContainer.querySelector('.fa-expand, .fa-compress')) {
        // Fullscreen button logic
        const fullscreenIcon = iconContainer.querySelector('i');
        function isFullscreen() {
          return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
        }
        function requestFullscreen(elem, fromUserGesture = false) {
          try {
            // Only proceed if this is from a user gesture or if we're in a click handler
            if (!fromUserGesture) {
              console.warn('Fullscreen request not from user gesture');
              if (typeof showShortTopNotification === 'function') {
                showShortTopNotification('Fullscreen must be triggered by user interaction');
              }
              return Promise.reject('Not from user gesture');
            }
            
            if (elem.requestFullscreen) {
              return elem.requestFullscreen();
            } else if (elem.webkitRequestFullscreen) {
              return elem.webkitRequestFullscreen();
            } else if (elem.mozRequestFullScreen) {
              return elem.mozRequestFullScreen();
            } else if (elem.msRequestFullscreen) {
              return elem.msRequestFullscreen();
            }
          } catch (err) {
            console.warn('Fullscreen request failed:', err);
            if (typeof showShortTopNotification === 'function') {
              showShortTopNotification('Fullscreen must be triggered by user interaction');
            }
          }
          return Promise.reject('No fullscreen API available');
        }
        function exitFullscreen() {
          try {
            if (document.exitFullscreen) {
              return document.exitFullscreen();
            } else if (document.webkitExitFullscreen) {
              return document.webkitExitFullscreen();
            } else if (document.mozCancelFullScreen) {
              return document.mozCancelFullScreen();
            } else if (document.msExitFullscreen) {
              return document.msExitFullscreen();
            }
          } catch (err) {
            console.warn('Exit fullscreen failed:', err);
          }
          return Promise.resolve();
        }
        function updateFullscreenIcon() {
          if (fullscreenIcon) {
            if (isFullscreen()) {
              fullscreenIcon.classList.remove('fa-expand');
              fullscreenIcon.classList.add('fa-compress');
            } else {
              fullscreenIcon.classList.remove('fa-compress');
              fullscreenIcon.classList.add('fa-expand');
            }
          }
        }
        
        // This is a click handler, so we can pass true to indicate it's from a user gesture
        if (isFullscreen()) {
          exitFullscreen().catch(err => console.warn('Exit fullscreen error:', err));
        } else {
          requestFullscreen(document.documentElement, true).catch(err => {
            console.warn('Request fullscreen error:', err);
            if (err !== 'No fullscreen API available' && typeof showShortTopNotification === 'function') {
              showShortTopNotification('Fullscreen request failed');
            }
          });
        }
        setTimeout(updateFullscreenIcon, 100); // update icon after state change
      }
      // REMOVE: Volume panel toggle logic from here. Handled exclusively by attachVolumeBtnHandler.
      // Global search (exclude volume)
      else if (iconContainer.classList.contains('taskbar-icon') && iconContainer.querySelector('.fa-search') && !iconContainer.querySelector('.fa-volume-up, .fa-volume-mute')) {
        const globalSearchOverlay = document.getElementById('global-search-overlay');
        const globalSearchInput = document.getElementById('global-search-input');
        if (globalSearchOverlay && globalSearchInput) {
          if (window.innerWidth <= 1023) return;
          if (globalSearchOverlay.style.display !== 'flex') {
            globalSearchOverlay.style.display = 'flex';
            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                globalSearchOverlay.style.opacity = '1';
                globalSearchOverlay.style.visibility = 'visible';
                globalSearchInput.tabIndex = -1;
                globalSearchInput.blur();
                globalSearchInput.tabIndex = 0;
                globalSearchInput.focus();
                globalSearchInput.select();
                document.body.style.overflow = 'hidden';
              });
            });
          } else {
            globalSearchInput.tabIndex = -1;
            globalSearchInput.blur();
            globalSearchInput.tabIndex = 0;
            globalSearchInput.focus();
            globalSearchInput.select();
          }
        }
      }
      // Generic app
      else if (iconContainer.classList.contains('taskbar-icon') && iconContainer.hasAttribute('data-app')) {
        const app = iconContainer.getAttribute('data-app');
        if (typeof openApp === 'function') openApp(app, app.charAt(0).toUpperCase() + app.slice(1), '', '');
      }
    });
  }

  // Attach to the element itself
  attachLogicToEl(cloneBtn);

  // If this is a .taskbar-icon, also attach to its child button (if present)
  if (cloneBtn.classList.contains('taskbar-icon')) {
    const btn = cloneBtn.querySelector('button');
    if (btn) {
      attachLogicToEl(btn);
    }
  }


} // <-- Properly close the function

// --- Wallet Sidebar Toggle Logic ---
function attachWalletBtnToggleHandler() {
  const walletBtn = document.getElementById('wallet-btn');
  const walletSidebar = document.getElementById('wallet-sidebar');
  if (!walletBtn || !walletSidebar) return;
  // Remove previous click handlers
  walletBtn.replaceWith(walletBtn.cloneNode(true));
  const newWalletBtn = document.getElementById('wallet-btn');
  let walletVisible = walletSidebar.classList.contains('wallet-sidebar-visible');
  newWalletBtn.addEventListener('click', function () {
    if (window.innerWidth <= 1023) return;
    walletVisible = walletSidebar.classList.contains('wallet-sidebar-visible');
    if (!walletVisible) {
      if (typeof window.showWalletSidebar === 'function') window.showWalletSidebar();
    } else {
      if (typeof window.hideWalletSidebar === 'function') window.hideWalletSidebar();
    }
  });
}

document.addEventListener('DOMContentLoaded', function () {
  attachWalletBtnToggleHandler();
});


(function () {
  window.attachWalletBtnToggleHandler = attachWalletBtnToggleHandler;
  const origExecuteContextMenuAction = window.executeContextMenuAction;
  window.executeContextMenuAction = async function (action) {
    if (
      window.currentContextMenuTarget &&
      window.currentContextMenuTarget.classList &&
      window.currentContextMenuTarget.classList.contains('taskbar-icon') &&
      window.currentContextMenuTarget.closest('.app-launcher-taskbar-right')
    ) {
      window.currentContextMenuTarget.click();
      if (typeof hideContextMenu === 'function') hideContextMenu();
      return;
    }
    return origExecuteContextMenuAction.call(this, action);
  };
})();

// --- App Launcher Top Bar Right Icons (robust, unified) ---
function createAppLauncherTaskbarRightIcons() {
  const taskbarRight = document.querySelector('.taskbar-right');
  let rightIcons = document.createElement('div');
  rightIcons.className = 'app-launcher-taskbar-right';
  rightIcons.style.display = 'flex';
  rightIcons.style.alignItems = 'center';
  let launcherTaskbarRightWrapper = document.createElement('div');
  launcherTaskbarRightWrapper.className = 'taskbar-right';
  launcherTaskbarRightWrapper.style.display = 'flex';
  launcherTaskbarRightWrapper.style.alignItems = 'center';
  // MOVE, do not clone
  Array.from(taskbarRight.children).forEach(child => {
    launcherTaskbarRightWrapper.appendChild(child); // MOVE, do not clone
  });
  rightIcons.appendChild(launcherTaskbarRightWrapper);
  // Hide the main .taskbar-right in App Launcher mode
  if (taskbarRight) taskbarRight.style.display = 'none';
  return rightIcons;
}



// --- Wallet Sidebar Toggle Logic ---
(function () {
  const walletBtn = document.getElementById('wallet-btn');
  const walletSidebar = document.getElementById('wallet-sidebar');
  const walletCloseBtn = walletSidebar ? walletSidebar.querySelector('#wallet-close-btn') : null;
  let walletVisible = false;

  // --- Wallet display mode state ---
  window.walletDisplayMode = window.walletDisplayMode || 'icon';
  window.walletAccountBalance = '$ 254.00';

  function updateWalletBtnDisplay() {
    const walletBtn = window.walletBtn || document.getElementById('wallet-btn');
    if (!walletBtn) return;
    if (window.walletDisplayMode === 'icon') {
      walletBtn.innerHTML = '<i class="fas fa-wallet"></i>';
    } else if (window.walletDisplayMode === 'balance') {
      walletBtn.innerHTML = `<span style="font-weight:600;font-size:15px;">${window.walletAccountBalance}</span>`;
    }
  }

  function showWalletSidebar() {
    if (!walletSidebar) return;
    const aiChatWindow = document.getElementById('ai-chat-window');
    if (aiChatWindow && aiChatWindow.classList.contains('ai-chat-visible')) {
      aiChatWindow.classList.remove('ai-chat-visible');
      aiChatWindow.addEventListener('transitionend', function handler(e) {
        if (e.propertyName === 'transform') {
          aiChatWindow.style.display = 'none';
          aiChatWindow.removeEventListener('transitionend', handler);
        }
      });
    }
    walletSidebar.style.display = 'flex';
    setTimeout(() => walletSidebar.classList.add('wallet-sidebar-visible'), 10);
    walletVisible = true;
  }
  window.showWalletSidebar = showWalletSidebar;
  function hideWalletSidebar() {
    if (!walletSidebar) return;
    walletSidebar.classList.remove('wallet-sidebar-visible');
    // Remove any previous transitionend handlers to avoid duplicates
    walletSidebar.removeEventListener('transitionend', walletSidebar._onTransitionEnd);
    walletSidebar._onTransitionEnd = function (e) {
      if (e.propertyName === 'transform' && !walletSidebar.classList.contains('wallet-sidebar-visible')) {
        walletSidebar.style.display = 'none';
        walletSidebar.removeEventListener('transitionend', walletSidebar._onTransitionEnd);
      }
    };
    walletSidebar.addEventListener('transitionend', walletSidebar._onTransitionEnd);
    walletVisible = false;
  }
  window.hideWalletSidebar = hideWalletSidebar;

  document.addEventListener('DOMContentLoaded', function () {
    updateWalletBtnDisplay();
    if (walletBtn && walletSidebar) {
      walletBtn.addEventListener('click', function () {
        if (window.innerWidth <= 1023) return;
        if (!walletVisible) {
          showWalletSidebar();
        } else {
          hideWalletSidebar();
        }
      });
    }
    if (walletCloseBtn) {
      walletCloseBtn.addEventListener('click', function () {
        if (!walletVisible) return;
        hideWalletSidebar();
      });
    }
    document.addEventListener('mousedown', function (e) {
      if (
        walletVisible &&
        walletSidebar &&
        !walletSidebar.contains(e.target) &&
        walletBtn &&
        !walletBtn.contains(e.target) &&
        window.innerWidth > 1023
      ) {
        hideWalletSidebar();
      }
    });
  });
  window.updateWalletBtnDisplay = updateWalletBtnDisplay;
})();





// --- Fade out helper for notif-section-label ---
function fadeOutSectionLabel(sectionLabel) {
  if (!sectionLabel) return;
  if (sectionLabel.classList.contains('fading-out')) return;
  sectionLabel.classList.add('fading-out');
  sectionLabel.style.transition = 'all 0.3s ease-out';
  sectionLabel.style.opacity = '0';
  sectionLabel.style.height = '0';
  sectionLabel.style.marginTop = '0';
  sectionLabel.style.marginBottom = '0';
  sectionLabel.style.overflow = 'hidden';

  setTimeout(() => {
    sectionLabel.style.display = 'none';
    sectionLabel.remove();
  }, 300);
}




//Press N to open trigger notifications
document.addEventListener('keydown', function (e) {
  const active = document.activeElement;
  if (active && (active.tagName === 'INPUT' || active.tagName === 'TEXTAREA' || active.isContentEditable)) return;
  if (e.key === 'n' || e.key === 'N') {
    addNotification({
      title: 'New incoming notification',
      desc: 'This is a test notification',
      meta: 'now',
      iconClass: 'fa-shopping-cart',
      iconBgClass: 'notif-bg-blue',
      avatar: 'img/avatar.png',
      unread: true
    });
  }
});

// Function to toggle the widgets screen
// function toggleWidgetsScreen() {
//   const widgetsScreen = document.getElementById('widgets-screen');
//   if (widgetsScreen) {
//     widgetsScreen.classList.toggle('active');
//   }
// }
// To test, call from console: toggleWidgetsScreen()


//disable pinch zoom
window.addEventListener(
  "touchmove",
  function (event) {
    if (event.scale !== 1) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }
  },
  { passive: false }
);

document.addEventListener('contextmenu', function (event) {
  // Allow context menu in email content areas, all inputs, textareas, and contenteditables
  if (
    event.target.closest('.email-content') ||
    event.target.closest('.email-content-section') ||
    event.target.tagName === 'INPUT' ||
    event.target.tagName === 'TEXTAREA' ||
    event.target.isContentEditable
  ) return;
  event.preventDefault(); // This disables the browser's context menu elsewhere
});


// Utility: Close start menu with animation
function closeStartMenuAnimated() {
  if (!startMenu) return;
  if (startMenu.style.display === 'block') {
    startMenu.classList.remove('start-menu-anim-open');
    startMenu.classList.add('start-menu-anim-close');
    startMenu.addEventListener('animationend', function handler() {
      startMenu.style.display = 'none';
      startMenu.classList.remove('start-menu-anim-close');
      startMenu.removeEventListener('animationend', handler);
    });
  } else {
    startMenu.style.display = 'none';
  }
}

document.addEventListener('mousedown', function (e) {
  if (startMenu && startMenu.style.display === 'block' && !startMenu.contains(e.target) && e.target !== startButton && !startButton.contains(e.target)) {
    closeStartMenuAnimated();
  }
});
document.addEventListener('contextmenu', function (e) {
  // Only block context menu on the taskbar in app launcher mode
  if (
    document.body.classList.contains('app-launcher-mode') &&
    e.target.closest('.taskbar') &&
    !e.target.closest('.taskbar-app-icon')
  ) {
    e.preventDefault();
    const contextMenu = document.getElementById('context-menu');
    if (contextMenu) contextMenu.classList.add('hidden');
    return;
  }
  if (startMenu && startMenu.style.display === 'block' && !startMenu.contains(e.target) && e.target !== startButton && !startButton.contains(e.target)) {
    closeStartMenuAnimated();
  }
});


// At the top of the file or before renderPinnedTaskbarIcons:
window._animatedTaskbarWindows = window._animatedTaskbarWindows || new Set();


// --- GLOBAL STATE (move to top of file) ---
let openWindows = {};
let activeWindow = null;
let windowZIndex = 100;
let windowIdCounter = 0;
let currentContextMenuTarget = null;
let selectedDesktopIcons = new Set();
let isDraggingSelector = false;
let dragSelectorStartX, dragSelectorStartY;
let isDraggingFileSelector = false;
let fileSelectorStartX, fileSelectorStartY;
let fileExplorerContentArea = null;
let currentSelectedFileItems = new Set();
let startMenu = null;
let startButton = null;

// --- START MENU LOGIC (top-level for widgets) ---
// Define the app list before any function that uses it
const startMenuApps = [
  { id: 'my-files', name: 'My Files', iconClass: 'fa-folder', iconBgClass: 'pink-icon', category: 'SYSTEM APPS' },
  { id: 'this-pc', name: 'This PC', iconClass: 'fa-desktop', iconBgClass: 'pink-icon', category: 'SYSTEM APPS' },
  { id: 'web-files', name: 'Web Files', iconClass: 'fa-folder-open', iconBgClass: 'green-icon', category: 'SYSTEM APPS' },
  { id: 'trash-sm', name: 'Trash', iconClass: 'fa-trash', iconBgClass: 'purple-icon', category: 'SYSTEM APPS' },
  { id: 'settings-sm', name: 'Settings', iconClass: 'fa-cog', iconBgClass: 'blue-icon', category: 'SYSTEM APPS' },
  { id: 'site-builder-sm', name: 'Site Builder', iconClass: 'fa-globe', iconBgClass: 'pink-icon', category: 'CUSTOMISE' },
  { id: 'app-store-sm', name: 'AppStore', iconClass: 'fa-store', iconBgClass: 'green-icon', category: 'CUSTOMISE' },
  { id: 'social-master', name: 'Social Master', iconClass: 'fa-users', iconBgClass: 'purple-icon', category: 'CUSTOMISE' },
  { id: 'personalize', name: 'Personalize', iconClass: 'fa-cog', iconBgClass: 'pink-icon', category: 'CUSTOMISE' },
  { id: 'word-doc', name: 'Word doc', iconClass: 'fa-file-word', iconBgClass: 'pink-icon', category: 'DOCS' },
  { id: 'excel-numbers', name: 'Excel Numbers', iconClass: 'fa-file-excel', iconBgClass: 'green-icon', category: 'DOCS' },
  { id: 'notepad', name: 'Notepad', iconClass: 'fa-sticky-note', iconBgClass: 'purple-icon', category: 'DOCS' },
  { id: 'wordpad', name: 'Wordpad', iconClass: 'fa-file-alt', iconBgClass: 'pink-icon', category: 'DOCS' },
  { id: 'calculator-sm', name: 'Calculator', iconClass: 'fa-calculator', iconBgClass: 'gray-icon', category: 'PRODUCTIVITY' },
  { id: 'photoshop-sm', name: 'Photoshop', iconClass: 'fa-palette', iconBgClass: 'blue-icon', category: 'PRODUCTIVITY' },
  { id: 'calendar-app', name: 'Calendar', iconClass: 'fa-calendar-alt', iconBgClass: 'purple-icon', category: 'PRODUCTIVITY' },
  { id: 'notes', name: 'Notes', iconClass: 'far fa-clipboard', iconBgClass: 'pink-icon', category: 'PRODUCTIVITY' },
  { id: 'app-launcher', name: 'App launcher', iconClass: 'fa-th', iconBgClass: 'teal-icon', category: 'SYSTEM APPS' },
  { id: 'wallet', name: 'Wallet', iconClass: 'fa-wallet', iconBgClass: 'pink-icon', category: 'SYSTEM APPS' },
  { id: 'email-app', name: 'Email', iconClass: 'fa-envelope', iconBgClass: 'orange-icon', category: 'SYSTEM APPS' },
  { id: 'contact-app', name: 'Contacts', iconClass: 'fa-address-book', iconBgClass: 'blue-icon', category: 'SYSTEM APPS' },
  { id: 'products-manager', name: 'Products', iconClass: 'fa-box', iconBgClass: 'purple-icon', category: 'SYSTEM APPS' },
  { id: 'orders-manager', name: 'Orders', iconClass: 'fa-shopping-cart', iconBgClass: 'teal-icon', category: 'SYSTEM APPS' },
  { id: 'point-of-sale-app', name: 'POS', iconClass: 'fa-shopping-cart', iconBgClass: 'teal-icon', category: 'SYSTEM APPS' }
];

let startMenuAppSortMode = 'category'; // 'category' or 'alphabet'



// --- DYNAMIC DESKTOP ICON GENERATION ---
// List of app IDs to show on desktop by default
const defaultDesktopAppIds = [
  'my-files', 'trash-sm', 'app-store-sm', 'settings-sm', 'site-builder-sm', 'wallet', 'photoshop-sm'
];

function generateDesktopIcons() {
  const desktopIconsContainer = document.querySelector('.desktop-icons');
  if (!desktopIconsContainer) return;
  desktopIconsContainer.innerHTML = '';
  if (typeof startMenuApps !== 'undefined') {
    startMenuApps.forEach((app, index) => {
      if (!defaultDesktopAppIds.includes(app.id)) return;
      const icon = document.createElement('div');
      icon.className = 'desktop-icon';
      icon.setAttribute('data-app', app.id);
      icon.setAttribute('tabindex', '0');
      icon.setAttribute('role', 'button');
      icon.setAttribute('aria-label', app.name);
      icon.innerHTML = `
        <div class="icon-container ${app.iconBgClass}"><i class="fas ${app.iconClass}"></i></div>
        <span>${app.name}</span>
      `;
      
      // Add initial load animation with staggered timing
      icon.style.opacity = '0';
      icon.style.transform = 'translateY(20px)';
      icon.style.transition = 'opacity 0.4s ease, transform 0.4s ease';
      
      desktopIconsContainer.appendChild(icon);
      
      // Stagger the animation for each icon
      setTimeout(() => {
        icon.style.opacity = '1';
        icon.style.transform = 'translateY(0)';
      }, 0); // Start after main animations + stagger
      
      if (typeof setupDesktopIcon === 'function') setupDesktopIcon(icon);
    });
  }
}

document.addEventListener('DOMContentLoaded', function () {
  generateDesktopIcons();


  // DOM Elements
  startButton = document.getElementById('start-button');
  startMenu = document.getElementById('start-menu');
  const windowsContainer = document.getElementById('windows-container');
  const currentTimeEl = document.getElementById('current-time');

  const startMenuLeftPanel = document.querySelector('.start-menu-left-panel');
  const startMenuSearchTop = document.getElementById('start-menu-search-top');
  const startMenuSearchBottom = document.getElementById('start-menu-search-bottom');
  const contextMenu = document.getElementById('context-menu');
  const dragSelector = document.getElementById('drag-selector');
  const desktopArea = document.getElementById('desktop-area');
  const desktopIconsContainer = document.querySelector('.desktop-icons');


  // Custom context menu for app-grid-item (start menu/app launcher)
  if (startMenuLeftPanel) {
    startMenuLeftPanel.addEventListener('contextmenu', function (e) {
      if (e.target.closest('.app-grid-item')) {
        currentContextMenuTarget = e.target.closest('.app-grid-item');
        const appName = currentContextMenuTarget.getAttribute('data-app-name') || currentContextMenuTarget.getAttribute('data-app-id');
        const appTitle = currentContextMenuTarget.getAttribute('data-app-title') || currentContextMenuTarget.querySelector('span')?.textContent || appName;
        const details = getAppIconDetails(appName);

        // Determine if system app
        let isSystemApp = false;
        if (typeof startMenuApps !== 'undefined') {
          const appObj = startMenuApps.find(a =>
            a.id === appName ||
            a.name === appName ||
            (a.name && a.name.toLowerCase().replace(/\s+/g, '-') === appName)
          );
          if (appObj && appObj.category && appObj.category.toUpperCase().includes('SYSTEM')) isSystemApp = true;
        }

        const menuItems = [
          { label: 'Open', action: 'open-app', icon: details.iconClass },
          { label: 'Add to Desktop', action: 'add-to-desktop', icon: 'fa-desktop' },
          { label: isAppPinned(appName) ? 'Unpin from Taskbar' : 'Pin to Taskbar', action: isAppPinned(appName) ? 'unpin-taskbar' : 'pin-to-taskbar', icon: 'fa-thumbtack' },
          { type: 'separator' },
          isSystemApp
            ? { label: 'Uninstall App', action: 'uninstall-app', icon: 'fa-trash', disabled: true }
            : { label: 'Uninstall App', action: 'uninstall-app', icon: 'fa-trash' }
        ];
        populateContextMenu(menuItems, e.clientX, e.clientY);
        e.preventDefault();
        return;
      }
    });
  }

  const taskbarAppIconsContainer = document.getElementById('taskbar-app-icons');
  // ... other variables ...

  // --- PERSISTENT PINNED TASKBAR ICONS SYSTEM ---
  function getPinnedTaskbarApps() {
    try {
      return JSON.parse(localStorage.getItem('pinnedTaskbarApps') || '[]');
    } catch (e) { return []; }
  }
  function setPinnedTaskbarApps(list) {
    localStorage.setItem('pinnedTaskbarApps', JSON.stringify(list));
  }
  function isAppPinned(appName) {
    return getPinnedTaskbarApps().includes(appName);
  }
  function pinAppToTaskbar(appName) {
    const pins = getPinnedTaskbarApps();
    if (!pins.includes(appName)) {
      pins.push(appName);
      setPinnedTaskbarApps(pins);
      renderPinnedTaskbarIcons();
      // Animate in the new pinned icon
      const iconEl = document.querySelector('.taskbar-app-icon.pinned-only[data-app="' + appName + '"]');
      if (iconEl) animateTaskbarIconIn(iconEl);
    }
  }
  function unpinAppFromTaskbar(appName) {
    const iconEl = document.querySelector('.taskbar-app-icon.pinned-only[data-app="' + appName + '"]');
    if (iconEl) {
      animateTaskbarIconOut(iconEl, function () {
        const pins = getPinnedTaskbarApps().filter(a => a !== appName);
        setPinnedTaskbarApps(pins);
        renderPinnedTaskbarIcons();
      });
    } else {
      const pins = getPinnedTaskbarApps().filter(a => a !== appName);
      setPinnedTaskbarApps(pins);
      renderPinnedTaskbarIcons();
    }
  }
  function renderPinnedTaskbarIcons(prevUnpinnedIdsArg) {
    // --- PATCH: Collect IDs of currently open unpinned app icons before clearing ---
    let prevUnpinnedIds;
    if (prevUnpinnedIdsArg) {
      prevUnpinnedIds = prevUnpinnedIdsArg;
    } else {
      prevUnpinnedIds = new Set();
      Array.from(taskbarAppIconsContainer.querySelectorAll('.taskbar-app-icon.opened-app[data-window-id]')).forEach(el => {
        prevUnpinnedIds.add(el.getAttribute('data-window-id'));
      });
    }
    // --- PATCH: Collect IDs of currently open pinned app icons before clearing ---
    const prevPinnedIds = new Set();
    Array.from(taskbarAppIconsContainer.querySelectorAll('.taskbar-app-icon.pinned-only.opened-app[data-window-id]')).forEach(el => {
      prevPinnedIds.add(el.getAttribute('data-window-id'));
    });
    // Clear all icons and separators
    taskbarAppIconsContainer.innerHTML = '';
    const pins = getPinnedTaskbarApps();

    // Render all pinned icons (open or not), in pin order
    pins.forEach(appName => {
      const details = getAppIconDetails(appName);
      let appTitle = appName.charAt(0).toUpperCase() + appName.slice(1).replace(/-/g, ' ');
      const desktopIcon = document.querySelector(`.desktop-icon[data-app="${appName}"] span`);
      if (desktopIcon) appTitle = desktopIcon.textContent;
      // Check if app is open
      const openWin = Object.values(openWindows).find(w => w.name === appName && w.element);
      const iconEl = document.createElement('div');
      if (openWin && openWin.element) {
        iconEl.className = 'taskbar-app-icon pinned-only opened-app';
        iconEl.setAttribute('data-window-id', openWin.element.id);
        // Update openWindows to point to this icon
        if (openWindows[openWin.element.id]) {
          openWindows[openWin.element.id].taskbarIcon = iconEl;
        }
      } else {
        iconEl.className = 'taskbar-app-icon pinned-only';
      }
      // Always remove animation classes
      iconEl.classList.remove('anim-in', 'anim-out');
      iconEl.setAttribute('data-app', appName);
      iconEl.setAttribute('title', appTitle);
      
      // Check if we're in text mode
      const isTextMode = document.querySelector('.taskbar').classList.contains('taskbar-text-mode');
      
      if (isTextMode && window.innerWidth > 768) { // Only show text on desktop mode
        // For pinned apps, only show text if the app is open
        const isOpenApp = openWin && openWin.element;
        
        if (isOpenApp) {
          iconEl.innerHTML = `
            <div class="icon-container ${details.iconBgClass}">
              <i class="fas ${details.iconClass}"></i>
            </div>
            <span class="taskbar-app-text">${appTitle}</span>
          `;
        } else {
          // For closed pinned apps, don't show text
          iconEl.innerHTML = `<div class="icon-container ${details.iconBgClass}"><i class="fas ${details.iconClass}"></i></div>`;
        }
      } else {
        iconEl.innerHTML = `<div class="icon-container ${details.iconBgClass}"><i class="fas ${details.iconClass}"></i></div>`;
      }
      iconEl.addEventListener('click', function () {
        const currentOpenWin = Object.values(openWindows).find(w => w.name === appName && w.element);
        if (currentOpenWin && currentOpenWin.element) {
          if (currentOpenWin.element.classList.contains('minimized')) {
            toggleMinimizeWindow(currentOpenWin.element, iconEl);
          } else if (activeWindow === currentOpenWin.element) {
            toggleMinimizeWindow(currentOpenWin.element, iconEl);
          } else {
            makeWindowActive(currentOpenWin.element);
          }
        } else {
          openApp(appName, appTitle, details.iconClass, details.iconBgClass, this);
        }
      });
      taskbarAppIconsContainer.appendChild(iconEl);
      // Do NOT animate in for pinned icons
      // Never animate in/out here (old comment, now handled above)
    });

    // Add separator if there are open (unpinned) apps AND there is at least one pinned app
    const openUnpinned = Object.values(openWindows).filter(w => w.element && !isAppPinned(w.name));
    if (pins.length > 0 && openUnpinned.length > 0) {
      const separator = document.createElement('div');
      separator.className = 'taskbar-separator';
      taskbarAppIconsContainer.appendChild(separator);
    }

    // Render open (unpinned) app icons
    openUnpinned.forEach(winObj => {
      if (!winObj.element) return;
      const appName = winObj.name;
      const details = getAppIconDetails(appName);
      let iconClass = winObj.iconClass || details.iconClass || 'fa-window-maximize';
      let iconBgClass = winObj.iconBgClass || details.iconBgClass || 'gray-icon';
      // Try to get the icon background class from the desktop icon
      const desktopIcon = document.querySelector(`.desktop-icon[data-app="${appName}"] .icon-container`);
      if (desktopIcon) {
        const bgClass = Array.from(desktopIcon.classList).find(cls => cls.endsWith('-icon'));
        if (bgClass) iconBgClass = bgClass;
      }
      const appTitle = winObj.appTitle || appName.charAt(0).toUpperCase() + appName.slice(1).replace(/-/g, ' ');
      const iconEl = document.createElement('div');
      iconEl.className = 'taskbar-app-icon opened-app';
      iconEl.setAttribute('data-window-id', winObj.element.id);
      iconEl.setAttribute('data-app-name', appName);
      iconEl.setAttribute('title', appTitle);
      
      // Check if we're in text mode
      const isTextMode = document.querySelector('.taskbar').classList.contains('taskbar-text-mode');
      
      if (isTextMode && window.innerWidth > 768) { // Only show text on desktop mode
        iconEl.innerHTML = `
          <div class="icon-container ${iconBgClass}">
            <i class="fas ${iconClass}"></i>
          </div>
          <span class="taskbar-app-text">${appTitle}</span>
        `;
      } else {
        iconEl.innerHTML = `<div class="icon-container ${iconBgClass}"><i class="fas ${iconClass}"></i></div>`;
      }
      iconEl.addEventListener('click', function () {
        const windowToFocus = winObj.element;
        if (windowToFocus) {
          if (windowToFocus.classList.contains('minimized')) {
            toggleMinimizeWindow(windowToFocus, iconEl);
          } else if (activeWindow === windowToFocus) {
            toggleMinimizeWindow(windowToFocus, iconEl);
          } else {
            makeWindowActive(windowToFocus);
          }
        }
      });
      // Update openWindows to point to this icon
      if (openWindows[winObj.element.id]) {
        openWindows[winObj.element.id].taskbarIcon = iconEl;
      }
      taskbarAppIconsContainer.appendChild(iconEl);
      // Animate in if this is a new unpinned icon
      if (!prevUnpinnedIds.has(winObj.element.id)) {
        void iconEl.offsetWidth; // Force reflow before adding animation class
        animateTaskbarIconIn(iconEl);
      }
    });

    // After rendering, update the active state
    updateTaskbarActiveState();
  }
  window.renderPinnedTaskbarIcons = renderPinnedTaskbarIcons;
  // On load, render pinned icons
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', renderPinnedTaskbarIcons);
  } else {
    renderPinnedTaskbarIcons();
  }



  // Templates
  const fileExplorerTemplate = document.getElementById('file-explorer-template');

  // State
  const GRID_CELL_WIDTH = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--grid-cell-width'));
  const GRID_CELL_HEIGHT = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--grid-cell-height'));
  const GRID_GAP = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--grid-gap'));
  let iconZoomLevel = parseFloat(localStorage.getItem('iconZoomLevel')) || 1.0;


  let draggedIcon = null;
  let isActuallyDraggingIcon = false;
  let dragStartMouseX, dragStartMouseY;
  let dragOffsetX, dragOffsetY;
  const DRAG_THRESHOLD = 5;
  let originalIconTransition = ''; // Variable to store original transition
  const MOBILE_BREAKPOINT = 1023; // Max width for tablet/mobile behavior



  function setupDesktopIcon(icon) {
    // Function to handle app opening
    const openAppFromIcon = function (e) {
      e.stopPropagation();
      e.preventDefault();
      const appName = this.getAttribute('data-app');
      const appTitleElement = this.querySelector('span');
      const appTitle = appTitleElement ? appTitleElement.textContent : 'Unknown App';
      const iconElement = this.querySelector('i');
      const iconContainer = this.querySelector('.icon-container');
      const iconClass = iconElement ? iconElement.className.split(' ').find(cls => cls.startsWith('fa-')) : 'fa-question-circle';
      const iconBgClass = iconContainer ? iconContainer.className.split(' ').find(cls => cls.endsWith('-icon')) : 'gray-icon';
      if (!appName) return;
      openApp(appName, appTitle, iconClass, iconBgClass, this);
    };

    // Desktop: Double click to open
    icon.addEventListener('dblclick', function (e) {
      if (window.innerWidth > MOBILE_BREAKPOINT) {
        openAppFromIcon.call(this, e);
      }
    });

    // Mobile: Single tap to open
    icon.addEventListener('click', function (e) {
      if (window.innerWidth <= MOBILE_BREAKPOINT) {
        openAppFromIcon.call(this, e);
      }
    });

    icon.addEventListener('mousedown', function (e) {
      if (e.button !== 0) return;
      if (!this.classList.contains('selected')) {
        clearIconSelection();
        this.classList.add('selected');
        selectedDesktopIcons.add(this);
      }
      draggedIcon = this;
      isActuallyDraggingIcon = false;
      dragStartMouseX = e.clientX;
      dragStartMouseY = e.clientY;
      dragOffsetX = e.clientX - draggedIcon.getBoundingClientRect().left;
      dragOffsetY = e.clientY - draggedIcon.getBoundingClientRect().top;
      // Store original position for single drag
      iconOriginalLeft = draggedIcon.style.left;
      iconOriginalTop = draggedIcon.style.top;
      // --- Multi-drag: store initial positions of all selected icons ---
      if (selectedDesktopIcons.size > 1) {
        multiDragInitialPositions = Array.from(selectedDesktopIcons).map(icon => {
          const rect = icon.getBoundingClientRect();
          const parentRect = icon.parentElement.getBoundingClientRect();
          return {
            icon,
            left: rect.left - parentRect.left + icon.parentElement.scrollLeft,
            top: rect.top - parentRect.top + icon.parentElement.scrollTop
          };
        });
        multiDragStartMouseX = e.clientX;
        multiDragStartMouseY = e.clientY;
        // Store original positions for multi-drag
        multiDragOriginalPositions = Array.from(selectedDesktopIcons).map(icon => ({
          icon,
          left: icon.style.left,
          top: icon.style.top
        }));
      } else {
        multiDragInitialPositions = null;
        multiDragOriginalPositions = null;
      }
      document.addEventListener('mousemove', globalOnIconMouseMove);
      document.addEventListener('mouseup', globalOnIconMouseUp);
    });

    // Add keyboard accessibility
    icon.addEventListener('keydown', function (e) {
      const icons = Array.from(document.querySelectorAll('.desktop-icon'));
      const currentIndex = icons.indexOf(this);
      let handled = false;
      // Arrow navigation
      if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown"].includes(e.key)) {
        let nextIndex = currentIndex;
        const container = this.parentElement;
        const iconRect = this.getBoundingClientRect();
        const iconHeight = this.offsetHeight;
        const iconWidth = this.offsetWidth;
        // Calculate grid positions
        const positions = icons.map(ic => ic.getBoundingClientRect());
        if (e.key === "ArrowLeft") {
          // Find icon to the left (same row, closest left)
          let minDx = Infinity, target = null;
          positions.forEach((rect, i) => {
            if (i !== currentIndex && Math.abs(rect.top - iconRect.top) < iconHeight / 2 && rect.left < iconRect.left) {
              const dx = iconRect.left - rect.left;
              if (dx < minDx) { minDx = dx; target = i; }
            }
          });
          if (target !== null) nextIndex = target;
        } else if (e.key === "ArrowRight") {
          let minDx = Infinity, target = null;
          positions.forEach((rect, i) => {
            if (i !== currentIndex && Math.abs(rect.top - iconRect.top) < iconHeight / 2 && rect.left > iconRect.left) {
              const dx = rect.left - iconRect.left;
              if (dx < minDx) { minDx = dx; target = i; }
            }
          });
          if (target !== null) nextIndex = target;
        } else if (e.key === "ArrowUp") {
          let minDy = Infinity, target = null;
          positions.forEach((rect, i) => {
            if (i !== currentIndex && Math.abs(rect.left - iconRect.left) < iconWidth / 2 && rect.top < iconRect.top) {
              const dy = iconRect.top - rect.top;
              if (dy < minDy) { minDy = dy; target = i; }
            }
          });
          if (target !== null) nextIndex = target;
        } else if (e.key === "ArrowDown") {
          let minDy = Infinity, target = null;
          positions.forEach((rect, i) => {
            if (i !== currentIndex && Math.abs(rect.left - iconRect.left) < iconWidth / 2 && rect.top > iconRect.top) {
              const dy = rect.top - iconRect.top;
              if (dy < minDy) { minDy = dy; target = i; }
            }
          });
          if (target !== null) nextIndex = target;
        }
        if (nextIndex !== currentIndex) {
          icons[nextIndex].focus();
          handled = true;
        }
      }
      // Enter/Space: open app
      if ((e.key === 'Enter' || e.key === ' ') && !handled) {
        if (window.innerWidth > MOBILE_BREAKPOINT) {
          // Simulate double click
          this.dispatchEvent(new MouseEvent('dblclick', { bubbles: true }));
        } else {
          this.dispatchEvent(new MouseEvent('click', { bubbles: true }));
        }
        handled = true;
      }
      // Delete: remove from desktop
      if (e.key === 'Delete') {
        // Remove icon from DOM and update order
        const parent = this.parentElement;
        if (parent) {
          parent.removeChild(this);
          if (typeof saveCurrentDesktopIconOrder === 'function') saveCurrentDesktopIconOrder();
          if (window.innerWidth > 1023 && typeof saveDesktopIconPositions === 'function') saveDesktopIconPositions();
          if (typeof showShortTopNotification === 'function') showShortTopNotification('Removed from Desktop');
        }
        handled = true;
      }
      // Context menu key or Shift+F10
      if (e.key === 'ContextMenu' || (e.shiftKey && e.key === 'F10')) {
        // Open context menu at icon position
        const rect = this.getBoundingClientRect();
        if (typeof window.populateContextMenu === 'function') {
          currentContextMenuTarget = this;
          const menuItems = [
            { label: 'Open', action: 'open-app', icon: 'fa-folder-open' },
            { label: 'Pin To Taskbar', action: 'pin-to-taskbar', icon: 'fa-thumbtack' },
            { type: 'separator' },
            { label: 'Remove from Desktop', action: 'remove-from-desktop', icon: 'fa-trash' }
          ];
          window.populateContextMenu(menuItems, rect.left + rect.width / 2, rect.top + rect.height / 2);
        }
        handled = true;
      }
      if (handled) {
        e.preventDefault();
        e.stopPropagation();
      }
    });
  }


  function clearIconSelection() {
    if (selectedDesktopIcons) {
      selectedDesktopIcons.forEach(icon => icon.classList.remove('selected'));
      selectedDesktopIcons.clear();
    }
  }

  function isIntersecting(rect1, rect2) {
    return !(
      rect1.right < rect2.left ||
      rect1.left > rect2.right ||
      rect1.bottom < rect2.top ||
      rect1.top > rect2.bottom
    );
  }

  function updateSelectedIcons() {
    if (!dragSelector || !desktopArea) return;
    const selectorRect = dragSelector.getBoundingClientRect();
    document.querySelectorAll('.desktop-icon').forEach(icon => {
      const iconRect = icon.getBoundingClientRect();
      if (isIntersecting(selectorRect, iconRect)) {
        icon.classList.add('selected');
        selectedDesktopIcons.add(icon);
      } else {
        icon.classList.remove('selected');
        selectedDesktopIcons.delete(icon);
      }
    });
  }

  function updateSelectedFileItems(contentArea, selectorEl, itemsToSelect, selectedSet) {
    if (!selectorEl || !contentArea || !itemsToSelect || !selectedSet) {
      return;
    }
    const selectorRect = selectorEl.getBoundingClientRect();
    itemsToSelect.forEach(item => {
      const itemRect = item.getBoundingClientRect();
      if (isIntersecting(selectorRect, itemRect)) {
        item.classList.add('selected');
        selectedSet.add(item);
      } else {
        item.classList.remove('selected');
        selectedSet.delete(item);
      }
    });
  }

  function initializeDesktopIconPositions() {
    if (window.innerWidth <= 1023) {
      document.querySelectorAll('.desktop-icon').forEach(icon => {
        icon.style.position = '';
        icon.style.left = '';
        icon.style.top = '';
      });
      return;
    }
    const icons = document.querySelectorAll('.desktop-icon');
    if (!icons || icons.length === 0) {
      console.warn('[GridInit] No desktopIcons found to initialize. Return early.');
      return;
    }
    // Get desktop area and taskbar height
    const desktopArea = document.getElementById('desktop-area');
    const taskbar = document.querySelector('.taskbar');
    const desktopRect = desktopArea.getBoundingClientRect();
    const taskbarHeight = taskbar ? taskbar.offsetHeight : 0;
    const availableHeight = window.innerHeight - taskbarHeight - 50; // 30px bottom margin
    const leftOffset = GRID_GAP; // px from the left
    const topOffset = GRID_GAP; // px from the top
    const verticalGap = GRID_GAP; // Use default grid gap
    const iconHeight = GRID_CELL_HEIGHT;
    const maxRows = Math.max(1, Math.floor((availableHeight - topOffset) / (iconHeight + verticalGap)));
    const colWidth = GRID_CELL_WIDTH + GRID_GAP;
    icons.forEach((icon, index) => {
      const col = Math.floor(index / maxRows);
      const row = index % maxRows;
      const iconLeft = leftOffset + col * colWidth;
      const iconTop = topOffset + row * (iconHeight + verticalGap);
      icon.style.position = 'absolute';
      icon.style.left = iconLeft + 'px';
      icon.style.top = iconTop + 'px';
      icon.dataset.homeLeft = String(iconLeft);
      icon.dataset.homeTop = String(iconTop);
    });
  }




  // --- Desktop Icon Order Persistence ---
  function getDesktopIconOrder() {
    try {
      return JSON.parse(localStorage.getItem('desktopIconOrder') || '[]');
    } catch (e) { return []; }
  }
  function setDesktopIconOrder(order) {
    localStorage.setItem('desktopIconOrder', JSON.stringify(order));
  }

  function getOrderedDesktopIcons() {
    const order = getDesktopIconOrder();
    const icons = Array.from(document.querySelectorAll('.desktop-icon'));
    if (!order.length) return icons;
    // Sort icons by order, then by DOM order for new icons
    return icons.slice().sort((a, b) => {
      const aApp = a.getAttribute('data-app');
      const bApp = b.getAttribute('data-app');
      const aIdx = order.indexOf(aApp);
      const bIdx = order.indexOf(bApp);
      if (aIdx === -1 && bIdx === -1) return 0;
      if (aIdx === -1) return 1;
      if (bIdx === -1) return -1;
      return aIdx - bIdx;
    });
  }

  function saveCurrentDesktopIconOrder() {
    const icons = Array.from(document.querySelectorAll('.desktop-icon'));
    const order = icons.map(icon => icon.getAttribute('data-app'));
    setDesktopIconOrder(order);
  }



  //Switch desktop and app launcher mode functions

  function switchToAppLauncherMode() {
    if (document.getElementById('app-launcher-desktop')) return;
    const desktopArea = document.getElementById('desktop-area');
    const desktopIconsContainer = document.querySelector('.desktop-icons');
    const taskbar = document.querySelector('.taskbar');
    const widgetsScreen = document.getElementById('widgets-screen');
    const widgetsToggleBtn = document.getElementById('widgets-toggle-btn');
    const appLauncherBtn = document.getElementById('app-launcher-btn');
    // --- FIX: Do NOT hide buttons before animation ---
    // let animCount = 0, animDone = 0;
    let animCount = 0, animDone = 0;
    function onAnimEnd() { animDone++; if (animDone >= animCount) finishSwitch(); }
    // Animate desktop icons
    if (desktopIconsContainer && desktopIconsContainer.style.display !== 'none') {
      animCount++;
      desktopIconsContainer.classList.add('anim-slide-left');
      desktopIconsContainer.addEventListener('animationend', function handler() {
        desktopIconsContainer.removeEventListener('animationend', handler);
        desktopIconsContainer.classList.remove('anim-slide-left');
        desktopIconsContainer.style.display = 'none';
        desktopIconsContainer.style.pointerEvents = 'none';
        onAnimEnd();
      });
    }
    // Animate widgets ONLY if not already hidden
    if (
      widgetsScreen &&
      widgetsScreen.style.display !== 'none' &&
      !widgetsScreen.classList.contains('widgets-hidden')
    ) {
      animCount++;
      widgetsScreen.classList.add('anim-slide-right');
      widgetsScreen.addEventListener('animationend', function handler() {
        widgetsScreen.removeEventListener('animationend', handler);
        widgetsScreen.classList.remove('anim-slide-right');
        widgetsScreen.style.display = 'none';
        onAnimEnd();
      });
    }
    // Animate taskbar
    if (taskbar && taskbar.style.display !== 'none') {
      animCount++;
      taskbar.classList.add('anim-slide-down');
      taskbar.addEventListener('animationend', function handler() {
        taskbar.removeEventListener('animationend', handler);
        taskbar.classList.remove('anim-slide-down');
        taskbar.style.display = 'none';
        onAnimEnd();
      });
    }
    // --- FIX: Do NOT hide widgetsToggleBtn before animation ---
    // if (widgetsToggleBtn) widgetsToggleBtn.style.display = 'none';
    if (animCount === 0) finishSwitch();

    function finishSwitch() {
      // --- Ensure easy mode is OFF when entering app launcher mode ---
      window._easyMode = false;
      document.body.classList.remove('easy-mode');
      const desktopArea = document.getElementById('desktop-area');
      if (desktopArea) desktopArea.classList.remove('easy-mode');

      const desktopIconsContainer = document.querySelector('.desktop-icons');
      const taskbar = document.querySelector('.taskbar');
      const widgetsScreen = document.getElementById('widgets-screen');
      const widgetsToggleBtn = document.getElementById('widgets-toggle-btn');
      // Hide app-launcher-btn in app-launcher-taskbar-right
      const appLauncherBtn = document.getElementById('app-launcher-btn');
      if (appLauncherBtn) appLauncherBtn.style.display = 'none';
      if (widgetsToggleBtn) widgetsToggleBtn.style.display = 'none';
      // Hide entire desktop icons container and disable pointer events
      if (desktopIconsContainer) {
        desktopIconsContainer.style.display = 'none';
        desktopIconsContainer.style.pointerEvents = 'none';
      }
      
      // Save current taskbar style classes before hiding the taskbar
      if (taskbar) {
        // Save current classes to restore them later
        window._previousTaskbarClasses = {
          hasTextMode: taskbar.classList.contains('taskbar-text-mode'),
          hasWindows11Style: taskbar.classList.contains('taskbar-windows11-style')
        };
        
        // Remove style classes before hiding
        taskbar.classList.remove('taskbar-text-mode');
        taskbar.classList.remove('taskbar-windows11-style');
        taskbar.style.display = 'none';
      }
      
      // Hide widgets and toggle
      if (widgetsScreen) widgetsScreen.style.display = 'none';
      if (widgetsToggleBtn) widgetsToggleBtn.style.display = 'none';
      // Remove any previous app-launcher-desktop if present
      let launcherDesktop = document.getElementById('app-launcher-desktop');
      if (launcherDesktop) launcherDesktop.remove();
      // Remove App Launcher overlay if present
      const appLauncherOverlay = document.getElementById('app-launcher-overlay');
      if (appLauncherOverlay && appLauncherOverlay.parentNode) appLauncherOverlay.parentNode.removeChild(appLauncherOverlay);
      // Remove App Launcher desktop icon if present
      const appLauncherIcon = document.querySelector('.desktop-icon[data-app="app-launcher"]');
      if (appLauncherIcon && appLauncherIcon.parentNode) {
        window._appLauncherIconWasPresent = true;
        appLauncherIcon.parentNode.removeChild(appLauncherIcon);
      } else {
        window._appLauncherIconWasPresent = false;
      }
      // Create the app launcher desktop container
      launcherDesktop = document.createElement('div');
      launcherDesktop.id = 'app-launcher-desktop';
      launcherDesktop.style.position = 'absolute';
      launcherDesktop.style.top = '0';
      launcherDesktop.style.left = '0';
      launcherDesktop.style.width = '100%';
      launcherDesktop.style.height = '100%';
      launcherDesktop.style.display = 'flex';
      launcherDesktop.style.flexDirection = 'column';

      // --- Top Bar ---
      const topBar = createAppLauncherTopBar();
      launcherDesktop.appendChild(topBar);

      // --- App Grid ---
      const grid = document.createElement('div');
      grid.className = 'app-launcher-grid';
      grid.style.display = 'grid';
      grid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(90px, 1fr))';
      grid.style.gap = '32px';
      grid.style.width = 'min(90vw, 900px)';
      grid.style.maxWidth = '100vw';
      grid.style.margin = 'auto';
      grid.style.justifyItems = 'center';
      grid.style.alignItems = 'start';
      grid.style.padding = '0 0 90px 0';
      grid.style.flex = '1 1 0';
      grid.style.alignItems = 'center';
      grid.style.justifyContent = 'center';
      grid.style.alignContent = 'center';
      // Only use startMenuApps to populate the grid
      if (startMenuApps) {
        startMenuApps.forEach(app => {
          const appItem = document.createElement('div');
          appItem.className = 'app-launcher-app';
          appItem.style.display = 'flex';
          appItem.style.flexDirection = 'column';
          appItem.style.alignItems = 'center';
          appItem.style.justifyContent = 'center';
          appItem.style.minHeight = '120px';
          appItem.style.cursor = 'pointer';
          appItem.style.userSelect = 'none';
          appItem.tabIndex = 0;
          appItem.setAttribute('data-app', app.id);
          appItem.innerHTML = `<div class="icon-container ${app.iconBgClass}" style="width:64px;height:64px;border-radius:16px;display:flex;align-items:center;justify-content:center;font-size:28px;box-shadow:0 4px 16px rgba(0,0,0,0.18);margin-bottom:10px;"><i class="fas ${app.iconClass}"></i></div><span style="font-size:14px;color:#fff;margin-top:5px;text-shadow:0 1px 4px #222;text-align:center;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;">${app.name}</span>`;
          // Attach click event to the entire appItem
          appItem.addEventListener('click', function (e) {
            openApp(app.id, app.name, app.iconClass, app.iconBgClass, appItem);
          });
          grid.appendChild(appItem);
        });
      }
      launcherDesktop.appendChild(grid);
      // Add to desktop area
      if (desktopArea) desktopArea.appendChild(launcherDesktop);
      // Add a class to desktopArea for mode
      if (desktopArea) desktopArea.classList.add('app-launcher-mode');
      // Add a class to body for mode
      document.body.classList.add('app-launcher-mode');
      // Attach desktop context menu to app-launcher-desktop
      if (launcherDesktop) {
        launcherDesktop.addEventListener('contextmenu', function (e) {
          // Allow context menu for input, textarea, contenteditable, or selected text
          const sel = window.getSelection();
          if (
            e.target.tagName === 'INPUT' ||
            e.target.tagName === 'TEXTAREA' ||
            e.target.isContentEditable ||
            (sel && sel.rangeCount > 0 && !sel.getRangeAt(0).collapsed && sel.toString().trim().length > 0)
          ) return;
          e.preventDefault();
          return false;
        });
      }

      // Show and animate in the taskbar for app launcher mode
      if (taskbar) {
        taskbar.style.display = '';
        taskbar.classList.add('anim-slide-up');
        taskbar.addEventListener('animationend', function handler() {
          taskbar.removeEventListener('animationend', handler);
          taskbar.classList.remove('anim-slide-up');
        });
      }

      // --- Animate in top bar and grid ---
      // Animate in the top bar
      topBar.classList.add('anim-slide-down');
      topBar.addEventListener('animationend', function handler() {
        topBar.removeEventListener('animationend', handler);
        topBar.classList.remove('anim-slide-down');
      });
      // Animate in the app grid
      grid.classList.add('anim-zoom-in');
      grid.addEventListener('animationend', function handler() {
        grid.removeEventListener('animationend', handler);
        grid.classList.remove('anim-zoom-in');
      });
      // Ensure taskbar position is correct for app launcher mode
      updateAppLauncherTaskbarPosition();
      // --- FIX: Re-attach volume panel listeners after mode switch ---
      if (typeof setupVolumePanelListeners === 'function') setupVolumePanelListeners();
      if (typeof attachVolumeBtnHandler === 'function') attachVolumeBtnHandler();
    }
  }
  function switchToDesktopMode() {
    const desktopArea = document.getElementById('desktop-area');
    const desktopIconsContainer = document.querySelector('.desktop-icons');
    const taskbar = document.querySelector('.taskbar');
    const widgetsScreen = document.getElementById('widgets-screen');
    const widgetsToggleBtn = document.getElementById('widgets-toggle-btn');
    const appLauncherBtn = document.getElementById('app-launcher-btn');
    const launcherDesktop = document.getElementById('app-launcher-desktop');
    let animCount = 0, animDone = 0;

    function onAnimEnd() {
      animDone++;
      if (animDone >= animCount) finishRestore();
    }

    // Animate out App Launcher UI if present
    if (launcherDesktop) {
      const grid = launcherDesktop.querySelector('.app-launcher-grid');
      if (grid && grid.offsetParent !== null) {
        animCount++;
        grid.classList.add('anim-zoom-out');
        grid.addEventListener('animationend', function handler() {
          grid.removeEventListener('animationend', handler);
          grid.classList.remove('anim-zoom-out');
          grid.style.display = 'none';
          onAnimEnd();
        });
      }
      const topBar = launcherDesktop.querySelector('.app-launcher-top-bar');
      if (topBar && topBar.offsetParent !== null) {
        animCount++;
        topBar.classList.add('anim-slide-up');
        topBar.addEventListener('animationend', function handler() {
          topBar.removeEventListener('animationend', handler);
          topBar.classList.remove('anim-slide-up');
          topBar.style.display = 'none';
          onAnimEnd();
        });
      }
    }

    // ADD THIS:
    const launcherTaskbar = launcherDesktop.querySelector('.taskbar');
    if (taskbar && taskbar.style.display !== 'none') {
      animCount++;
      taskbar.classList.add('anim-slide-down');
      taskbar.addEventListener('animationend', function handler() {
        taskbar.removeEventListener('animationend', handler);
        taskbar.classList.remove('anim-slide-down');
        taskbar.style.display = 'none';
        onAnimEnd();
      });
    }

    if (animCount === 0) finishRestore();

    function finishRestore() {
      // Remove App Launcher DOM
      const launcherDesktop = document.getElementById('app-launcher-desktop');
      if (launcherDesktop) launcherDesktop.remove();


      // Remove all wrappers
      document.querySelectorAll('.app-launcher-taskbar-right, .app-launcher-taskbar-right .taskbar-right').forEach(el => el.remove());
      // Re-render the right icons
      const taskbarRight = document.querySelector('.taskbar-right');
      if (taskbarRight && typeof renderPinnedTaskbarIcons === 'function') {
        renderPinnedTaskbarIcons();
      }

      // Restore desktop icons container and pointer events
      if (desktopIconsContainer) {
        desktopIconsContainer.style.display = '';
        desktopIconsContainer.style.pointerEvents = '';
        desktopIconsContainer.classList.add('anim-slide-right');
        desktopIconsContainer.addEventListener('animationend', function handler() {
          desktopIconsContainer.removeEventListener('animationend', handler);
          desktopIconsContainer.classList.remove('anim-slide-right');
        });
      }

      // Restore taskbar
      if (taskbar) {
        // First, restore the previous taskbar style classes if they were saved
        if (window._previousTaskbarClasses) {
          if (window._previousTaskbarClasses.hasTextMode) {
            taskbar.classList.add('taskbar-text-mode');
          }
          if (window._previousTaskbarClasses.hasWindows11Style) {
            taskbar.classList.add('taskbar-windows11-style');
          }
          // Clear the saved classes
          window._previousTaskbarClasses = null;
        } else {
          // Fallback: Re-apply the saved taskbar style from localStorage
          const savedTaskbarStyle = localStorage.getItem('taskbarStyle');
          if (savedTaskbarStyle && typeof applyTaskbarStyle === 'function') {
            applyTaskbarStyle();
          }
        }
        
        taskbar.style.display = '';
        taskbar.classList.add('anim-slide-up');
        taskbar.addEventListener('animationend', function handler() {
          taskbar.removeEventListener('animationend', handler);
          taskbar.classList.remove('anim-slide-up');
        });
      }



      // Restore widgets and toggle
      if (widgetsScreen) {
        widgetsScreen.style.display = '';
        if (!widgetsScreen.classList.contains('widgets-hidden')) {
          widgetsScreen.classList.add('anim-slide-in-right');
          widgetsScreen.addEventListener('animationend', function handler() {
            widgetsScreen.removeEventListener('animationend', handler);
            widgetsScreen.classList.remove('anim-slide-in-right');
          });
        }
        window.widgetsVisible = !widgetsScreen.classList.contains('widgets-hidden');
      }

      if (widgetsScreen) {
        widgetsScreen.style.display = '';
        window.widgetsVisible = !widgetsScreen.classList.contains('widgets-hidden');
      }

      if (widgetsToggleBtn) widgetsToggleBtn.style.display = '';
      // Restore App Launcher desktop icon if missing
      if (
        desktopIconsContainer &&
        window._appLauncherIconWasPresent &&
        !document.querySelector('.desktop-icon[data-app=\"app-launcher\"]')
      ) {
        const appLauncherIcon = document.createElement('div');
        appLauncherIcon.className = 'desktop-icon';
        appLauncherIcon.setAttribute('data-app', 'app-launcher');
        appLauncherIcon.innerHTML = `
      <div class="icon-container blue-icon"><i class="fas fa-th"></i></div>
      <span>App launcher</span>
    `;
        desktopIconsContainer.appendChild(appLauncherIcon);
      }
      window._appLauncherIconWasPresent = undefined;

      // Remove mode classes
      if (desktopArea) {
        desktopArea.classList.remove('app-launcher-mode');
        desktopArea.classList.remove('easy-mode'); // FIX: Remove easy-mode
      }
      document.body.classList.remove('app-launcher-mode');
      document.body.classList.remove('easy-mode'); // FIX: Remove easy-mode
      if (appLauncherBtn) appLauncherBtn.style.display = '';
      if (widgetsToggleBtn) widgetsToggleBtn.style.display = '';
      
      // Re-render taskbar icons to ensure proper display based on taskbar style
      if (typeof renderPinnedTaskbarIcons === 'function') {
        renderPinnedTaskbarIcons();
      }
      // --- Restore window headers and size for all open windows ---
      for (const id in openWindows) {
        const winObj = openWindows[id];
        const win = winObj.element;
        if (!win) continue;
        // Restore window-header if hidden
        const header = win.querySelector('.window-header');
        if (header) header.style.display = '';
        // Restore settings-header if hidden
        const settingsHeader = win.querySelector('.settings-header');
        if (settingsHeader) settingsHeader.style.display = '';
        // Restore window-controls
        const controls = win.querySelector('.window-controls');
        if (controls) controls.style.display = '';
        // Move window-title back to header if it was in sidebar
        const sidebar = win.querySelector('.window-sidebar, .settings-sidebar, .app-store-sidebar');
        const windowTitle = sidebar && sidebar.querySelector('.easy-mode-window-title');
        if (windowTitle && header) {
          windowTitle.classList.remove('easy-mode-window-title');
          windowTitle.style = '';
          header.insertBefore(windowTitle, header.firstChild);
          const sep = sidebar.querySelector('.easy-mode-title-separator');
          if (sep) sep.remove();
        }
        // Restore window size and remove maximized/fullscreen styles
        win.classList.remove('maximized');
        win.style.borderRadius = '';
        // Add transition for smooth animation
        win.style.transition = 'width 0.32s cubic-bezier(0.4,0,0.2,1), height 0.32s cubic-bezier(0.4,0,0.2,1), left 0.32s cubic-bezier(0.4,0,0.2,1), top 0.32s cubic-bezier(0.4,0,0.2,1)';

        // Set default size
        let targetWidth, targetHeight;
        if (win.classList.contains('calculator-window')) {
          targetWidth = 530;
          targetHeight = 560;
          win.style.width = targetWidth + 'px';
          win.style.height = targetHeight + 'px';
        } else if (win.classList.contains('photoshop-window')) {
          targetWidth = Math.round(window.innerWidth * 0.9);
          targetHeight = Math.round(window.innerHeight * 0.85);
          win.style.width = targetWidth + 'px';
          win.style.height = targetHeight + 'px';
        } else {
          targetWidth = 800;
          targetHeight = 600;
          win.style.width = targetWidth + 'px';
          win.style.height = targetHeight + 'px';
        }

        // Now center the window after the size is applied
        requestAnimationFrame(() => {
          // Use the targetWidth/targetHeight for centering, not offsetWidth/offsetHeight
          const left = Math.max(0, Math.round((window.innerWidth - targetWidth) / 2));
          const top = Math.max(0, Math.round((window.innerHeight - targetHeight) / 2));
          win.style.left = left + 'px';
          win.style.top = top + 'px';
        });

        // Remove the transition after the animation completes
        win.addEventListener('transitionend', function handler(ev) {
          if (['width', 'height', 'left', 'top'].includes(ev.propertyName)) {
            win.style.transition = '';
            win.removeEventListener('transitionend', handler);
          }
        });
      }
      // Always restore widgetsToggleBtn display on desktop mode (robust fix)
      if (widgetsToggleBtn) widgetsToggleBtn.style.display = '';
      // FINAL: Always show widgets toggle button in desktop mode
      const widgetsToggleBtnFinal = document.getElementById('widgets-toggle-btn');
      if (widgetsToggleBtnFinal) widgetsToggleBtnFinal.style.display = 'flex';
      // --- FIX: Re-attach volume panel listeners after mode switch ---
      if (typeof setupVolumePanelListeners === 'function') setupVolumePanelListeners();
      if (typeof attachVolumeBtnHandler === 'function') attachVolumeBtnHandler();
    }

    // ... existing code in switchToDesktopMode ...

    // Move right icons back to the main taskbar
    const launcherTaskbarRight = document.querySelector('.app-launcher-taskbar-right .taskbar-right');
    const mainTaskbarRight = document.querySelector('.taskbar-right');
    if (launcherTaskbarRight && mainTaskbarRight) {
      Array.from(launcherTaskbarRight.children).forEach(child => {
        mainTaskbarRight.appendChild(child);
      });
    }

    // Restore taskbar right icons
    const taskbarRight = document.querySelector('.taskbar-right');
    if (taskbarRight) {
      taskbarRight.style.display = '';
      // If you have a render function, call it:
      if (typeof renderPinnedTaskbarIcons === 'function') {
        renderPinnedTaskbarIcons();
      }
      // --- FIX: Re-attach context menu listeners to right icons ---
      taskbarRight.querySelectorAll('.taskbar-icon, .taskbar-time, .taskbar-ai').forEach(attachTaskbarIconListeners);
      // --- Ensure widgets toggle button is present and correct ---
      let widgetsToggleBtn = document.getElementById('widgets-toggle-btn');
      if (!widgetsToggleBtn) {
        widgetsToggleBtn = document.createElement('button');
        widgetsToggleBtn.id = 'widgets-toggle-btn';
        widgetsToggleBtn.className = 'taskbar-icon';
        widgetsToggleBtn.innerHTML = '<span id="widgets-toggle-arrow"><i class="fas fa-chevron-right"></i></span>';
        taskbarRight.appendChild(widgetsToggleBtn);
      } else {
        // Enforce correct structure and IDs
        widgetsToggleBtn.className = 'taskbar-icon';
        widgetsToggleBtn.innerHTML = '<span id="widgets-toggle-arrow"><i class="fas fa-chevron-right"></i></span>';
      }
      attachWidgetsToggleBtnListener();
    }
    if (widgetsScreen) {
      window.widgetsVisible = !widgetsScreen.classList.contains('widgets-hidden');
    }
    // After restoring taskbar right icons, ensure widgetsToggleBtn is visible
    if (widgetsToggleBtn) widgetsToggleBtn.style.display = '';
  }









  // --- START MENU LOGIC (moved to bottom for robustness) ---



  function categoryLinkClickHandler(e) {
    e.preventDefault();
    console.log('Category link clicked!'); // DEBUG
    startMenuAppSortMode = (startMenuAppSortMode === 'category') ? 'alphabet' : 'category';
    populateStartMenuApps();
    // Update button text/icon
    const categoryLink = e.currentTarget;
    if (startMenuAppSortMode === 'category') {
      categoryLink.innerHTML = '<i class="fas fa-arrow-down-a-z"></i> Alphabet';
    } else {
      categoryLink.innerHTML = '<i class="fas fa-sliders-h"></i> Category';
    }
  }

  function attachCategoryLinkHandler() {
    const categoryLink = document.querySelector('.start-menu-category-link');
    if (categoryLink) {
      categoryLink.removeEventListener('click', categoryLinkClickHandler);
      categoryLink.addEventListener('click', categoryLinkClickHandler);
    }
  }

  function populateStartMenuApps() {
    console.log('populateStartMenuApps called, mode:', startMenuAppSortMode); // DEBUG
    const startMenuLeftPanel = document.querySelector('.start-menu-left-panel');
    if (!startMenuLeftPanel) return;
    const existingSections = startMenuLeftPanel.querySelectorAll('.app-grid-section');
    existingSections.forEach(section => section.remove());

    if (startMenuAppSortMode === 'alphabet') {
      // Alphabet mode: single grid, all apps sorted by name
      const allApps = [...startMenuApps].sort((a, b) => a.name.localeCompare(b.name));
      const appGridSection = document.createElement('div');
      appGridSection.className = 'app-grid-section';
      const appGrid = document.createElement('div');
      appGrid.className = 'app-grid';
      allApps.forEach(app => {
        const appItem = document.createElement('div');
        appItem.className = 'app-grid-item';
        appItem.setAttribute('data-app', app.id);
        appItem.setAttribute('data-app-name', app.name.toLowerCase());
        appItem.innerHTML = `
        <div class=\"app-icon-bg ${app.iconBgClass}\">\n          <i class=\"fas ${app.iconClass}\"></i>\n        </div>\n        <span>${app.name}</span>\n      `;
        const openStartMenuApp = (e) => {
          openApp(app.id, app.name, app.iconClass, app.iconBgClass, appItem);
          closeStartMenuAnimated();
        };
        appItem.addEventListener('click', openStartMenuApp);
        appGrid.appendChild(appItem);
      });
      appGridSection.appendChild(appGrid);
      startMenuLeftPanel.appendChild(appGridSection);
    } else {
      // Category mode (default)
      const categories = {};
      startMenuApps.forEach(app => {
        if (!categories[app.category]) categories[app.category] = [];
        categories[app.category].push(app);
      });
      for (const categoryName in categories) {
        if (categories[categoryName].length > 0) {
          const appGridSection = document.createElement('div');
          appGridSection.className = 'app-grid-section';
          appGridSection.setAttribute('data-category-name', categoryName);
          const categoryHeader = document.createElement('h4');
          categoryHeader.textContent = categoryName;
          appGridSection.appendChild(categoryHeader);
          const appGrid = document.createElement('div');
          appGrid.className = 'app-grid';
          categories[categoryName].forEach(app => {
            const appItem = document.createElement('div');
            appItem.className = 'app-grid-item';
            appItem.setAttribute('data-app', app.id);
            appItem.setAttribute('data-app-name', app.name.toLowerCase());
            appItem.innerHTML = `
            <div class=\"app-icon-bg ${app.iconBgClass}\">\n              <i class=\"fas ${app.iconClass}\"></i>\n            </div>\n            <span>${app.name}</span>\n          `;
            const openStartMenuApp = (e) => {
              openApp(app.id, app.name, app.iconClass, app.iconBgClass, appItem);
              closeStartMenuAnimated();
            };
            appItem.addEventListener('click', openStartMenuApp);
            appGrid.appendChild(appItem);
          });
          appGridSection.appendChild(appGrid);
          startMenuLeftPanel.appendChild(appGridSection);
        }
      }
    }
    attachCategoryLinkHandler(); // Ensure handler is always attached
  }

  function filterStartMenuApps(searchTerm) {
    const startMenuLeftPanel = document.querySelector('.start-menu-left-panel');
    if (!startMenuLeftPanel) return;
    const term = searchTerm.toLowerCase();
    const appSections = startMenuLeftPanel.querySelectorAll('.app-grid-section');
    appSections.forEach(section => {
      const appItems = [];
      startMenuApps.forEach(app => {
        // ... create appItem, add listeners, etc ...
        grid.appendChild(appItem);
        appItems.push(appItem);
      }); // <-- End of forEach

      // Now define the function here:
      function openAppFromLauncher(appItem) {
        appItems.forEach(item => item.classList.remove('selected'));
        appItem.classList.add('selected');
        openApp(
          appItem.getAttribute('data-app'),
          appItem.querySelector('span').textContent,
          appItem.querySelector('i').className.split(' ').find(cls => cls.startsWith('fa-')),
          appItem.className.split(' ').find(cls => cls.endsWith('-icon') || ['orange', 'blue', 'red', 'teal', 'purple', 'gray'].includes(cls))
        );
        closeLauncher();
      }
      let sectionHasVisibleItems = false;
      appItems.forEach(item => {
        const appName = item.getAttribute('data-app-name');
        const isVisible = appName.includes(term);
        item.style.display = isVisible ? '' : 'none';
        if (isVisible) sectionHasVisibleItems = true;
      });
      section.style.display = sectionHasVisibleItems ? '' : 'none';
    });
  }

  document.addEventListener('DOMContentLoaded', function () {
    const startMenuLeftPanel = document.querySelector('.start-menu-left-panel');
    if (startMenuLeftPanel) {
      startMenuLeftPanel.addEventListener('click', function (e) {
        const categoryLink = e.target.closest('.start-menu-category-link');
        if (categoryLink) {
          e.preventDefault();
          console.log('Category link clicked!'); // DEBUG
          startMenuAppSortMode = (startMenuAppSortMode === 'category') ? 'alphabet' : 'category';
          populateStartMenuApps();
          // Update button text/icon
          if (startMenuAppSortMode === 'category') {
            categoryLink.innerHTML = '<i class="fas fa-arrow-down-a-z"></i> Alphabet';
          } else {
            categoryLink.innerHTML = '<i class="fas fa-sliders-h"></i> Category';
          }
        }
      });
    }
    populateStartMenuApps();
    attachCategoryLinkHandler();
  });

  // --- Desktop Icon Arrangement Mode ---
  let desktopIconArrangeMode = localStorage.getItem('desktopIconArrangeMode') || 'align-grid'; // 'auto-arrange' or 'align-grid'

  // Save and load icon order
  function getDesktopIconOrder() {
    try {
      return JSON.parse(localStorage.getItem('desktopIconOrder') || '[]');
    } catch (e) { return []; }
  }
  function setDesktopIconOrder(order) {
    localStorage.setItem('desktopIconOrder', JSON.stringify(order));
  }
  function getOrderedDesktopIcons() {
    const order = getDesktopIconOrder();
    const icons = Array.from(document.querySelectorAll('.desktop-icon'));
    if (!order.length) return icons;
    return icons.slice().sort((a, b) => {
      const aApp = a.getAttribute('data-app');
      const bApp = b.getAttribute('data-app');
      const aIdx = order.indexOf(aApp);
      const bIdx = order.indexOf(bApp);
      if (aIdx === -1 && bIdx === -1) return 0;
      if (aIdx === -1) return 1;
      if (bIdx === -1) return -1;
      return aIdx - bIdx;
    });
  }













  // Patch executeContextMenuAction to handle toggling
  const _originalExecuteContextMenuAction = executeContextMenuAction;





  function updateCurrentTime() {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    if (currentTimeEl) currentTimeEl.textContent = `${hours}:${minutes}`;
  }
  if (startButton && startMenu) {
    startButton.addEventListener('click', function () {
      if (startMenu.classList.contains('start-menu-style-app-launcher')) {
        openAppLauncherWindow(startButton);
        return;
      }
      if (startMenu.style.display === 'block') {
        // Animate close
        startMenu.classList.remove('start-menu-anim-open');
        startMenu.classList.add('start-menu-anim-close');
        startMenu.addEventListener('animationend', function handler() {
          startMenu.style.display = 'none';
          startMenu.classList.remove('start-menu-anim-close');
          startMenu.removeEventListener('animationend', handler);
        });
      } else {
        // Animate open
        startMenu.style.display = 'block';
        startMenu.classList.remove('start-menu-anim-close');
        startMenu.classList.add('start-menu-anim-open');
      }
    });
  }

  document.addEventListener('click', function (e) {
    if (startMenu && !startMenu.contains(e.target) && e.target !== startButton && !startButton.contains(e.target)) {
      if (startMenu.style.display === 'block') {
        startMenu.classList.remove('start-menu-anim-open');
        startMenu.classList.add('start-menu-anim-close');
        startMenu.addEventListener('animationend', function handler() {
          startMenu.style.display = 'none';
          startMenu.classList.remove('start-menu-anim-close');
          startMenu.removeEventListener('animationend', handler);
        });
      }
    }
    if (contextMenu && !contextMenu.classList.contains('hidden') && !contextMenu.contains(e.target)) {
      hideContextMenu();
    }
    if (e.target === desktopArea && !isDraggingSelector && !draggedIcon) {
      clearIconSelection();
    }
  });

  document.querySelectorAll('.desktop-icon').forEach(setupDesktopIcon);

  document.querySelectorAll('.menu-item').forEach(item => {
    item.addEventListener('click', function () {
      const span = this.querySelector('span');
      if (!span) {
        const itemName = this.textContent.trim();
        if (itemName === 'WEBSITE') { /* ... */ }
        else if (itemName === 'SETTINGS') { openApp('settings', 'Settings', 'fa-cog', 'green'); }
        closeStartMenuAnimated();
        return;
      }
      const appTitle = span.textContent;
      const iconElement = this.querySelector('.menu-icon i');
      const iconBgElement = this.querySelector('.menu-icon');
      if (!iconElement || !iconBgElement) return;
      const iconClass = iconElement.className.split(' ').find(cls => cls.startsWith('fa-'));
      const iconBgClass = iconBgElement.className.split(' ').find(cls => cls.endsWith('-icon') || ['orange', 'blue', 'red', 'teal', 'purple', 'gray'].includes(cls));
      let appName = appTitle.toLowerCase().replace(/\s+/g, '-');
      if (appTitle === 'Settings') appName = 'settings';
      if (appName && appTitle && iconClass && iconBgClass) {
        openApp(appName, appTitle, iconClass, iconBgClass);
        closeStartMenuAnimated();
      }
    });
  });



  function openApp(appName, appTitle, iconClassFromClick, iconBgClassFromClick, iconElementForAnim) {
    // Prevent duplicate windows for all apps except those that should allow multiples
    const allowMultiple = (appName === 'my-files'); // Add more app names if needed
    if (!allowMultiple) {
      for (const id in openWindows) {
        if (openWindows[id].name === appName && openWindows[id].element && !openWindows[id].element.classList.contains('minimized')) {
          makeWindowActive(openWindows[id].element);
          return;
        }
        if (openWindows[id].name === appName && openWindows[id].element && openWindows[id].element.classList.contains('minimized')) {
          toggleMinimizeWindow(openWindows[id].element, openWindows[id].taskbarIcon);
          makeWindowActive(openWindows[id].element);
          return;
        }
      }
    }

    // --- FIX: Remove pinned-only icon if present ---
    // --- Get pinned icon rect BEFORE removing it ---
    let iconRect = null;
    const pinnedIcon = taskbarAppIconsContainer.querySelector('.taskbar-app-icon.pinned-only[data-app="' + appName + '"]');
    if (iconElementForAnim && iconElementForAnim.getBoundingClientRect) {
      iconRect = iconElementForAnim.getBoundingClientRect();
    } else if (pinnedIcon && pinnedIcon.getBoundingClientRect) {
      iconRect = pinnedIcon.getBoundingClientRect();
    } else {
      const desktopIcon = document.querySelector(`.desktop-icon[data-app="${appName}"]`);
      if (desktopIcon) {
        iconRect = desktopIcon.getBoundingClientRect();
      }
    }
    if (pinnedIcon) pinnedIcon.remove();

    windowIdCounter++;
    const windowId = `window-${windowIdCounter}`;


    let windowElement = null;
    let isFileExplorer = false;
    let delayedContentLoader = null;
    const appDetails = getAppIconDetails(appName);
    const finalIconClass = iconClassFromClick || appDetails.iconClass;
    const finalIconBgClass = iconBgClassFromClick || appDetails.iconBgClass;



    // --- Prepare window shell only, delay content ---
    switch (appName) {
      case 'app-launcher':
        openAppLauncherWindow(iconElementForAnim);
        return;
      case 'my-files':
        windowElement = createWindowFromTemplate('file-explorer', windowId, true); // true = delay content
        appTitle = 'File Explorer';
        isFileExplorer = true;

        break;
      case 'settings':
      case 'settings-sm':
        windowElement = createWindowFromTemplate('settings-app', windowId, true);
        appTitle = 'Settings';
        delayedContentLoader = () => setupSettingsApp(windowElement);
        break;
      case 'app-store':
      case 'app-store-sm':
        windowElement = createWindowFromTemplate('app-store', windowId, true);
        appTitle = 'AppStore';
        delayedContentLoader = () => setupAppStore(windowElement); // <-- FIXED
        break;
      case 'site-builder-sm':
        windowElement = createWindowFromTemplate('sitebuilder', windowId, true);
        appTitle = 'Sitebuilder';
        // Optionally add a delayedContentLoader if needed for sitebuilder
        delayedContentLoader = () => setupSiteBuilderApp(windowElement);

        break;
      case 'calculator':
      case 'calculator-sm':
        windowElement = createWindowFromTemplate('calculator-app', windowId, true);
        appTitle = 'Calculator';
        delayedContentLoader = () => setupCalculatorApp(windowElement);
        break;
      case 'photoshop':
      case 'photoshop-sm':
        windowElement = createWindowFromTemplate('photoshop-app', windowId, true);
        appTitle = 'Photoshop';
        // For iframe-based apps, delay iframe src injection
        delayedContentLoader = () => {
          const iframe = windowElement.querySelector('iframe');
          if (iframe && iframe.dataset.src) iframe.src = iframe.dataset.src;
        };
        break;
      case 'email-app':
        windowElement = createWindowFromTemplate('email-app', windowId, true);
        appTitle = 'Email';
        delayedContentLoader = () => setupEmailApp(windowElement);
        break;
        case 'point-of-sale-app':
          windowElement = createWindowFromTemplate('point-of-sale-app', windowId, true);
          appTitle = 'POS';
          delayedContentLoader = () => setupPointOfSaleApp(windowElement);
          break;
      case 'orders-manager':
        windowElement = createWindowFromTemplate('orders-manager', windowId, true);
        appTitle = 'Orders Manager';
        delayedContentLoader = () => setupOrdersManager(windowElement);
        break;
        case 'calendar-app':
          windowElement = createWindowFromTemplate('calendar-app', windowId, true);
          appTitle = 'Calendar';
          delayedContentLoader = () => setupCalendarApp(windowElement);
          break;
      case 'products-manager':
        windowElement = createWindowFromTemplate('products-manager', windowId, true);
        appTitle = 'Products Manager';
        delayedContentLoader = () => setupProductsManager(windowElement);
        break;
      case 'contact-app':
        windowElement = createWindowFromTemplate('contact-app', windowId, true);
        appTitle = 'Contacts';
        delayedContentLoader = () => setupContactsApp(windowElement);
        break;
      default:
        const title = appTitle || appName.charAt(0).toUpperCase() + appName.slice(1).replace(/-/g, ' ');
        windowElement = createGenericWindow(title, finalIconClass, finalIconBgClass, windowId, true);
        break;
    }
    if (windowElement) {
      // --- iOS-like open from icon effect ---
      let contentInjected = false;
      if (iconRect) {
        // Instantly place window at icon's position/scale, then animate to center
        requestAnimationFrame(() => {
          // Get window's final rect (after centering)
          const winRect = windowElement.getBoundingClientRect();
          const scaleX = iconRect.width / winRect.width;
          const scaleY = iconRect.height / winRect.height;
          const iconCenterX = iconRect.left + iconRect.width / 2;
          const iconCenterY = iconRect.top + iconRect.height / 2;
          const winCenterX = winRect.left + winRect.width / 2;
          const winCenterY = winRect.top + winRect.height / 2;
          const translateX = iconCenterX - winCenterX;
          const translateY = iconCenterY - winCenterY;
          // Set initial transform (window appears at icon)
          windowElement.style.transformOrigin = 'center center';
          windowElement.style.transition = 'none';
          windowElement.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scaleX}, ${scaleY})`;
          // Next frame, animate to normal
          requestAnimationFrame(() => {
            windowElement.style.transition = 'transform 0.35s cubic-bezier(0.4,0,0.2,1)';
            windowElement.style.transform = 'translate(0,0) scale(1,1)';
            // Inject/load content for all apps now (before animation ends)
            if (delayedContentLoader && !contentInjected) {
              delayedContentLoader();
              contentInjected = true;
            }
            // Clean up after animation
            setTimeout(() => {
              windowElement.style.transition = '';
              windowElement.style.transform = '';
            }, 370);
          });
        });
      } else {
        // Fallback: try to find app icon for animation
        let fallbackIconRect = null;
        const desktopIcon = document.querySelector(`.desktop-icon[data-app="${appName}"]`);
        const startMenuIcon = document.querySelector(`.app-grid-item[data-app="${appName}"], .start-menu-app-item[data-app="${appName}"]`);
        
        if (desktopIcon) {
          fallbackIconRect = desktopIcon.getBoundingClientRect();
        } else if (startMenuIcon) {
          fallbackIconRect = startMenuIcon.getBoundingClientRect();
        }
        
        if (fallbackIconRect) {
          // Use the same animation as when iconRect is available
          requestAnimationFrame(() => {
            const winRect = windowElement.getBoundingClientRect();
            const scaleX = fallbackIconRect.width / winRect.width;
            const scaleY = fallbackIconRect.height / winRect.height;
            const iconCenterX = fallbackIconRect.left + fallbackIconRect.width / 2;
            const iconCenterY = fallbackIconRect.top + fallbackIconRect.height / 2;
            const winCenterX = winRect.left + winRect.width / 2;
            const winCenterY = winRect.top + winRect.height / 2;
            const translateX = iconCenterX - winCenterX;
            const translateY = iconCenterY - winCenterY;
            
            windowElement.style.transformOrigin = 'center center';
            windowElement.style.transition = 'none';
            windowElement.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scaleX}, ${scaleY})`;
            windowElement.style.opacity = '0.3';
            
            requestAnimationFrame(() => {
              windowElement.style.transition = 'transform 0.35s cubic-bezier(0.4,0,0.2,1), opacity 0.35s cubic-bezier(0.4,0,0.2,1)';
              windowElement.style.transform = 'translate(0,0) scale(1,1)';
              windowElement.style.opacity = '1';
              
              if (delayedContentLoader && !contentInjected) {
                delayedContentLoader();
                contentInjected = true;
              }
              
              setTimeout(() => {
                windowElement.style.transition = '';
                windowElement.style.transform = '';
                windowElement.style.opacity = '';
              }, 370);
            });
          });
        } else {
          // Last resort: use the CSS animation from center
          windowElement.classList.add('window-anim-open');
          windowElement.addEventListener('animationend', function handler(e) {
            if (e.animationName === 'windowOpenIOS') {
              windowElement.classList.remove('window-anim-open');
              windowElement.removeEventListener('animationend', handler);
              if (delayedContentLoader && !contentInjected) {
                delayedContentLoader();
                contentInjected = true;
              }
            }
          });
        }
      }
      // ---
      const taskbarIcon = createTaskbarIcon(windowId, appName, finalIconClass, appTitle);
      openWindows[windowId] = {
        element: windowElement,
        taskbarIcon: taskbarIcon,
        name: appName,
        title: appTitle,
        iconClass: finalIconClass,
        iconBgClass: finalIconBgClass,
        appTitle: appTitle
      };
      makeWindowActive(windowElement);
      // --- EASY MODE: maximize and hide header ---
      if (window._easyMode && document.body.classList.contains('easy-mode')) {
        // Maximize window to fill desktop area
        windowElement.classList.add('maximized');
        windowElement.style.left = '0px';
        windowElement.style.top = '0px';
        windowElement.style.width = '100%';
        windowElement.style.height = '100%';
        windowElement.style.borderRadius = '0';
        // Hide window header
        const header = windowElement.querySelector('.window-header');
        if (header) header.style.display = 'none';
        // Also hide settings-header if present
        const settingsHeader = windowElement.querySelector('.settings-header');
        if (settingsHeader) settingsHeader.style.display = 'none';
        // Optionally hide window controls
        const controls = windowElement.querySelector('.window-controls');
        if (controls) controls.style.display = 'none';
        // --- Move window-title to sidebar ---
        const windowTitle = windowElement.querySelector('.window-title');
        const sidebar = windowElement.querySelector('.window-sidebar, .settings-sidebar, .app-store-sidebar');
        if (windowTitle && sidebar && !sidebar.querySelector('.easy-mode-window-title')) {
          // Clone or move the windowTitle (move is better to preserve events/icons)
          windowTitle.classList.add('easy-mode-window-title');
          // Remove margin/padding if any
          windowTitle.style.margin = '0';
          windowTitle.style.padding = '0 5px 2px 5px';
          windowTitle.style.display = 'flex';
          windowTitle.style.alignItems = 'center';
          windowTitle.style.gap = '4px';
          windowTitle.style.fontSize = '14px';
          windowTitle.style.fontWeight = 'bold';
          windowTitle.style.background = 'none';
          windowTitle.style.border = 'none';
          windowTitle.style.whiteSpace = 'nowrap';
          // --- Add X (close) button next to title ---
          const closeBtn = document.createElement('button');
          closeBtn.className = 'easy-mode-close-btn';
          closeBtn.title = 'Close';
          closeBtn.innerHTML = '<i class="fas fa-times"></i>';
          closeBtn.style.background = 'none';
          closeBtn.style.border = 'none';
          closeBtn.style.color = '#fff';
          closeBtn.style.fontSize = '18px';
          closeBtn.style.cursor = 'pointer';
          closeBtn.style.opacity = '0.7';
          closeBtn.style.transition = 'opacity 0.18s';
          closeBtn.style.marginLeft = 'auto';
          closeBtn.style.display = 'flex';
          closeBtn.style.alignItems = 'center';
          closeBtn.style.justifyContent = 'flex-end';
          closeBtn.style.minWidth = '48px';
          // Hover: show text 'Close' instead of icon
          closeBtn.addEventListener('mouseenter', () => {
            closeBtn.style.opacity = '1';
            closeBtn.innerHTML = 'Close';
            closeBtn.style.fontSize = '11px';
            closeBtn.style.fontWeight = 'bold';
            closeBtn.style.borderRadius = '6px';
            closeBtn.style.padding = '4px 8px';
            closeBtn.style.backgroundColor = 'rgba(255,255,255,0.10)';
          });
          closeBtn.addEventListener('mouseleave', () => {
            closeBtn.style.opacity = '0.7';
            closeBtn.innerHTML = '<i class="fas fa-times"></i>';
            closeBtn.style.fontSize = '18px';
            closeBtn.style.fontWeight = '';
            closeBtn.style.backgroundColor = 'transparent';
            closeBtn.style.padding = '';

          });
          closeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            // Find the parent .window element
            let win = windowTitle.closest('.window');
            if (!win) {
              // If not found, try to find any .window.active (should only be one in easy mode)
              win = document.querySelector('.window.active') || document.querySelector('.window');
            }
            if (win) {
              // Try to click the close button if present
              const closeButton = win.querySelector('.window-close');
              if (closeButton) {
                closeButton.click();
              } else {
                // Fallback: remove window directly and cleanup
                const winId = win.id;
                if (win.parentNode) win.parentNode.removeChild(win);
                if (window.openWindows && window.openWindows[winId]) {
                  if (window.openWindows[winId].taskbarIcon) window.openWindows[winId].taskbarIcon.remove();
                  delete window.openWindows[winId];
                }
                if (window.activeWindow === win) window.activeWindow = null;
                if (typeof window.updateTaskbarActiveState === 'function') window.updateTaskbarActiveState();
              }
            }
          });
          // Make windowTitle flex to align closeBtn right
          windowTitle.style.display = 'flex';
          windowTitle.style.alignItems = 'center';
          windowTitle.style.gap = '4px';
          windowTitle.appendChild(closeBtn);
          // Insert at top of sidebar
          sidebar.insertBefore(windowTitle, sidebar.firstChild);
          // Add a separator after the title
          const sep = document.createElement('div');
          sep.className = 'easy-mode-title-separator';
          sep.style.height = '1px';
          sep.style.background = 'rgba(255,255,255,0.10)';
          sep.style.margin = '8px 0 8px 0';
          sidebar.insertBefore(sep, windowTitle.nextSibling);
        }
      }
      // Do not call setupFileExplorerInteraction or other content loaders here!
    }
    // Always update the taskbar after opening an app
    renderPinnedTaskbarIcons();
  }

  function createWindowFromTemplate(templateId, windowId, delayContent) {
    const template = document.getElementById(`${templateId}-template`);
    if (!template) return null;
    const windowClone = template.content.cloneNode(true);
    if (!windowClone) return null;
    const windowElement = windowClone.querySelector('.window');
    if (!windowElement) return null;
    windowElement.id = windowId;
    setupWindowControls(windowElement);
    windowsContainer.appendChild(windowElement);
    positionWindowCenter(windowElement);
    
    // Don't apply standard animation here - let openApp handle animations
    // windowElement.classList.add('window-anim-open');
    
    // If delayContent, remove or hide main content for now (if needed)
    if (delayContent) {
      // For iframe-based apps, set iframe src to blank and store real src in data-src
      const iframe = windowElement.querySelector('iframe');
      if (iframe && iframe.src) {
        iframe.dataset.src = iframe.src;
        iframe.src = '';
      }
      // Optionally, hide content area if needed (not strictly necessary)
    }
    // --- PATCH: Ensure sidebar overlay and menu toggle exist ---
    ensureSidebarElements(windowElement);
    // --- PATCH: Call global sidebar logic ---
    if (typeof setupMobileSidebarForWindow === 'function') {
      setupMobileSidebarForWindow(windowElement);
    }
    if (typeof window.updateSidebarForWindow === 'function') {
      window.updateSidebarForWindow(windowElement);
    }
    if (typeof attachSidebarResizeObserver === 'function') {
      attachSidebarResizeObserver(windowElement);
    }
    return windowElement;
  }
  window.createWindowFromTemplate = createWindowFromTemplate;
  function createGenericWindow(title, iconClass, iconBgClass, windowId, delayContent) {
    const windowElement = document.createElement('div');
    windowElement.className = 'window';
    windowElement.id = windowId;
    windowElement.style.width = '800px';
    windowElement.style.height = '600px';
    // If delayContent, leave content area empty for now
    windowElement.innerHTML = `
      <div class="window-header">
        <button class="menu-toggle"><i class="fas fa-bars"></i></button>
        <div class="window-title">
          <div class="window-icon ${iconBgClass}">
            <i class="fas ${iconClass}"></i>
          </div>
          <span>${title}</span>
        </div>
        <div class="window-controls">
          <button class="window-minimize" title="Minimize"><i class="fas fa-minus"></i></button>
          <button class="window-popout" title="Pop out"><i class="fas fa-up-right-from-square"></i></button>
          <button class="window-maximize" title="Maximize"><i class="fas fa-expand"></i></button>
          <button class="window-close" title="Close"><i class="fas fa-times"></i></button>
        </div>
      </div>
      <div class="window-content" style="display: flex; align-items: center; justify-content: center; padding: 20px;">
        <div class="sidebar-overlay"></div>
        ${delayContent ? '' : `<p>Content for ${title} goes here.</p>`}
      </div>
    `;
    setupWindowControls(windowElement);
    windowsContainer.appendChild(windowElement);
    positionWindowCenter(windowElement);
    
    // Don't apply standard animation here - let openApp handle animations
    // windowElement.classList.add('window-anim-open');
    
    // --- PATCH: Ensure sidebar overlay and menu toggle exist ---
    ensureSidebarElements(windowElement);
    // --- PATCH: Call global sidebar logic ---
    if (typeof setupMobileSidebarForWindow === 'function') {
      setupMobileSidebarForWindow(windowElement);
    }
    if (typeof window.updateSidebarForWindow === 'function') {
      window.updateSidebarForWindow(windowElement);
    }
    if (typeof attachSidebarResizeObserver === 'function') {
      attachSidebarResizeObserver(windowElement);
    }
    return windowElement;
  }

  function positionWindowCenter(windowElement) {
    if (window.innerWidth <= MOBILE_BREAKPOINT) {
      windowElement.style.left = '0px';
      windowElement.style.top = '0px';
      windowElement.style.width = '100%';
      windowElement.style.height = '100%';
      // Ensure it doesn't have the 'maximized' class from desktop if that would cause issues
      // windowElement.classList.remove('maximized'); 
      // The CSS should handle all visual aspects of fullscreen on mobile.
      return;
    }
    if (windowElement.classList.contains('maximized')) return;

    // Use offsetWidth and offsetHeight to get actual pixel dimensions
    const width = windowElement.offsetWidth;
    const height = windowElement.offsetHeight;

    const desktopAreaRect = windowsContainer.getBoundingClientRect();
    let left = (desktopAreaRect.width - width) / 2;
    let top = (desktopAreaRect.height - height) / 2;

    const openWindowCount = Object.keys(openWindows).filter(id => openWindows[id].element && !openWindows[id].element.classList.contains('minimized')).length;
    const offsetMultiplier = openWindowCount > 0 ? openWindowCount - 1 : 0;
    const offsetAmount = (offsetMultiplier % 10) * 20; // Cascade offset

    left += offsetAmount;
    top += offsetAmount;

    // Ensure the window stays within the bounds of the windowsContainer
    const maxLeft = Math.max(0, desktopAreaRect.width - width); // Ensure maxLeft is not negative
    const maxTop = Math.max(0, desktopAreaRect.height - height); // Ensure maxTop is not negative

    windowElement.style.left = `${Math.max(0, Math.min(left, maxLeft))}px`;
    windowElement.style.top = `${Math.max(0, Math.min(top, maxTop))}px`; // Ensure top is at least 0
  }
  function setupWindowControls(windowElement) {
    if (window.innerWidth > MOBILE_BREAKPOINT) { // Only make draggable on larger screens
      makeWindowDraggable(windowElement);
    }
    const windowId = windowElement.id;
    const closeButton = windowElement.querySelector('.window-close');
    const minimizeButton = windowElement.querySelector('.window-minimize');
    const maximizeButton = windowElement.querySelector('.window-maximize');
    const header = windowElement.querySelector('.window-header') || windowElement.querySelector('.settings-header');
    if (closeButton) {
      closeButton.addEventListener('click', function (e) {
        e.stopPropagation();
        const currentTaskbarIcon = openWindows[windowId] ? openWindows[windowId].taskbarIcon : null;
        // --- Animation: close effect ---
        windowElement._isClosing = true;
        windowElement.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
        windowElement.classList.remove('maximized');
        if (maximizeButton) maximizeButton.classList.remove('window-restore');
        windowElement.classList.add('window-anim-close');
        // Remove all event listeners from controls
        if (closeButton) closeButton.replaceWith(closeButton.cloneNode(true));
        if (minimizeButton) minimizeButton.replaceWith(minimizeButton.cloneNode(true));
        if (maximizeButton) maximizeButton.replaceWith(maximizeButton.cloneNode(true));
        windowElement.addEventListener('animationend', function handler(ev) {
          windowElement.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
          if (ev.animationName === 'windowClose') {
            // Start icon out animation only for unpinned icons
            if (currentTaskbarIcon && currentTaskbarIcon.parentNode) {
              if (!currentTaskbarIcon.classList.contains('pinned-only')) {
                animateTaskbarIconOut(currentTaskbarIcon, function () {
                  // Delete openWindows entry before re-render
                  delete openWindows[windowId];
                  renderPinnedTaskbarIcons();
                });
              } else {
                // Delete openWindows entry before re-render
                delete openWindows[windowId];
                renderPinnedTaskbarIcons();
              }
            } else {
              // Delete openWindows entry before re-render
              delete openWindows[windowId];
              renderPinnedTaskbarIcons();
            }
            // Immediately do the rest of the cleanup
            if (currentTaskbarIcon) currentTaskbarIcon.classList.remove('opened-app');
            windowElement.remove();
            if (activeWindow === windowElement) activeWindow = null;
            updateTaskbarActiveState();
            windowElement._isClosing = false;
            if (typeof updateAppLauncherTaskbarPosition === 'function') updateAppLauncherTaskbarPosition();
            closeStartMenuAnimated();
          }
        }
          , { once: true });
        // ---
      });
    }
    if (minimizeButton) {
      minimizeButton.addEventListener('click', function (e) {
        e.stopPropagation();
        const currentTaskbarIcon = openWindows[windowId] ? openWindows[windowId].taskbarIcon : null;
        animateWindowToTaskbar(windowElement, currentTaskbarIcon, function () {
          windowElement.style.display = 'none';
          windowElement.classList.add('minimized');
          if (currentTaskbarIcon) {
            currentTaskbarIcon.classList.add('minimized');
            currentTaskbarIcon.classList.remove('active');
          }
          if (activeWindow === windowElement) {
            activeWindow = null;
            updateTaskbarActiveState();
          }
          if (typeof updateAppLauncherTaskbarPosition === 'function') updateAppLauncherTaskbarPosition();
        });
      });
    }
    if (maximizeButton) {
      maximizeButton.addEventListener('click', function (e) {
        e.stopPropagation();
        if (window.innerWidth <= MOBILE_BREAKPOINT) return;
        windowElement.classList.remove('window-anim-open', 'window-anim-maximize', 'window-anim-close');
        const desktopRect = windowsContainer.getBoundingClientRect();
        const maxWidth = Math.min(desktopRect.width, window.innerWidth);
        const maxHeight = Math.min(desktopRect.height, window.innerHeight);
        const isMaximized = windowElement.classList.contains('maximized');
        if (isMaximized) {
          // --- RESTORE ---
          windowElement.classList.remove('maximized');
          maximizeButton.classList.remove('window-restore');
          // Use previous size for smooth transition
          let prevWidth = windowElement.dataset.prevWidth || windowElement.style.width;
          let prevHeight = windowElement.dataset.prevHeight || windowElement.style.height;
          // Calculate centered position for the previous size
          const desktopRect = windowsContainer.getBoundingClientRect();
          const width = parseInt(prevWidth, 10) || 800;
          const height = parseInt(prevHeight, 10) || 600;
          const left = Math.round((desktopRect.width - width) / 2);
          const top = Math.round((desktopRect.height - height) / 2);
          // Set transition before changing values
          windowElement.style.transition = 'width 0.32s cubic-bezier(0.4,0,0.2,1), height 0.32s cubic-bezier(0.4,0,0.2,1), left 0.32s cubic-bezier(0.4,0,0.2,1), top 0.32s cubic-bezier(0.4,0,0.2,1)';
          windowElement.style.width = width + 'px';
          windowElement.style.height = height + 'px';
          windowElement.style.left = left + 'px';
          windowElement.style.top = top + 'px';
          windowElement.style.resize = '';
          makeWindowDraggable(windowElement);
          makeWindowActive(windowElement);
          windowElement.addEventListener('transitionend', function handler(ev) {
            if (["width", "height", "left", "top"].includes(ev.propertyName)) {
              windowElement.style.transition = '';
              windowElement.removeEventListener('transitionend', handler);
              // After restore
              if (typeof updateAppLauncherTaskbarPosition === 'function') updateAppLauncherTaskbarPosition();
            }
          });

        } else {
          // --- MAXIMIZE ---
          // Save current rect for restore
          windowElement.dataset.prevWidth = windowElement.style.width || windowElement.offsetWidth + 'px';
          windowElement.dataset.prevHeight = windowElement.style.height || windowElement.offsetHeight + 'px';
          windowElement.dataset.prevLeft = windowElement.style.left || windowElement.offsetLeft + 'px';
          windowElement.dataset.prevTop = windowElement.style.top || windowElement.offsetTop + 'px';
          windowElement.style.transition = 'width 0.32s cubic-bezier(0.4,0,0.2,1), height 0.32s cubic-bezier(0.4,0,0.2,1), left 0.32s cubic-bezier(0.4,0,0.2,1), top 0.32s cubic-bezier(0.4,0,0.2,1)';
          windowElement.style.width = `100%`;
          windowElement.style.height = `100%`;
          windowElement.style.left = '0px';
          windowElement.style.top = '0px';
          windowElement.style.resize = 'none';


          windowElement.addEventListener('transitionend', function handler(ev) {

            if (["width", "height", "left", "top"].includes(ev.propertyName)) {
              windowElement.classList.add('maximized');

              windowElement.style.transition = '';
              windowElement.removeEventListener('transitionend', handler);
              // After maximize
              if (typeof updateAppLauncherTaskbarPosition === 'function') updateAppLauncherTaskbarPosition();
            }
          });
          maximizeButton.classList.add('window-restore');
          if (header) {
            header.onmousedown = null;
            header.style.cursor = 'default';
          }
          makeWindowActive(windowElement);

        }
        // --- App Launcher Taskbar Position Logic ---
        updateAppLauncherTaskbarPosition();
      });
    }
    // Add double-click to header to toggle maximize/restore
    if (maximizeButton && header) {
      header.addEventListener('dblclick', function (e) {
        if (window.innerWidth <= MOBILE_BREAKPOINT) return; // No maximize on mobile
        maximizeButton.click();
      });
    }
    // Pop-out button logic
    const popoutButton = windowElement.querySelector('.window-popout');
    if (popoutButton) {
      popoutButton.addEventListener('click', function (e) {
        e.stopPropagation();
        // Get original window position and size
        const rect = windowElement.getBoundingClientRect();
        const screenLeft = window.screenX || window.screenLeft || 0;
        const screenTop = window.screenY || window.screenTop || 0;
        const chromeHeight = (window.outerHeight - window.innerHeight) || 0;
        const left = Math.round(screenLeft + rect.left);
        const top = Math.round(screenTop + rect.top + chromeHeight);
        const width = Math.round(rect.width);
        const height = Math.round(rect.height);
        // Open a new window with matching position and size
        const popoutWin = window.open('', '_blank', `width=${width},height=${height},left=${left},top=${top},menubar=no,toolbar=no,location=no,status=no`);
        if (!popoutWin) return;
        // --- Cross-browser: Write HTML immediately after open ---
        const doc = popoutWin.document;
        doc.open();
        doc.write(`<!DOCTYPE html><html><head><title>${windowElement.querySelector('.window-title span')?.textContent || 'App Popout'}</title>`);
        // Copy stylesheets
        Array.from(document.styleSheets).forEach(sheet => {
          if (sheet.href) doc.write(`<link rel="stylesheet" href="${sheet.href}">`);
        });
        // Inject main JS file for popout functionality
        doc.write('<script src="js/app.js"></script>');
        doc.write('</head><body style="background: var(--primary-bg); margin:0;">');
        // Write the entire window element, not just .window-content
        if (windowElement) {
          // Remove any existing inline styles that would conflict
          windowElement.style.position = '';
          windowElement.style.left = '';
          windowElement.style.top = '';
          windowElement.style.width = '';
          windowElement.style.height = '';
          // Write the .window element
          doc.write(windowElement.outerHTML);
          // Add style to make .window fill the viewport in the popout and hide the window header
          doc.write('<style>.window{position:fixed!important;top:0!important;left:0!important;width:100vw!important;height:100vh!important;max-width:none!important;max-height:none!important;min-width:0!important;min-height:0!important;z-index:1!important;} .window-header{display:none!important;}</style>');
        }
        doc.write('</body></html>');
        doc.close();
        // --- End cross-browser popout logic ---
        // Remove window from desktop and taskbar
        const currentTaskbarIcon = openWindows[windowId] ? openWindows[windowId].taskbarIcon : null;
        // --- Save icon and bg class for restore ---
        let iconClass = null, iconBgClass = null;
        const iconElem = windowElement.querySelector('.window-title .window-icon i');
        const iconBgElem = windowElement.querySelector('.window-title .window-icon');
        if (iconElem) iconClass = Array.from(iconElem.classList).find(cls => cls.startsWith('fa-'));
        if (iconBgElem) iconBgClass = Array.from(iconBgElem.classList).find(cls => cls.endsWith('-icon'));
        // --- Save appName and appTitle BEFORE removing window and openWindows ---
        let restoreAppName = (openWindows[windowId]?.name || windowElement.getAttribute('data-app') || '').trim();
        let restoreAppTitle = (openWindows[windowId]?.title || windowElement.querySelector('.window-title span')?.textContent || '').trim();
        windowElement.remove();
        if (currentTaskbarIcon) currentTaskbarIcon.remove();
        if (openWindows[windowId]) delete openWindows[windowId];
        if (activeWindow === windowElement) {
          activeWindow = null;
          updateTaskbarActiveState();
        }
        // --- Popout close behavior: restore if needed ---
        const popoutBehavior = localStorage.getItem('popoutCloseBehavior') || 'close';
        if (popoutBehavior === 'restore') {
          // Fallback to getAppIconDetails if iconClass or iconBgClass missing
          if (!iconClass || !iconBgClass) {
            const details = getAppIconDetails(restoreAppName);
            if (!iconClass) iconClass = details.iconClass;
            if (!iconBgClass) iconBgClass = details.iconBgClass;
          }
          // Pass info to the popout window so it can notify us on close
          try {
            popoutWin._poppedOutAppInfo = {
              appName: restoreAppName,
              appTitle: restoreAppTitle,
              iconClass: iconClass,
              iconBgClass: iconBgClass
            };
          } catch (e) { }
          // Listen for popout window close
          const restoreApp = () => {
            // Use appName and appTitle to reopen
            const info = popoutWin._poppedOutAppInfo;
            if (!window._loggingOut && info && info.appName) {
              openApp(info.appName, info.appTitle, info.iconClass, info.iconBgClass);
            }
          };
          // Use polling to detect close (since onbeforeunload in popout is unreliable cross-origin)
          const pollInterval = setInterval(() => {
            if (popoutWin.closed) {
              clearInterval(pollInterval);
              restoreApp();
            }
          }, 500);
        }

        // At the top of the file, after other globals:
        window._allPopoutWindows = window._allPopoutWindows || [];

        // In the popoutButton click handler, after 'if (!popoutWin) return;':
        window._allPopoutWindows.push(popoutWin);

        // In the logout button event handler:
        const logOutButton = document.querySelector('.start-menu-logout-button') || document.querySelector('.logout-button');
        if (logOutButton) {
          logOutButton.addEventListener('click', (e) => {
            e.preventDefault();
            handleLogout();
          });
        }

      });
    }
    windowElement.addEventListener('mousedown', function (e) {
      // Only activate if not clicking a control button
      if (e.target.closest('.window-controls button') || e.target.closest('.window-control-btn')) return;
      makeWindowActive(windowElement);
    });
  }
  // Helper to re-attach drag handler after restore
  function dragMouseDownWrapper(windowElement) {
    return function (e) {
      if (window.innerWidth <= MOBILE_BREAKPOINT) return;
      const header = windowElement.querySelector('.window-header') || windowElement.querySelector('.settings-header');
      if (!header) return;
      // Check if the click target is a window control button
      if (e.target.closest('.window-controls button') || e.target.closest('.settings-window-controls button')) {
        return;
      }
      e.preventDefault();
      let pos3 = e.clientX;
      let pos4 = e.clientY;
      makeWindowActive(windowElement);
      e.stopPropagation();
      let pos1 = 0, pos2 = 0;
      function elementDrag(ev) {
        ev.preventDefault();
        pos1 = pos3 - ev.clientX;
        pos2 = pos4 - ev.clientY;
        pos3 = ev.clientX;
        pos4 = ev.clientY;
        let newY = windowElement.offsetTop - pos2;
        let newX = windowElement.offsetLeft - pos1;
        newY = Math.max(0, newY);
        windowElement.style.top = newY + 'px';
        windowElement.style.left = newX + 'px';
      }
      function closeDragElement() {
        document.onmouseup = null;
        document.onmousemove = null;
        header.style.cursor = 'grab';
      }
      document.onmouseup = closeDragElement;
      document.onmousemove = elementDrag;
      header.style.cursor = 'grabbing';
    };
  }

  function animateWindowToTaskbar(windowElement, taskbarIcon, callback) {
    if (!windowElement || !taskbarIcon) {
      if (callback) callback();
      return;
    }
    // Get window and icon positions
    const winRect = windowElement.getBoundingClientRect();
    const iconRect = taskbarIcon.getBoundingClientRect();
    // Calculate center points
    const winCenterX = winRect.left + winRect.width / 2;
    const winCenterY = winRect.top + winRect.height / 2;
    const iconCenterX = iconRect.left + iconRect.width / 2;
    const iconCenterY = iconRect.top + iconRect.height / 2;
    // Calculate translation
    const translateX = iconCenterX - winCenterX;
    const translateY = iconCenterY - winCenterY;
    // Calculate scale (shrink to icon size)
    const scale = Math.max(0.18, Math.min(iconRect.width / winRect.width, iconRect.height / winRect.height));
    // Animate transform and opacity
    windowElement.style.transition = 'transform 0.35s cubic-bezier(0.4,0,0.2,1), opacity 0.35s cubic-bezier(0.4,0,0.2,1)';
    windowElement.style.transformOrigin = 'center center';
    windowElement.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
    windowElement.style.opacity = '0';
    // After animation, hide and reset
    setTimeout(() => {
      windowElement.style.transition = '';
      windowElement.style.transform = '';
      windowElement.style.opacity = '1'; // Reset for next time
      if (callback) callback();
    }, 350);
  }



  function animateWindowFromTaskbar(windowElement, taskbarIcon, callback) {
    if (!windowElement || !taskbarIcon) {
      if (callback) callback();
      return;
    }
    // Get icon position first
    const iconRect = taskbarIcon.getBoundingClientRect();
    const iconCenterX = iconRect.left + iconRect.width / 2;
    const iconCenterY = iconRect.top + iconRect.height / 2;
    
    // Get window's final position (after it's positioned but before animation)
    const winRect = windowElement.getBoundingClientRect();
    const winCenterX = winRect.left + winRect.width / 2;
    const winCenterY = winRect.top + winRect.height / 2;
    
    // Calculate translation from icon to window center
    const translateX = iconCenterX - winCenterX;
    const translateY = iconCenterY - winCenterY;
    
    // Calculate scale (shrink to icon size)
    const scale = Math.max(0.18, Math.min(iconRect.width / winRect.width, iconRect.height / winRect.height));
    
    // Start at icon position/scale with no transition
    windowElement.style.transition = 'none';
    windowElement.style.transformOrigin = 'center center';
    windowElement.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
    windowElement.style.opacity = '0.3';
    
    // Force reflow to ensure the initial transform is applied
    void windowElement.offsetWidth;
    
    // Animate to normal position with transition
    requestAnimationFrame(() => {
      windowElement.style.transition = 'transform 0.45s cubic-bezier(0.23, 1, 0.32, 1), opacity 0.45s cubic-bezier(0.23, 1, 0.32, 1)';
      windowElement.style.transform = 'translate(0,0) scale(1)';
      windowElement.style.opacity = '1';
      
      setTimeout(() => {
        windowElement.style.transition = '';
        windowElement.style.transform = '';
        windowElement.style.opacity = '';
        if (callback) callback();
      }, 450);
    });
  }

  function toggleMinimizeWindow(windowElement, taskbarIcon) {
    if (windowElement.classList.contains('minimized')) {
      // --- Animate restore from taskbar ---
      windowElement.style.display = 'flex';
      windowElement.classList.remove('minimized');
      if (taskbarIcon) taskbarIcon.classList.remove('minimized');
      // Bring to front BEFORE animation
      makeWindowActive(windowElement);
      animateWindowFromTaskbar(windowElement, taskbarIcon, function () {
        // After restore
        if (typeof updateAppLauncherTaskbarPosition === 'function') updateAppLauncherTaskbarPosition();
      });
    } else {
      // --- Animate minimize to taskbar ---
      animateWindowToTaskbar(windowElement, taskbarIcon, function () {
        windowElement.style.display = 'none';
        windowElement.classList.add('minimized');
        if (taskbarIcon) {
          taskbarIcon.classList.add('minimized');
          taskbarIcon.classList.remove('active');
        }
        if (activeWindow === windowElement) {
          activeWindow = null;
          updateTaskbarActiveState();
        }
        // After minimize is complete and .minimized is added
        if (typeof updateAppLauncherTaskbarPosition === 'function') updateAppLauncherTaskbarPosition();
      });

    }

  }

  function makeWindowActive(windowElement) {
    if (!windowElement || windowElement._isClosing) return;
    if (activeWindow === windowElement && !windowElement.classList.contains('minimized')) return;
    if (activeWindow && openWindows[activeWindow.id]) {
      activeWindow.classList.remove('active');
      if (openWindows[activeWindow.id] && openWindows[activeWindow.id].taskbarIcon) {
        openWindows[activeWindow.id].taskbarIcon.classList.remove('active');
      }
    }
    windowZIndex++;
    windowElement.style.zIndex = windowZIndex;
    windowElement.classList.add('active');
    windowElement.style.display = 'flex';
    windowElement.classList.remove('minimized');
    activeWindow = windowElement;
    if (openWindows[windowElement.id] && openWindows[windowElement.id].taskbarIcon) {
      const currentTaskbarIcon = openWindows[windowElement.id].taskbarIcon;
      currentTaskbarIcon.classList.add('active');
      currentTaskbarIcon.classList.remove('minimized');
    }
    updateTaskbarActiveState();
  }
  window.makeWindowActive = makeWindowActive;

  function updateTaskbarActiveState() {
    document.querySelectorAll('.taskbar-app-icon').forEach(icon => icon.classList.remove('active'));
    if (activeWindow && openWindows[activeWindow.id] && !activeWindow.classList.contains('minimized')) {
      const activeTaskbarIcon = openWindows[activeWindow.id].taskbarIcon;
      if (activeTaskbarIcon) activeTaskbarIcon.classList.add('active');
    }
  }
  function makeWindowDraggable(windowElement) {
    if (window.innerWidth <= MOBILE_BREAKPOINT) {
      // On smaller screens, windows are fullscreen and not draggable.
      // Remove cursor style if it was set previously or by CSS for .window-header
      const header = windowElement.querySelector('.window-header') || windowElement.querySelector('.settings-header');
      if (header) {
        header.style.cursor = 'default';
      }
      return;
    }
    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
    const header = windowElement.querySelector('.window-header') || windowElement.querySelector('.settings-header');
    const snapOverlay = document.getElementById('snap-overlay');
    let snapHint = null;
    let snapType = null;
    let wasMaximizedBeforeDrag = false;
    let prevRect = null;
    let snapHintDelayTimer = null;

    if (header) {
      header.onmousedown = dragMouseDown;
    } else {
      // Fallback if no header, allow dragging by the whole window
      // This might be less desirable for UX, but provides a fallback.
      // windowElement.onmousedown = dragMouseDown; 
      // Decided against this for now to prevent conflicts if content is interactive.
      console.warn("Window has no .window-header or .settings-header, cannot make draggable by header.", windowElement);
      return;
    }

    function dragMouseDown(e) {
      // Check if the click target is a window control button
      if (e.target.closest('.window-controls button') || e.target.closest('.settings-window-controls button')) {
        return; // Don't start drag if a control button was clicked
      }
      e.preventDefault();
      // Always save windowed state at the start of drag
      const winRect = windowElement.getBoundingClientRect();
      const desktopRect = windowsContainer.getBoundingClientRect();
      const left = (winRect.left - desktopRect.left) + 'px';
      const top = (winRect.top - desktopRect.top) + 'px';
      windowElement._preSnapRect = {
        width: windowElement.style.width || windowElement.offsetWidth + 'px',
        height: windowElement.style.height || windowElement.offsetHeight + 'px',
        left,
        top
      };
      console.log('Setting _preSnapRect', windowElement._preSnapRect);
      pos3 = e.clientX;
      pos4 = e.clientY;
      makeWindowActive(windowElement);
      e.stopPropagation();
      document.onmouseup = closeDragElement;
      document.onmousemove = elementDrag;
      header.style.cursor = 'grabbing';
      // If maximized, restore to previous size/position for drag
      if (windowElement.classList.contains('maximized')) {

        wasMaximizedBeforeDrag = true;
        prevRect = {
          width: windowElement.dataset.prevWidth,
          height: windowElement.dataset.prevHeight,
          left: windowElement.dataset.prevLeft,
          top: windowElement.dataset.prevTop
        };
        windowElement.classList.remove('maximized');
        windowElement.style.width = prevRect.width;
        windowElement.style.height = prevRect.height;
        windowElement.style.left = prevRect.left;
        windowElement.style.top = prevRect.top;
        windowElement.style.resize = '';
        header.onmousedown = dragMouseDown;
        header.style.cursor = 'grabbing';
      } else {
        wasMaximizedBeforeDrag = false;
        prevRect = {
          width: windowElement.style.width,
          height: windowElement.style.height,
          left: windowElement.style.left,
          top: windowElement.style.top
        };
        if (typeof updateAppLauncherTaskbarPosition === 'function') updateAppLauncherTaskbarPosition();
      }

    }

    function elementDrag(e) {
      e.preventDefault();
      pos1 = pos3 - e.clientX;
      pos2 = pos4 - e.clientY;
      pos3 = e.clientX;
      pos4 = e.clientY;
      let newY = windowElement.offsetTop - pos2;
      let newX = windowElement.offsetLeft - pos1;
      newY = Math.max(0, newY);
      windowElement.style.top = newY + 'px';
      windowElement.style.left = newX + 'px';
      // --- Snap logic ---
      const SNAP_EDGE = 32; // px
      const SNAP_SIDE = 64; // px
      const winW = windowElement.offsetWidth;
      const winH = windowElement.offsetHeight;
      const mouseX = e.clientX;
      const mouseY = e.clientY;
      const vw = window.innerWidth;
      const vh = window.innerHeight;
      let newSnapType = null;
      if (mouseY <= SNAP_EDGE) {
        newSnapType = 'maximize';
      } else if (mouseX <= SNAP_SIDE) {
        newSnapType = 'left';
      } else if (mouseX >= vw - SNAP_SIDE) {
        newSnapType = 'right';
      }
      // --- Snap hint delay logic ---
      if (newSnapType !== snapType) {
        // If leaving a snap zone, clear any pending timer and hide overlay
        if (snapHintDelayTimer) {
          clearTimeout(snapHintDelayTimer);
          snapHintDelayTimer = null;
        }
        if (snapOverlay) {
          snapOverlay.style.display = 'none';
          snapOverlay.innerHTML = '';
        }
        snapType = newSnapType;
        if (snapType) {
          // Start a 1s timer before showing the snap hint
          snapHintDelayTimer = setTimeout(() => {
            if (snapType === newSnapType && snapOverlay) {
              snapHint = document.createElement('div');
              snapHint.className = 'snap-hint';
              if (snapType === 'maximize') snapHint.classList.add('snap-hint-maximize');
              if (snapType === 'left') snapHint.classList.add('snap-hint-left');
              if (snapType === 'right') snapHint.classList.add('snap-hint-right');
              snapOverlay.appendChild(snapHint);
              snapOverlay.style.display = 'block';
            }
            snapHintDelayTimer = null;
          }, 400);
        }
      }
    }

    function closeDragElement(e) {
      const maximizeButton = windowElement.querySelector('.window-maximize');
      document.onmouseup = null;
      document.onmousemove = null;
      header.style.cursor = 'grab';
      if (snapOverlay) {
        snapOverlay.style.display = 'none';
        snapOverlay.innerHTML = '';
      }
      // Snap action
      if (snapType === 'maximize' || snapType === 'left' || snapType === 'right') {
        // Save current rect for restore (before snapping)
        windowElement.dataset.prevWidth = windowElement.style.width || windowElement.offsetWidth + 'px';
        windowElement.dataset.prevHeight = windowElement.style.height || windowElement.offsetHeight + 'px';
        windowElement.dataset.prevLeft = windowElement.style.left || windowElement.offsetLeft + 'px';
        windowElement.dataset.prevTop = windowElement.style.top || windowElement.offsetTop + 'px';
        // Snap with animation
        windowElement.classList.add('window-anim-snap-zoom');
        windowElement.style.transition = 'width 0.32s cubic-bezier(0.4,0,0.2,1), height 0.32s cubic-bezier(0.4,0,0.2,1), left 0.32s cubic-bezier(0.4,0,0.2,1), top 0.32s cubic-bezier(0.4,0,0.2,1)';
        let snapTarget = {};
        if (snapType === 'maximize') {
          const desktopRect = windowsContainer.getBoundingClientRect();
          snapTarget = {
            width: `${Math.min(desktopRect.width, window.innerWidth)}px`,
            height: `${Math.min(desktopRect.height, window.innerHeight)}px`,
            left: '0px',
            top: '0px'
          };
        } else if (snapType === 'left') {
          const desktopRect = windowsContainer.getBoundingClientRect();
          snapTarget = {
            width: Math.floor(window.innerWidth / 2) + 'px',
            height: desktopRect.height + 'px',
            left: '0px',
            top: '0px'
          };
        } else if (snapType === 'right') {
          const desktopRect = windowsContainer.getBoundingClientRect();
          snapTarget = {
            width: Math.floor(window.innerWidth / 2) + 'px',
            height: desktopRect.height + 'px',
            left: Math.floor(window.innerWidth / 2) + 'px',
            top: '0px'
          };
        }
        // Set snapped values (triggers transition)
        windowElement.style.width = snapTarget.width;
        windowElement.style.height = snapTarget.height;
        windowElement.style.left = snapTarget.left;
        windowElement.style.top = snapTarget.top;
        windowElement.style.resize = 'none';
        windowElement.addEventListener('animationend', function handler() {
          windowElement.classList.remove('window-anim-snap-zoom');
          windowElement.removeEventListener('animationend', handler);
        });
        windowElement.addEventListener('transitionend', function handler(ev) {
          if (["width", "height", "left", "top"].includes(ev.propertyName)) {
            windowElement.style.transition = '';
            windowElement.removeEventListener('transitionend', handler);
          }
        });
        windowElement.classList.add('maximized');
        if (maximizeButton) maximizeButton.classList.add('window-restore');
        if (header) header.onmousedown = null;
        if (header) header.style.cursor = 'default';
        saveWindowedState(windowElement);
      }
      snapType = null;
      snapHint = null;
      if (snapHintDelayTimer) {
        clearTimeout(snapHintDelayTimer);
        snapHintDelayTimer = null;
      }
      // --- App Launcher Taskbar Position Logic ---
      updateAppLauncherTaskbarPosition();
    }
  }

  function createTaskbarIcon(windowId, appName, iconClass, appTitle) {
    // Try to match the desktop icon style
    let iconBgClass = 'gray-icon';
    // Try to get the icon background class from the desktop icon
    const desktopIcon = document.querySelector(`.desktop-icon[data-app="${appName}"] .icon-container`);
    if (desktopIcon) {
      // Get the background color class (e.g. blue-icon, green-icon, etc.)
      const bgClass = Array.from(desktopIcon.classList).find(cls => cls.endsWith('-icon'));
      if (bgClass) iconBgClass = bgClass;
    }
    const iconEl = document.createElement('div');
    iconEl.className = 'taskbar-app-icon';
    iconEl.classList.add('opened-app');
    iconEl.setAttribute('data-window-id', windowId);
    iconEl.setAttribute('data-app-name', appName);
    
    // Format the app title
    const formattedAppTitle = appTitle || appName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    iconEl.setAttribute('title', formattedAppTitle);
    
    // Check if we're in text mode
    const isTextMode = document.querySelector('.taskbar').classList.contains('taskbar-text-mode');
    
    if (isTextMode && window.innerWidth > 768) { // Only show text on desktop mode
      iconEl.innerHTML = `
        <div class="icon-container ${iconBgClass}">
          <i class="fas ${iconClass}"></i>
        </div>
        <span class="taskbar-app-text">${formattedAppTitle}</span>
      `;
    } else {
      iconEl.innerHTML = `<div class="icon-container ${iconBgClass}"><i class="fas ${iconClass}"></i></div>`;
    }
    
    iconEl.addEventListener('click', function () {
      const targetWindowId = this.getAttribute('data-window-id');
      const windowToFocus = openWindows[targetWindowId] ? openWindows[targetWindowId].element : null;
      if (windowToFocus) {
        if (windowToFocus.classList.contains('minimized')) {
          toggleMinimizeWindow(windowToFocus, this);
        } else if (activeWindow === windowToFocus) {
          toggleMinimizeWindow(windowToFocus, this);
        } else {
          makeWindowActive(windowToFocus);
        }
      }
    });
    return iconEl;
  }
  window.createTaskbarIcon = createTaskbarIcon;

  function filterStartMenuApps(searchTerm) {
    if (!startMenuLeftPanel) return;
    const term = searchTerm.toLowerCase();
    const appSections = startMenuLeftPanel.querySelectorAll('.app-grid-section');
    appSections.forEach(section => {
      const appItems = [];
      startMenuApps.forEach(app => {
        // ... create appItem, add listeners, etc ...
        grid.appendChild(appItem);
        appItems.push(appItem);
      }); // <-- End of forEach

      // Now define the function here:
      function openAppFromLauncher(appItem) {
        appItems.forEach(item => item.classList.remove('selected'));
        appItem.classList.add('selected');
        openApp(
          appItem.getAttribute('data-app'),
          appItem.querySelector('span').textContent,
          appItem.querySelector('i').className.split(' ').find(cls => cls.startsWith('fa-')),
          appItem.className.split(' ').find(cls => cls.endsWith('-icon') || ['orange', 'blue', 'red', 'teal', 'purple', 'gray'].includes(cls))
        );
        closeLauncher();
      }
      let sectionHasVisibleItems = false;
      appItems.forEach(item => {
        const appName = item.getAttribute('data-app');
        const isVisible = appName.includes(term);
        item.style.display = isVisible ? '' : 'none';
        if (isVisible) sectionHasVisibleItems = true;
      });
      section.style.display = sectionHasVisibleItems ? '' : 'none';
    });
  }

  if (startMenuSearchTop) {
    startMenuSearchTop.addEventListener('input', (e) => {
      filterStartMenuApps(e.target.value);
      if (startMenuSearchBottom) startMenuSearchBottom.value = e.target.value;
    });
  }
  if (startMenuSearchBottom) {
    startMenuSearchBottom.addEventListener('input', (e) => {
      filterStartMenuApps(e.target.value);
      if (startMenuSearchTop) startMenuSearchTop.value = e.target.value;
    });
  }

  // --- App Launcher Taskbar Position Logic ---
  function updateAppLauncherTaskbarPosition() {
    if (!document.body.classList.contains('app-launcher-mode')) return;
    const taskbar = document.querySelector('.taskbar');
    if (!taskbar) return;
    // Check if any window is maximized and not minimized
    const anyMaximized = Object.values(openWindows).some(w =>
      w.element &&
      document.body.contains(w.element) && // Must be in the DOM
      w.element.style.display !== 'none' && // Must be visible
      w.element.classList.contains('maximized') &&
      !w.element.classList.contains('minimized')

    );
    if (anyMaximized) {
      if (!taskbar.classList.contains('taskbar-lowered')) {
        // Remove, then add in next frame for transition
        taskbar.classList.remove('taskbar-lowered');
        requestAnimationFrame(() => {
          taskbar.classList.add('taskbar-lowered');
        });
      }
    } else {
      if (taskbar.classList.contains('taskbar-lowered')) {
        // Remove in next frame for transition
        taskbar.classList.remove('taskbar-lowered');
        // Optionally, you can use requestAnimationFrame here too if you want to ensure a transition back up
      }
    }
  }
  // Patch maximize/restore/minimize logic to call updateAppLauncherTaskbarPosition
  // 1. After maximize/restore in setupWindowControls
  // 2. After minimize/restore in toggleMinimizeWindow





  function setupSettingsApp(settingsWindowElement) {
    const sidebarNavLinks = settingsWindowElement.querySelectorAll('.settings-nav li a');
    const contentHeaderTitle = settingsWindowElement.querySelector('.settings-content-header h2');
    const allContentSections = settingsWindowElement.querySelectorAll('.settings-content > .settings-section-content');
    const settingsHeaderTitleElem = settingsWindowElement.querySelector('.settings-header-title');

    function setActiveSection(sectionName) {
      sidebarNavLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('data-section') === sectionName) {
          link.classList.add('active');
          const linkText = link.textContent.replace(/\d+$/, '').trim();
          if (contentHeaderTitle) contentHeaderTitle.textContent = linkText;
          if (settingsHeaderTitleElem) settingsHeaderTitleElem.textContent = linkText;
        }
      });
      allContentSections.forEach(section => {
        section.style.display = section.classList.contains(`${sectionName}-content`) ? 'block' : 'none';
      });
    }
    sidebarNavLinks.forEach(link => {
      link.addEventListener('click', function (e) {
        e.preventDefault();
        setActiveSection(this.getAttribute('data-section'));
      });
    });
    setActiveSection('appearance');
    const appearanceContent = settingsWindowElement.querySelector('.appearance-content');
    if (appearanceContent) {
      const themeOptions = appearanceContent.querySelectorAll('.appearance-option');
      const appearanceOptionsContainer = appearanceContent.querySelector('.appearance-options');
      if (appearanceOptionsContainer) {
        appearanceOptionsContainer.addEventListener('click', function (e) {
          const optionEl = e.target.closest('.appearance-option');
          if (!optionEl) return;
          themeOptions.forEach(opt => opt.classList.remove('active'));
          optionEl.classList.add('active');
          const theme = optionEl.getAttribute('data-theme');
          if (theme === 'light') {
            document.body.classList.add('light-windows');
            localStorage.setItem('themeMode', 'light');
            if (window._autoThemeListener) {
              window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', window._autoThemeListener);
              window._autoThemeListener = null;
            }
          } else if (theme === 'dark') {
            document.body.classList.remove('light-windows');
            localStorage.setItem('themeMode', 'dark');
            if (window._autoThemeListener) {
              window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', window._autoThemeListener);
              window._autoThemeListener = null;
            }
          } else if (theme === 'auto') {
            localStorage.setItem('themeMode', 'auto');
            // Function to apply system theme
            function applySystemTheme(e) {
              const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
              if (isDark) {
                document.body.classList.remove('light-windows');
              } else {
                document.body.classList.add('light-windows');
              }
            }
            // Initial apply
            applySystemTheme();
            // Remove previous listener if any
            if (window._autoThemeListener) {
              window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', window._autoThemeListener);
            }
            // Save and add new listener
            window._autoThemeListener = applySystemTheme;
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', applySystemTheme);
          }
        });
      }
      const accentSwatches = appearanceContent.querySelectorAll('.accent-color-options .color-swatch');
      const accentColorMap = {
        multicolor: '#ff1b6b', // fallback to default accent
        blue: '#1a73ce',
        purple: '#310671',
        pink: '#ac1c72',
        red: '#d71c07',
        orange: '#eb8a17',
        yellow: '#f89e00',
        green: '#176848',
        gray: '#435564',
      };

      function lightenColor(color, percent) {
        const num = parseInt(color.replace('#', ''), 16),
          amt = Math.round(2.55 * percent),
          R = (num >> 16) + amt,
          G = (num >> 8 & 0x00FF) + amt,
          B = (num & 0x0000FF) + amt;
        return '#' + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
          (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
          (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
      }

      function setAccentColor(colorKey) {
        let color = accentColorMap[colorKey] || accentColorMap['multicolor'];
        // Set the main accent color
        document.documentElement.style.setProperty('--accent-color', color);
        // Calculate and set the light variant (40% lighter)
        const lightColor = lightenColor(color, 40);
        document.documentElement.style.setProperty('--accent-color-light', lightColor);

        localStorage.setItem('accentColor', colorKey);
        // Update active border for color swatches
        accentSwatches.forEach(s => s.classList.remove('active'));
        const selectedSwatch = Array.from(accentSwatches).find(s => s.classList.contains(colorKey));
        if (selectedSwatch) selectedSwatch.classList.add('active');
        // Update selector highlights (appearance-option.active, .select-wrapper select:focus, etc) via CSS var
        // No extra JS needed if CSS uses var(--accent-color)
        // Update taskbar active icon border (uses var(--accent-color) in CSS)
        // Update menu/sidebar selected (uses var(--accent-color) in CSS)
      }
      accentSwatches.forEach(swatch => {
        swatch.addEventListener('click', function () {
          let colorKey = 'multicolor';
          for (const key in accentColorMap) {
            if (this.classList.contains(key)) { colorKey = key; break; }
          }
          setAccentColor(colorKey);
        });
      });
      // On settings app load, restore accent color
      const savedAccent = localStorage.getItem('accentColor') || 'multicolor';
      setAccentColor(savedAccent);
      // --- Popout close behavior dropdown logic ---
      const popoutCloseDropdown = appearanceContent.querySelector('#popout-close-behavior');
      if (popoutCloseDropdown) {
        // Set initial value from localStorage or default
        const savedBehavior = localStorage.getItem('popoutCloseBehavior') || 'close';
        popoutCloseDropdown.value = savedBehavior;
        popoutCloseDropdown.addEventListener('change', function () {
          localStorage.setItem('popoutCloseBehavior', this.value);
        });
      }
    }
    const closeButtonRed = settingsWindowElement.querySelector('.window-control-btn.red');
    if (closeButtonRed) {
      const windowId = settingsWindowElement.id;
      closeButtonRed.addEventListener('click', () => {
        const currentTaskbarIcon = openWindows[windowId] ? openWindows[windowId].taskbarIcon : null;
        settingsWindowElement.remove();
        if (currentTaskbarIcon) currentTaskbarIcon.remove();
        delete openWindows[windowId];
        if (activeWindow === settingsWindowElement) activeWindow = null;
        updateTaskbarActiveState();
      });
    }
    // Failsafe: Hide and remove drag selector if present in settings app
    if (window.dragSelector) {
      window.dragSelector.classList.add('hidden');
      if (window.dragSelector.parentElement) window.dragSelector.parentElement.removeChild(window.dragSelector);
    }
    // Make settings content scrollable
    const settingsContent = settingsWindowElement.querySelector('.settings-content');
    if (settingsContent) {
      settingsContent.style.overflowY = 'auto';
    }
    // Make settings content scrollable
    const fileExplorerContent = settingsWindowElement.querySelector('.window-main-content');
    if (fileExplorerContent) {
      fileExplorerContent.classList.add('scrollable');
    }
    // On settings app load, set theme from localStorage
    const savedTheme = localStorage.getItem('themeMode') || 'auto';
    const themeOptions = settingsWindowElement.querySelectorAll('.appearance-option');
    const initialOption = Array.from(themeOptions).find(opt => opt.getAttribute('data-theme') === savedTheme);
    if (initialOption) {
      themeOptions.forEach(opt => opt.classList.remove('active'));
      initialOption.classList.add('active');
      if (savedTheme === 'light') {
        document.body.classList.add('light-windows');
        if (window._autoThemeListener) {
          window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', window._autoThemeListener);
          window._autoThemeListener = null;
        }
      } else if (savedTheme === 'dark') {
        document.body.classList.remove('light-windows');
        if (window._autoThemeListener) {
          window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', window._autoThemeListener);
          window._autoThemeListener = null;
        }
      } else if (savedTheme === 'auto') {
        function applySystemTheme(e) {
          const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          if (isDark) {
            document.body.classList.remove('light-windows');
          } else {
            document.body.classList.add('light-windows');
          }
        }
        applySystemTheme();
        if (window._autoThemeListener) {
          window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', window._autoThemeListener);
        }
        window._autoThemeListener = applySystemTheme;
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', applySystemTheme);
      }
    }
    // --- Ensure mobile sidebar logic is initialized for Settings app ---
    if (typeof setupMobileSidebarForWindow === 'function') {
      setupMobileSidebarForWindow(settingsWindowElement);
    }

    // --- iOS-style mobile navigation ---
    function isMobile() { return window.innerWidth <= 767; }
    const mobileContainer = settingsWindowElement.querySelector('.settings-mobile-container');
    const sidebar = settingsWindowElement.querySelector('.settings-mobile-sidebar');
    const panel = settingsWindowElement.querySelector('.settings-mobile-panel');
    const headerBackBtn = settingsWindowElement.querySelector('.window-header .back-btn');
    const windowTitle = settingsWindowElement.querySelector('.window-title');
    const titleChevron = windowTitle ? windowTitle.querySelector('.chevron') : null;
    const titlePanelTitle = windowTitle ? windowTitle.querySelector('.panel-title') : null;
    const windowEl = settingsWindowElement;

    if (mobileContainer && sidebar && panel && headerBackBtn && windowTitle && titleChevron && titlePanelTitle) {
      function showPanel(section, label) {
        if (typeof window.hideWalletSidebar === 'function') window.hideWalletSidebar();
        // Set panel title in header
        titlePanelTitle.textContent = label;
        windowTitle.classList.add('show-detail');
        
        // Instead of using getSectionOptionsHTML, clone the desktop content
        const desktopContent = settingsWindowElement.querySelector(`.settings-section-content.${section}-content`);
        const panelContent = panel.querySelector('.settings-mobile-options');
        
        if (desktopContent) {
          // Clone the desktop content and adapt it for mobile
          const clonedContent = desktopContent.cloneNode(true);
          // Clear the panel and add the cloned content
          panelContent.innerHTML = '';
          panelContent.appendChild(clonedContent);
          // Add mobile-specific class for styling
          clonedContent.classList.add('mobile-adapted-content');
        } else {
          // Fallback to simple content if desktop content not found
          panelContent.innerHTML = `<li><span>No content available for ${label}</span></li>`;
        }
        
        // Slide to panel
        mobileContainer.classList.add('show-panel');
        windowEl.classList.add('show-panel');
      }
      // Sidebar button click
      sidebar.querySelectorAll('button[data-section]').forEach(btn => {
        btn.addEventListener('click', function () {
          const section = this.getAttribute('data-section');
          let label = this.childNodes[1] ? this.childNodes[1].textContent.trim() : this.textContent.trim();
          showPanel(section, label);
        });
      });
      // Back button in window header (mobile only)
      headerBackBtn.addEventListener('click', function () {
        if (isMobile()) {
          mobileContainer.classList.remove('show-panel');
          windowEl.classList.remove('show-panel');
          windowTitle.classList.remove('show-detail');
        }
      });
      // Responsive: reset panel on resize
      window.addEventListener('resize', function () {
        if (!isMobile()) {
          mobileContainer.classList.remove('show-panel');
          windowEl.classList.remove('show-panel');
          windowTitle.classList.remove('show-detail');
        }
      });
    }

    // ...existing code...
  }

  // REMOVED: getSectionOptionsHTML function - no longer needed
  // Mobile now uses the same content as desktop by cloning the desktop sections

  function setupCalculatorApp(calculatorWindowElement) {
    const displayHistory = calculatorWindowElement.querySelector('#calc-history');
    const displayCurrentInput = calculatorWindowElement.querySelector('#calc-current-input');
    const buttons = calculatorWindowElement.querySelectorAll('.calc-btn');

    let currentOperand = '0';
    let previousOperand = '';
    let operation = null;
    let displayNeedsReset = false;
    let memoryValue = 0;

    function updateDisplay() {
      displayCurrentInput.textContent = currentOperand;
      if (operation != null) {
        displayHistory.textContent = `${previousOperand} ${getDisplayOperation(operation)}`;
      } else {
        displayHistory.textContent = '';
      }
    }

    function getDisplayOperation(op) {
      switch (op) {
        case 'add': return '+';
        case 'subtract': return '−';
        case 'multiply': return '×';
        case 'divide': return '÷';
        default: return '';
      }
    }

    function appendNumber(number) {
      if (currentOperand === '0' || displayNeedsReset) {
        currentOperand = number;
        displayNeedsReset = false;
      } else {
        if (currentOperand.length >= 16) return; // Limit input length
        currentOperand += number;
      }
    }

    function chooseOperation(selectedOperation) {
      if (currentOperand === '' && previousOperand === '') return;
      if (currentOperand === '' && previousOperand !== '') { // Allow changing operator
        operation = selectedOperation;
        updateDisplay();
        return;
      }
      if (previousOperand !== '') {
        compute();
      }
      operation = selectedOperation;
      previousOperand = currentOperand;
      currentOperand = '';
      displayNeedsReset = false; // Allow immediate input after op selection
    }

    function compute() {
      let computation;
      const prev = parseFloat(previousOperand);
      const current = parseFloat(currentOperand);
      if (isNaN(prev) || isNaN(current)) return;

      // Store the expression for history before computing
      const expression = `${previousOperand} ${getDisplayOperation(operation)} ${currentOperand}`;

      switch (operation) {
        case 'add':
          computation = prev + current;
          break;
        case 'subtract':
          computation = prev - current;
          break;
        case 'multiply':
          computation = prev * current;
          break;
        case 'divide':
          if (current === 0) {
            currentOperand = "Error"; // Division by zero
            operation = null;
            previousOperand = '';
            displayNeedsReset = true;
            return;
          }
          computation = prev / current;
          break;
        default:
          return;
      }
      
      let result = String(computation);
      // Limit decimal places for display if necessary, e.g., to 8
      if (result.includes('.')) {
        const parts = result.split('.');
        if (parts[1] && parts[1].length > 8) {
          result = parseFloat(result).toFixed(8);
        }
      }
      if (result.length > 16) { // Handle potential overflow
        result = parseFloat(result).toExponential(8);
      }

      // Add to history before updating display
      addToHistory(expression, result);
      
      currentOperand = result;
      operation = null;
      previousOperand = '';
      displayNeedsReset = true;
    }

    function clearAll() {
      currentOperand = '0';
      previousOperand = '';
      operation = null;
      displayNeedsReset = false;
      updateDisplay();
    }

    function clearEntry() {
      currentOperand = '0';
      displayNeedsReset = false;
      updateDisplay();
    }

    function backspace() {
      if (displayNeedsReset) {
        clearAll();
        return;
      }
      if (currentOperand.length > 1) {
        currentOperand = currentOperand.slice(0, -1);
      } else {
        currentOperand = '0';
      }
    }

    function inputDecimal() {
      if (displayNeedsReset) {
        currentOperand = '0.';
        displayNeedsReset = false;
        return;
      }
      if (!currentOperand.includes('.')) {
        currentOperand += '.';
      }
    }

    function negate() {
      if (currentOperand === '0' || currentOperand === 'Error') return;
      currentOperand = String(parseFloat(currentOperand) * -1);
    }

    function percent() {
      if (currentOperand === 'Error') return;
      if (previousOperand && operation) { // Calculate percentage of previousOperand
        const prev = parseFloat(previousOperand);
        const curr = parseFloat(currentOperand);
        currentOperand = String((prev * curr) / 100);
      } else { // Calculate percentage of currentOperand itself (e.g., 50% -> 0.5)
        currentOperand = String(parseFloat(currentOperand) / 100);
      }
      displayNeedsReset = true; // Result of an operation
    }

    function inverse() { // 1/x
      if (currentOperand === 'Error') return;
      const num = parseFloat(currentOperand);
      if (num === 0) {
        currentOperand = "Error";
      } else {
        currentOperand = String(1 / num);
      }
      displayNeedsReset = true;
    }

    function square() { // x²
      if (currentOperand === 'Error') return;
      const num = parseFloat(currentOperand);
      currentOperand = String(num * num);
      displayNeedsReset = true;
    }

    function sqrt() { // √x
      if (currentOperand === 'Error') return;
      const num = parseFloat(currentOperand);
      if (num < 0) {
        currentOperand = "Error";
      } else {
        currentOperand = String(Math.sqrt(num));
      }
      displayNeedsReset = true;
    }

    // History functionality
    let calculationHistory = [];
    const historyContainer = calculatorWindowElement.querySelector('#calc-history-list');
    
    function addToHistory(expression, result) {
      const historyItem = {
        expression: expression,
        result: result,
        timestamp: new Date()
      };
      
      calculationHistory.unshift(historyItem); // Add to beginning of array
      
      // Limit history to 50 items
      if (calculationHistory.length > 50) {
        calculationHistory = calculationHistory.slice(0, 50);
      }
      
      updateHistoryDisplay();
    }
    
    function updateHistoryDisplay() {
      if (!historyContainer) return;
      
      if (calculationHistory.length === 0) {
        historyContainer.innerHTML = '<p>There\'s no history yet</p>';
        return;
      }
      
      let historyHTML = '';
      calculationHistory.forEach((item, index) => {
        historyHTML += `
          <div class="history-item" data-index="${index}">
            <div class="history-expression">${item.expression}</div>
            <div class="history-result">${item.result}</div>
          </div>
        `;
      });
      
      historyContainer.innerHTML = historyHTML;
      
      // Add click listeners to history items
      historyContainer.querySelectorAll('.history-item').forEach(item => {
        item.addEventListener('click', () => {
          const index = parseInt(item.dataset.index);
          const historyItem = calculationHistory[index];
          if (historyItem) {
            currentOperand = historyItem.result;
            displayNeedsReset = true;
            updateDisplay();
          }
        });
      });
    }
    
    function clearHistory() {
      calculationHistory = [];
      updateHistoryDisplay();
    }

    // Memory functions
    function memoryClear() { memoryValue = 0; console.log("Memory Cleared"); }
    function memoryRecall() { currentOperand = String(memoryValue); displayNeedsReset = true; console.log("Memory Recalled:", memoryValue); }
    function memoryAdd() { memoryValue += parseFloat(currentOperand) || 0; console.log("Memory Add, M:", memoryValue); }
    function memorySubtract() { memoryValue -= parseFloat(currentOperand) || 0; console.log("Memory Subtract, M:", memoryValue); }
    function memoryStore() { memoryValue = parseFloat(currentOperand) || 0; console.log("Memory Store:", memoryValue); }


    // Function to handle calculator operations (shared by button clicks and keyboard)
    function handleCalculatorInput(action, value) {
      if (action === 'decimal') {
        inputDecimal();
      } else if (action === 'negate') {
        negate();
      } else if (action === 'percent') {
        percent();
      } else if (action === 'inverse') {
        inverse();
      } else if (action === 'square') {
        square();
      } else if (action === 'sqrt') {
        sqrt();
      } else if (action === 'clear') {
        clearAll();
      } else if (action === 'clear-entry') {
        clearEntry();
      } else if (action === 'backspace') {
        backspace();
      } else if (action === 'equals') {
        compute();
      } else if (['add', 'subtract', 'multiply', 'divide'].includes(action)) {
        chooseOperation(action);
      } else if (value !== undefined) { // Number button
        appendNumber(value);
      } else if (action === 'memory-clear') {
        memoryClear();
      } else if (action === 'memory-recall') {
        memoryRecall();
      } else if (action === 'memory-add') {
        memoryAdd();
      } else if (action === 'memory-subtract') {
        memorySubtract();
      } else if (action === 'memory-store') {
        memoryStore();
      } else if (action === 'history') {
        console.log("Calculator History button clicked (not implemented)");
      }
      updateDisplay();
      // Highlight active operator
      calculatorWindowElement.querySelectorAll('.calc-btn-operator').forEach(opBtn => {
        opBtn.classList.remove('active-operator');
        if (opBtn.dataset.action === operation) {
          opBtn.classList.add('active-operator');
        }
      });
    }

    // Button click event listeners
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const action = button.dataset.action;
        const value = button.dataset.value;
        handleCalculatorInput(action, value);
      });
    });

    // Keyboard event listener for numpad and calculator keys
    function handleKeydown(e) {
      // Only handle keyboard input when calculator window is focused/active
      if (!calculatorWindowElement.classList.contains('active')) {
        return;
      }

      let action = null;
      let value = null;

      switch(e.key) {
        // Numbers
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          value = e.key;
          break;
        
        // Operations
        case '+':
          action = 'add';
          break;
        case '-':
          action = 'subtract';
          break;
        case '*':
          action = 'multiply';
          break;
        case '/':
          action = 'divide';
          e.preventDefault(); // Prevent browser search
          break;
        
        // Special keys
        case 'Enter':
        case '=':
          action = 'equals';
          e.preventDefault();
          break;
        case '.':
        case ',': // Some keyboards use comma for decimal
          action = 'decimal';
          break;
        case 'Backspace':
          action = 'backspace';
          break;
        case 'Delete':
          action = 'clear-entry';
          break;
        case 'Escape':
          action = 'clear';
          break;
        case '%':
          action = 'percent';
          break;
        
        // Numpad specific keys
        case 'NumpadAdd':
          action = 'add';
          break;
        case 'NumpadSubtract':
          action = 'subtract';
          break;
        case 'NumpadMultiply':
          action = 'multiply';
          break;
        case 'NumpadDivide':
          action = 'divide';
          e.preventDefault();
          break;
        case 'NumpadEnter':
          action = 'equals';
          e.preventDefault();
          break;
        case 'NumpadDecimal':
          action = 'decimal';
          break;
        case 'Numpad0':
        case 'Numpad1':
        case 'Numpad2':
        case 'Numpad3':
        case 'Numpad4':
        case 'Numpad5':
        case 'Numpad6':
        case 'Numpad7':
        case 'Numpad8':
        case 'Numpad9':
          value = e.key.replace('Numpad', '');
          break;
        
        default:
          return; // Don't handle other keys
      }

      // Handle the input if we found a matching key
      if (action !== null || value !== null) {
        e.preventDefault();
        handleCalculatorInput(action, value);
        
        // Add visual feedback for pressed key
        const button = findButtonForInput(action, value);
        if (button) {
          button.classList.add('calc-btn-pressed');
          setTimeout(() => {
            button.classList.remove('calc-btn-pressed');
          }, 150);
        }
      }
    }

    // Helper function to find the corresponding button for visual feedback
    function findButtonForInput(action, value) {
      if (value !== null) {
        return calculatorWindowElement.querySelector(`[data-value="${value}"]`);
      }
      if (action !== null) {
        return calculatorWindowElement.querySelector(`[data-action="${action}"]`);
      }
      return null;
    }

    // Add keyboard event listener
    document.addEventListener('keydown', handleKeydown);

    // Also add a direct event listener to the calculator window for better focus handling
    calculatorWindowElement.addEventListener('keydown', handleKeydown);

    // Clean up event listeners when window is closed
    calculatorWindowElement.addEventListener('window-closed', () => {
      document.removeEventListener('keydown', handleKeydown);
      calculatorWindowElement.removeEventListener('keydown', handleKeydown);
    });

    // Setup pin button functionality to toggle history/memory panel
    const pinButton = calculatorWindowElement.querySelector('#calc-pin-btn');
    const historyMemoryPanel = calculatorWindowElement.querySelector('.calculator-history-memory-panel');
    
    if (pinButton && historyMemoryPanel) {
      // Initially hide the panel and adjust window size
      historyMemoryPanel.style.width = '0px';
      historyMemoryPanel.style.minWidth = '0px';
      historyMemoryPanel.style.overflow = 'hidden';
      historyMemoryPanel.style.transition = 'width 0.3s ease, min-width 0.3s ease';
      historyMemoryPanel.style.padding = '0';
      
      // Adjust calculator window width to exclude the panel
      const originalWidth = calculatorWindowElement.style.width || '520px';
      calculatorWindowElement.style.width = '310px'; // Width without panel
      
      let isPanelVisible = false;
      
      pinButton.addEventListener('click', () => {
        if (isPanelVisible) {
          // Hide panel
          historyMemoryPanel.style.width = '0px';
          historyMemoryPanel.style.minWidth = '0px';
          historyMemoryPanel.style.padding = '0';
          calculatorWindowElement.style.width = '310px';
          calculatorWindowElement.style.transition = 'width 0.3s ease, min-width 0.3s ease';
          pinButton.classList.remove('active');
          isPanelVisible = false;
        } else {
          // Show panel
            historyMemoryPanel.style.width = '195px';
            historyMemoryPanel.style.minWidth = '195px';
          historyMemoryPanel.style.padding = '0 12px 12px 12px';
          calculatorWindowElement.style.width = '520px';
          calculatorWindowElement.style.transition = 'width 0.3s ease, min-width 0.3s ease';
          pinButton.classList.add('active');
          isPanelVisible = true;
        }
      });
    }

    clearAll(); // Initialize display
    updateHistoryDisplay(); // Initialize history display
    
    // Setup tab switching for history/memory panel
    const historyTab = calculatorWindowElement.querySelector('[data-tab="history"]');
    const memoryTab = calculatorWindowElement.querySelector('[data-tab="memory"]');
    const historyContent = calculatorWindowElement.querySelector('.calc-history-content');
    const memoryContent = calculatorWindowElement.querySelector('.calc-memory-content');
    
    if (historyTab && memoryTab && historyContent && memoryContent) {
      historyTab.addEventListener('click', () => {
        historyTab.classList.add('active');
        memoryTab.classList.remove('active');
        historyContent.classList.remove('hidden');
        memoryContent.classList.add('hidden');
      });
      
      memoryTab.addEventListener('click', () => {
        memoryTab.classList.add('active');
        historyTab.classList.remove('active');
        memoryContent.classList.remove('hidden');
        historyContent.classList.add('hidden');
      });
    }
    
    // Add right-click context menu for history clearing
    if (historyContainer) {
      historyContainer.addEventListener('contextmenu', (e) => {
        e.preventDefault();
        if (calculationHistory.length > 0) {
          const confirmed = confirm('Clear all calculation history?');
          if (confirmed) {
            clearHistory();
          }
        }
      });
    }
  }

  function globalOnIconMouseMove(e) {
    const desktopArea = document.getElementById('desktop-area');
    if (desktopArea && (desktopArea.classList.contains('app-launcher-mode') || document.body.classList.contains('app-launcher-mode'))) {
      // Prevent drag selector in app launcher mode
      return;
    }
    if (!draggedIcon) return;
    e.preventDefault();
    if (!isActuallyDraggingIcon) {
      const dx = Math.abs(e.clientX - dragStartMouseX);
      const dy = Math.abs(e.clientY - dragStartMouseY);
      if (dx > DRAG_THRESHOLD || dy > DRAG_THRESHOLD) {
        isActuallyDraggingIcon = true;
        originalIconTransition = draggedIcon.style.transition; // Store original transition
        draggedIcon.style.transition = 'none'; // Disable transition for smooth dragging
        draggedIcon.style.zIndex = '15';
        draggedIcon.style.cursor = 'grabbing';
      }
    }
    if (isActuallyDraggingIcon) {
      if (selectedDesktopIcons.size > 1 && multiDragInitialPositions) {
        // Multi-drag: let icons follow the mouse freely, but validate on drop
        const dx = e.clientX - multiDragStartMouseX;
        const dy = e.clientY - multiDragStartMouseY;
        // Move all icons visually during drag (no clamping)
        multiDragInitialPositions.forEach(({ icon, left, top }) => {
          icon.style.position = 'absolute';
          icon.style.left = `${left + dx}px`;
          icon.style.top = `${top + dy}px`;
          icon.style.transition = 'none';
          icon.style.zIndex = '15';
        });
      } else {
        // Single icon: let it follow the mouse freely
        const desktopIconsContainer = document.querySelector('.desktop-icons');
        if (!desktopIconsContainer) return;
        const containerRect = desktopIconsContainer.getBoundingClientRect();
        let newLeft = e.clientX - containerRect.left - dragOffsetX + desktopIconsContainer.scrollLeft;
        let newTop = e.clientY - containerRect.top - dragOffsetY + desktopIconsContainer.scrollTop;
        draggedIcon.style.left = `${newLeft}px`;
        draggedIcon.style.top = `${newTop}px`;
      }
    }
  }

  function globalOnIconMouseUp(e) {
    const desktopArea = document.getElementById('desktop-area');
    if (desktopArea && (desktopArea.classList.contains('app-launcher-mode') || document.body.classList.contains('app-launcher-mode'))) {
      // Prevent drag selector in app launcher mode
      return;
    }
    if (!draggedIcon) {
      document.removeEventListener('mousemove', globalOnIconMouseMove);
      document.removeEventListener('mouseup', globalOnIconMouseUp);
      isActuallyDraggingIcon = false;
      return;
    }
    if (isActuallyDraggingIcon) {
      if (selectedDesktopIcons.size > 1 && multiDragInitialPositions) {
        // Multi-drag: snap all selected icons to grid (no stacking, no out-of-bounds)
        const dx = e.clientX - multiDragStartMouseX;
        const dy = e.clientY - multiDragStartMouseY;
        const occupied = {};
        // Mark all current slots as occupied except the ones being moved
        document.querySelectorAll('.desktop-icon').forEach(icon => {
          if (!selectedDesktopIcons.has(icon)) {
            const left = parseInt(icon.style.left, 10);
            const top = parseInt(icon.style.top, 10);
            const col = Math.round((left - GRID_GAP) / (GRID_CELL_WIDTH + GRID_GAP));
            const row = Math.round((top - GRID_GAP) / (GRID_CELL_HEIGHT + GRID_GAP));
            occupied[`${col},${row}`] = true;
          }
        });
        // --- Pre-validate all new positions ---
        let valid = true;
        const newPositions = [];
        const iconsContainer = multiDragInitialPositions[0]?.icon?.parentElement;
        const maxCol = Math.floor((iconsContainer.clientWidth - GRID_GAP - 1) / (GRID_CELL_WIDTH + GRID_GAP));
        const maxRow = Math.floor((iconsContainer.clientHeight - GRID_GAP - 1) / (GRID_CELL_HEIGHT + GRID_GAP));
        const groupOccupied = {};
        multiDragInitialPositions.forEach(({ icon, left, top }, idx) => {
          let newLeft = left + dx;
          let newTop = top + dy;
          let targetColumn = Math.max(0, Math.round((newLeft - GRID_GAP) / (GRID_CELL_WIDTH + GRID_GAP)));
          let targetRow = Math.max(0, Math.round((newTop - GRID_GAP) / (GRID_CELL_HEIGHT + GRID_GAP)));
          // Check bounds
          if (
            targetColumn < 0 ||
            targetRow < 0 ||
            targetColumn > maxCol ||
            targetRow > maxRow
          ) {
            valid = false;
          }
          // Check overlap with other icons (including in group)
          if (occupied[`${targetColumn},${targetRow}`] || groupOccupied[`${targetColumn},${targetRow}`]) {
            valid = false;
          }
          groupOccupied[`${targetColumn},${targetRow}`] = true;
          newPositions.push({ icon, targetColumn, targetRow });
        });
        if (!valid) {
          // Snap all to original positions
          if (multiDragOriginalPositions) {
            multiDragOriginalPositions.forEach(({ icon, left, top }) => {
              icon.style.left = left;
              icon.style.top = top;
              icon.style.transition = originalIconTransition || '';
              icon.style.zIndex = '';
              icon.style.cursor = '';
            });
          }
        } else {
          // Commit all new positions
          newPositions.forEach(({ icon, targetColumn, targetRow }) => {
            let targetSnappedLeft = GRID_GAP + targetColumn * (GRID_CELL_WIDTH + GRID_GAP);
            let targetSnappedTop = GRID_GAP + targetRow * (GRID_CELL_HEIGHT + GRID_GAP);
            targetSnappedLeft = Math.max(GRID_GAP, Math.min(targetSnappedLeft, iconsContainer.clientWidth - icon.offsetWidth - GRID_GAP));
            targetSnappedTop = Math.max(GRID_GAP, Math.min(targetSnappedTop, iconsContainer.clientHeight - icon.offsetHeight - GRID_GAP));
            icon.style.left = `${targetSnappedLeft}px`;
            icon.style.top = `${targetSnappedTop}px`;
            icon.style.transition = originalIconTransition || '';
            icon.style.zIndex = '';
            icon.style.cursor = '';
          });
        }
      } else {
        // Single icon snap (no stacking)
        const currentRawLeft = parseFloat(draggedIcon.style.left);
        const currentRawTop = parseFloat(draggedIcon.style.top);
        let targetColumn = Math.max(0, Math.round((currentRawLeft - GRID_GAP) / (GRID_CELL_WIDTH + GRID_GAP)));
        let targetRow = Math.max(0, Math.round((currentRawTop - GRID_GAP) / (GRID_CELL_HEIGHT + GRID_GAP)));
        const iconsContainer = draggedIcon.parentElement;
        // Mark all current slots as occupied except the dragged icon
        const occupied = {};
        document.querySelectorAll('.desktop-icon').forEach(icon => {
          if (icon !== draggedIcon) {
            const left = parseInt(icon.style.left, 10);
            const top = parseInt(icon.style.top, 10);
            const col = Math.round((left - GRID_GAP) / (GRID_CELL_WIDTH + GRID_GAP));
            const row = Math.round((top - GRID_GAP) / (GRID_CELL_HEIGHT + GRID_GAP));
            occupied[`${col},${row}`] = true;
          }
        });
        const maxCol = Math.floor((iconsContainer.clientWidth - GRID_GAP - 1) / (GRID_CELL_WIDTH + GRID_GAP));
        const maxRow = Math.floor((iconsContainer.clientHeight - GRID_GAP - 1) / (GRID_CELL_HEIGHT + GRID_GAP));
        // If slot is occupied or out of bounds, snap back to original position
        if (
          occupied[`${targetColumn},${targetRow}`] ||
          targetColumn < 0 ||
          targetRow < 0 ||
          targetColumn > maxCol ||
          targetRow > maxRow
        ) {
          if (iconOriginalLeft !== null && iconOriginalTop !== null) {
            draggedIcon.style.left = iconOriginalLeft;
            draggedIcon.style.top = iconOriginalTop;
          }
        } else {
          let targetSnappedLeft = GRID_GAP + targetColumn * (GRID_CELL_WIDTH + GRID_GAP);
          let targetSnappedTop = GRID_GAP + targetRow * (GRID_CELL_HEIGHT + GRID_GAP);
          targetSnappedLeft = Math.max(GRID_GAP, Math.min(targetSnappedLeft, iconsContainer.clientWidth - draggedIcon.offsetWidth - GRID_GAP));
          targetSnappedTop = Math.max(GRID_GAP, Math.min(targetSnappedTop, iconsContainer.clientHeight - draggedIcon.offsetHeight - GRID_GAP));
          draggedIcon.style.left = `${targetSnappedLeft}px`;
          draggedIcon.style.top = `${targetSnappedTop}px`;
        }
        draggedIcon.style.transition = originalIconTransition || '';
        draggedIcon.style.zIndex = '';
        draggedIcon.style.cursor = '';
      }
    }
    draggedIcon = null;
    isActuallyDraggingIcon = false;
    multiDragInitialPositions = null;
    iconOriginalLeft = null;
    iconOriginalTop = null;
    multiDragOriginalPositions = null;
    document.removeEventListener('mousemove', globalOnIconMouseMove);
    document.removeEventListener('mouseup', globalOnIconMouseUp);
  }

  if (desktopArea && dragSelector) {
    desktopArea.addEventListener('mousedown', (e) => {
      // --- FIX: Allow text selection/copy in email-content ---
      if (e.target.closest('.email-content') || e.target.closest('.email-content-section')) return;
      // Prevent drag selector in app-launcher-mode or easy-mode
      if (
        desktopArea.classList.contains('app-launcher-mode') ||
        document.body.classList.contains('app-launcher-mode') ||
        desktopArea.classList.contains('easy-mode') ||
        document.body.classList.contains('easy-mode')
      ) return;
      // Allow both left and right click to start drag selector
      if (e.button !== 0 && e.button !== 2) return;
      // Prevent drag selector in settings app
      if (e.target.closest('.settings-app-window')) return;
      if (e.target.closest('.desktop-icon') ||
        e.target.closest('.window') ||
        e.target.closest('.taskbar') ||
        e.target.closest('.start-menu') ||
        e.target.closest('.sidebar-widgets')) {
        if (e.target.closest('.desktop-icon') && !e.target.closest('.desktop-icon.selected')) {
          clearIconSelection();
        }
        return;
      }
      desktopArea.appendChild(dragSelector);
      isDraggingSelector = true;
      dragSelector.classList.remove('hidden');
      const desktopRect = desktopArea.getBoundingClientRect();
      dragSelectorStartX = e.clientX - desktopRect.left + desktopArea.scrollLeft;
      dragSelectorStartY = e.clientY - desktopRect.top + desktopArea.scrollTop;
      dragSelector.style.left = `${dragSelectorStartX}px`;
      dragSelector.style.top = `${dragSelectorStartY}px`;
      dragSelector.style.width = '0px';
      dragSelector.style.height = '0px';
      clearIconSelection();
      // If right click, prevent context menu
      if (e.button === 2) {
        e.preventDefault();
        hideContextMenu && hideContextMenu();
      }
      e.preventDefault();
    });
    document.addEventListener('mousemove', (e) => {
      if (!isDraggingSelector) return;
      if (dragSelector.parentElement !== desktopArea) return;
      const desktopRect = desktopArea.getBoundingClientRect();
      let currentX = e.clientX - desktopRect.left + desktopArea.scrollLeft;
      let currentY = e.clientY - desktopRect.top + desktopArea.scrollTop;
      const newLeft = Math.min(currentX, dragSelectorStartX);
      const newTop = Math.min(currentY, dragSelectorStartY);
      const newWidth = Math.abs(currentX - dragSelectorStartX);
      const newHeight = Math.abs(currentY - dragSelectorStartY);
      dragSelector.style.left = `${newLeft}px`;
      dragSelector.style.top = `${newTop}px`;
      dragSelector.style.width = `${newWidth}px`;
      dragSelector.style.height = `${newHeight}px`;
      updateSelectedIcons();
    });
  }
  document.addEventListener('mouseup', (e) => {
    if (isDraggingSelector) {
      isDraggingSelector = false;
      dragSelector.classList.add('hidden');
      if (selectedDesktopIcons.size === 0) clearIconSelection();
    }
    if (isDraggingFileSelector) {
      isDraggingFileSelector = false;
      if (fileExplorerContentArea && fileExplorerContentArea.contains(dragSelector)) {
        dragSelector.classList.add('hidden');
        if (desktopArea) desktopArea.appendChild(dragSelector);
      }
    }
  });


  function hideContextMenu() {
    if (contextMenu) contextMenu.classList.add('hidden');
  }
  //Arg Right Click menu for desktop, file explorer, and taskbar and icons
  // --- Global Context Menu for Text Selection (works everywhere, including all inputs, textareas, compose, and email-content) ---
  (function () {
    // Save original executeContextMenuAction
    const _originalExecuteContextMenuAction = executeContextMenuAction;
    // Patch global contextmenu
    document.addEventListener('contextmenu', function (e) {
      const target = e.target;
      let hasSelection = false;
      let isTextInput = false;
      // Check for text selection in input, textarea, contenteditable, or normal text
      if ((target.tagName === 'INPUT' && !target.readOnly && !target.disabled) ||
        (target.tagName === 'TEXTAREA' && !target.readOnly && !target.disabled)) {
        isTextInput = true;
        hasSelection = target.selectionStart !== target.selectionEnd;
      } else if (target.isContentEditable && !target.readOnly && !target.disabled) {
        isTextInput = true;
        const sel = window.getSelection();
        hasSelection = sel && sel.rangeCount > 0 && !sel.getRangeAt(0).collapsed && target.contains(sel.anchorNode);
      } else {
        // Check for normal text selection
        const sel = window.getSelection();
        hasSelection = sel && sel.rangeCount > 0 && !sel.getRangeAt(0).collapsed && sel.toString().trim().length > 0;
      }
      if (hasSelection || isTextInput) {
        e.preventDefault();
        hideContextMenu && hideContextMenu();
        currentContextMenuTarget = target;
        const menuItems = [];
        // Only enable Cut/Delete for editable fields
        const hasTextSelection = (
          (isTextInput && target.selectionStart !== target.selectionEnd) ||
          (target.isContentEditable && window.getSelection && !window.getSelection().isCollapsed) ||
          (!isTextInput && !target.isContentEditable && window.getSelection && window.getSelection().toString().length > 0)
        );

        menuItems.push({ label: 'Cut', action: 'text-cut', icon: 'fa-scissors', disabled: !isTextInput || !hasTextSelection });
        menuItems.push({ label: 'Copy', action: 'text-copy', icon: 'fa-copy', disabled: !hasTextSelection });
        menuItems.push({ label: 'Paste', action: 'text-paste', icon: 'fa-clipboard', disabled: false });
        menuItems.push({ label: 'Delete', action: 'text-delete', icon: 'fa-trash', disabled: !isTextInput || !hasTextSelection });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Select All', action: 'text-select-all', icon: 'fa-i-cursor', disabled: false });
        populateContextMenu(menuItems, e.clientX, e.clientY);
      }
    }, true);
    // Patch executeContextMenuAction
    async function tryClipboardWrite(text, target, actionType) {
      console.log('tryClipboardWrite called', text, target, actionType);
      try {
        if (typeof window.focus === 'function') window.focus();
        if (target && typeof target.focus === 'function') target.focus();
        await new Promise(resolve => setTimeout(resolve, 0));
        await navigator.clipboard.writeText(text);
        console.log('Clipboard API writeText succeeded');
        return true;
      } catch (err) {
        console.warn('Clipboard API writeText failed', err);
        // Fallback to execCommand
        try {
          if (target && typeof target.focus === 'function') target.focus();
          if (actionType === 'cut' || actionType === 'copy') {
            if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
              const start = target.selectionStart;
              const end = target.selectionEnd;
              if (start !== end) {
                target.setSelectionRange(start, end);
              }
            } else if (target.isContentEditable) {
              const sel = window.getSelection();
              if (sel && sel.rangeCount === 0) {
                const range = document.createRange();
                range.selectNodeContents(target);
                sel.removeAllRanges();
                sel.addRange(range);
              }
            }
            const success = document.execCommand(actionType);
            console.log('execCommand', actionType, 'result:', success);
            if (!success) throw new Error('execCommand failed');
            return true;
          }
        } catch (fallbackErr) {
          console.warn('execCommand fallback failed', fallbackErr);
          return false;
        }
        return false;
      }
    }
    async function tryClipboardRead(target) {
      try {
        if (typeof window.focus === 'function') window.focus();
        if (target && typeof target.focus === 'function') target.focus();
        await new Promise(resolve => setTimeout(resolve, 0));
        return await navigator.clipboard.readText();
      } catch (err) {
        // Fallback to execCommand (paste)
        try {
          if (target && typeof target.focus === 'function') target.focus();
          const success = document.execCommand('paste');
          if (!success) throw new Error('execCommand paste failed');
          // For security, browsers may not return pasted text
          // User may need to use Ctrl+V
          return '';
        } catch (fallbackErr) {
          alert('Clipboard access is not available. Please use Ctrl+V.');
          return '';
        }
      }
    }
    window.executeContextMenuAction = async function (action) {
      // --- OPEN APP HANDLER ---
      if (action === 'open-app') {
        // For pinned-only taskbar icon
        if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('taskbar-app-icon') && currentContextMenuTarget.classList.contains('pinned-only')) {
          const appName = currentContextMenuTarget.getAttribute('data-app');
          const details = getAppIconDetails(appName);
          // Try to focus/restore if already open
          const openWin = Object.values(openWindows).find(w => w.name === appName && w.element);
          if (openWin && openWin.element) {
            if (openWin.element.classList.contains('minimized')) {
              if (typeof toggleMinimizeWindow === 'function') toggleMinimizeWindow(openWin.element, openWin.taskbarIcon);
            } else {
              if (typeof makeWindowActive === 'function') makeWindowActive(openWin.element);
            }
          } else {
            if (typeof openApp === 'function') openApp(appName, appName.charAt(0).toUpperCase() + appName.slice(1).replace(/-/g, ' '), details.iconClass, details.iconBgClass);
          }
          hideContextMenu();
          return;
        }

        // For app-grid-item (start menu/app launcher)
        if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('app-grid-item')) {
          const appName = currentContextMenuTarget.getAttribute('data-app');
          const appTitle = currentContextMenuTarget.getAttribute('data-app-title') || currentContextMenuTarget.querySelector('span')?.textContent || appName;
          const details = getAppIconDetails(appName);

          // Try to focus/restore if already open
          const openWin = Object.values(openWindows).find(w => w.name === appName && w.element);
          if (openWin && openWin.element) {
            if (openWin.element.classList.contains('minimized')) {
              if (typeof toggleMinimizeWindow === 'function') toggleMinimizeWindow(openWin.element, openWin.taskbarIcon);
            } else {
              if (typeof makeWindowActive === 'function') makeWindowActive(openWin.element);
            }
          } else {
            if (typeof openApp === 'function') openApp(appName, appTitle, details.iconClass, details.iconBgClass, this);
          }
          if (typeof hideContextMenu === 'function') hideContextMenu();
          // Optionally close the start menu if you want:
          if (typeof startMenu !== 'undefined' && startMenu) startMenu.style.display = 'none';
          return;
        }
      }

      // --- UNIVERSAL PIN/UNPIN HANDLER ---
      if (action === 'pin-to-taskbar' || action === 'unpin-taskbar') {
        let appName = null;
        if (currentContextMenuTarget) {
          appName = currentContextMenuTarget.getAttribute('data-app');
          // If taskbar icon, try data-window-id to get app name from openWindows
          if (!appName && currentContextMenuTarget.classList.contains('taskbar-app-icon')) {
            const winId = currentContextMenuTarget.getAttribute('data-window-id');
            if (winId && openWindows[winId]) appName = openWindows[winId].name;
          }
          // If still not found, try data-app-name on pinned-only icon
          if (!appName && currentContextMenuTarget.classList.contains('pinned-only')) {
            appName = currentContextMenuTarget.getAttribute('data-app');
          }
        }
        if (appName) {
          if (action === 'pin-to-taskbar') {
            pinAppToTaskbar(appName);
            if (typeof showShortTopNotification === 'function') showShortTopNotification('Pinned to Taskbar');
          } else {
            unpinAppFromTaskbar(appName);
            if (typeof showShortTopNotification === 'function') showShortTopNotification('Unpinned from Taskbar');
          }
        }
        if (typeof hideContextMenu === 'function') hideContextMenu();
        return;
      }

      console.log('[Patched] executeContextMenuAction called with:', action);
      try {
        console.log('Action:', action, 'Target:', currentContextMenuTarget);
        if (!currentContextMenuTarget) {
          console.warn('No currentContextMenuTarget!');
          return _originalExecuteContextMenuAction.call(this, action);
        }
        const target = currentContextMenuTarget;
        if (typeof target.focus === 'function') target.focus();
        if (document.activeElement !== target) target.focus();
        window.focus && window.focus();

        // --- ADD THIS ARRAY AT THE TOP OF THE FUNCTION ---
        const allStartMenuStyles = [
          'start-menu-style-default',
          'start-menu-style-default-apps-only',
          'start-menu-style-windows11',
          'start-menu-list-style',
          'start-menu-apps-only',
          'start-menu-style-apps-list-only',
          'start-menu-style-app-launcher'
        ];
        switch (action) {
          case 'text-cut': {
            console.log('[ContextMenu] text-cut triggered');
            if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
              const start = target.selectionStart;
              const end = target.selectionEnd;
              console.log('start:', start, 'end:', end, 'typeof start:', typeof start, 'typeof end:', typeof end);
              if (start !== end) {
                const selectedText = target.value.slice(start, end);
                console.log('About to call tryClipboardWrite with:', selectedText, target, 'cut');
                const ok = await tryClipboardWrite(selectedText, target, 'cut');
                if (ok) {
                  target.value = target.value.slice(0, start) + target.value.slice(end);
                  target.setSelectionRange(start, start);
                  showShortTopNotification('Cutted');
                } else {
                  alert('Cut failed: Clipboard could not be updated.');
                }
              }
            } else if (target.isContentEditable) {
              const sel = window.getSelection();
              if (sel && !sel.isCollapsed) {
                const selectedText = sel.toString();
                console.log('About to call tryClipboardWrite with:', selectedText, target, 'cut');
                const ok = await tryClipboardWrite(selectedText, target, 'cut');
                if (ok) {
                  sel.deleteFromDocument();
                  showShortTopNotification('Cutted');
                } else alert('Cut failed: Clipboard could not be updated.');
              }
            } else {
              showShortTopNotification('Cannot cut/delete non-editable text');
            }
            break;
          }
          case 'text-copy': {
            console.log('[ContextMenu] text-copy triggered');
            if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
              const start = target.selectionStart;
              const end = target.selectionEnd;
              console.log('start:', start, 'end:', end, 'typeof start:', typeof start, 'typeof end:', typeof end);
              if (start !== end) {
                const selectedText = target.value.slice(start, end);
                console.log('About to call tryClipboardWrite with:', selectedText, target, 'copy');
                const ok = await tryClipboardWrite(selectedText, target, 'copy');
                if (ok) showShortTopNotification('Copied');
                else alert('Copy failed: Clipboard could not be updated.');
              }
            } else if (target.isContentEditable) {
              const sel = window.getSelection();
              if (sel && !sel.isCollapsed) {
                const selectedText = sel.toString();
                console.log('About to call tryClipboardWrite with:', selectedText, target, 'copy');
                const ok = await tryClipboardWrite(selectedText, target, 'copy');
                if (ok) showShortTopNotification('Copied');
                else alert('Copy failed: Clipboard could not be updated.');
              }
            } else {
              // Generic selection
              const sel = window.getSelection();
              if (sel && !sel.isCollapsed && sel.toString().trim().length > 0) {
                try {
                  await navigator.clipboard.writeText(sel.toString());
                  showShortTopNotification('Copied');
                } catch (err) {
                  alert('Copy failed: Clipboard could not be updated.');
                }
              }
            }
            break;
          }
          case 'text-paste': {
            console.log('[ContextMenu] text-paste triggered');
            if (navigator.clipboard && navigator.clipboard.readText) {
              try {
                const text = await navigator.clipboard.readText();
                console.log('Clipboard readText:', text);
                if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
                  const start = target.selectionStart;
                  const end = target.selectionEnd;
                  const val = target.value;
                  target.value = val.slice(0, start) + text + val.slice(end);
                  target.setSelectionRange(start + text.length, start + text.length);
                } else if (target.isContentEditable) {
                  document.execCommand('insertText', false, text);
                } else {
                  showShortTopNotification('Cannot paste into non-editable text');
                }
              } catch (err) {
                console.error('Paste failed:', err);
                alert('Paste failed: Clipboard could not be read.');
              }
            } else {
              alert('Paste failed: Clipboard could not be read.');
            }
            break;
          }
          case 'text-delete': {
            console.log('[ContextMenu] text-delete triggered');
            if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
              const start = target.selectionStart;
              const end = target.selectionEnd;
              console.log('start:', start, 'end:', end, 'typeof start:', typeof start, 'typeof end:', typeof end);
              if (start !== end) {
                const val = target.value;
                target.value = val.slice(0, start) + val.slice(end);
                target.setSelectionRange(start, start);
              }
            } else if (target.isContentEditable) {
              const sel = window.getSelection();
              if (sel && !sel.isCollapsed) sel.deleteFromDocument();
            } else {
              showShortTopNotification('Cannot cut/delete non-editable text');
            }
            break;
          }
          case 'text-select-all': {
            console.log('[ContextMenu] text-select-all triggered');
            if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
              target.focus();
              target.select();
              console.log('After select():', target.selectionStart, target.selectionEnd, target.value.length);
            } else if (target.isContentEditable) {
              const range = document.createRange();
              range.selectNodeContents(target);
              const sel = window.getSelection();
              sel.removeAllRanges();
              sel.addRange(range);
              console.log('After selectNodeContents:', sel.toString());
            } else {
              const sel = window.getSelection();
              sel.removeAllRanges();
              const range = document.createRange();
              // Try to select all text in the parent element, fallback to body
              let container = target.closest('.email-content, .email-content-section, .window-main-content, .window-app-content, body');
              if (!container) container = document.body;
              range.selectNodeContents(container);
              sel.addRange(range);
              showShortTopNotification('All text selected');
            }
            break;
          }
          case 'open-music-player': {
            const volumePanel = document.getElementById('volume-panel');
            if (volumePanel) {
              const musicPanel = volumePanel.querySelector('.music-panel-box');
              if (window._playlistPanelRemoveTimeout) {
                clearTimeout(window._playlistPanelRemoveTimeout);
                window._playlistPanelRemoveTimeout = null;
              }
              // Remove all playlist panels immediately
              const playlistPanels = volumePanel.querySelectorAll('.playlist-panel-slide');
              const isMusicVisible = musicPanel && getComputedStyle(musicPanel).display !== 'none';
              const isPlaylistVisible = playlistPanels.length > 0;
              if (isMusicVisible || isPlaylistVisible) {
                // Hide both
                playlistPanels.forEach(panel => {
                  if (panel.parentNode) panel.parentNode.removeChild(panel);
                });
                if (musicPanel) musicPanel.style.display = 'none';
              } else {
                // Both are hidden, show music player
                if (musicPanel) musicPanel.style.display = '';
              }
            }
            break;
          }
          case 'taskbar-mute': {
            // Toggle mute state
            const volumeBtn = document.getElementById('volume-btn');
            const volumeSlider = document.getElementById('browser-volume-slider');
            if (volumeBtn && volumeSlider) {
              if (!isMuted) {
                // Muting
                previousVolume = volumeSlider.value;
                volumeSlider.value = 0;
                volumeSlider.dispatchEvent(new Event('input', { bubbles: true }));
                updateVolumeUI(0);
              } else {
                // Unmuting
                volumeSlider.value = previousVolume;
                volumeSlider.dispatchEvent(new Event('input', { bubbles: true }));
                updateVolumeUI(parseInt(previousVolume, 10));
              }
            }
            break;
          }
          case 'mute-notifications': {
            // Toggle notifications mute state
            isNotificationsMuted = !isNotificationsMuted;
            // Update notifications button icon
            const notificationsBtn = document.getElementById('notifications-btn');
            if (notificationsBtn) {
              const icon = notificationsBtn.querySelector('i');
              if (icon) {
                if (isNotificationsMuted) {
                  icon.classList.remove('fa-bell');
                  icon.classList.add('fa-bell-slash');
                } else {
                  icon.classList.remove('fa-bell-slash');
                  icon.classList.add('fa-bell');
                }
              }
            }
            // Optionally, you can show a toast or feedback here
            break;
          }
          case 'show-only-1-notification':
            desktopNotificationMode = 'one';
            showShortTopNotification('Desktop notifications: Only 1');
            break;
          case 'show-only-3-notifications':
            desktopNotificationMode = 'three';
            showShortTopNotification('Desktop notifications: Only 3');
            break;
          case 'show-all-notifications':
            desktopNotificationMode = 'all';
            showShortTopNotification('Desktop notifications: All');
            break;
          case 'clear-all-notifications': {
            clearAllNotifications();
            break;
          }
          case 'show-wallet-icon':
            window.walletDisplayMode = 'icon';
            window.updateWalletBtnDisplay && window.updateWalletBtnDisplay();
            break;
          case 'show-account-balance':
            window.walletDisplayMode = 'balance';
            window.updateWalletBtnDisplay && window.updateWalletBtnDisplay();
            break;
          // --- START MENU STYLE CASES: REPLACE ANY OLD/NESTED ONES WITH THESE ---
          case 'start-menu-style-default':
            if (startMenu) {
              startMenu.classList.remove(...allStartMenuStyles);
              startMenu.classList.add('start-menu-style-default');
              startMenuAppSortMode = 'category';
              populateStartMenuApps();
              startMenu.style.display = 'block';
            }
            break;
          case 'start-menu-style-default-apps-only':
            if (startMenu) {
              startMenu.classList.remove(...allStartMenuStyles);
              startMenu.classList.add('start-menu-style-default-apps-only');
              startMenuAppSortMode = 'category';
              populateStartMenuApps();
              startMenu.style.display = 'block';
            }
            break;
          case 'start-menu-style-windows11':
            if (startMenu) {
              startMenu.classList.remove(...allStartMenuStyles);
              startMenu.classList.add('start-menu-style-windows11');
              startMenuAppSortMode = 'alphabet';
              populateStartMenuApps();
              startMenu.style.display = 'block';
            }
            break;
          case 'start-menu-style-apps-list-with-sidebar':
            if (startMenu) {
              startMenu.classList.remove(...allStartMenuStyles);
              startMenu.classList.add('start-menu-list-style');
              startMenuAppSortMode = 'category';
              populateStartMenuApps();
              startMenu.style.display = 'block';
            }
            break;
          case 'start-menu-style-apps-list-only':
            if (startMenu) {
              startMenu.classList.remove(...allStartMenuStyles);
              startMenu.classList.add('start-menu-style-apps-list-only');
              startMenuAppSortMode = 'category';
              populateStartMenuApps();
              startMenu.style.display = 'block';
            }
            break;
          case 'start-menu-style-app-launcher':
            if (startMenu) {
              startMenu.classList.remove(...allStartMenuStyles);
              startMenu.classList.add('start-menu-style-app-launcher');
              closeStartMenuAnimated();
            }

            if (startMenu) {
              startMenu.className = startMenu.className
                .split(' ')
                .filter(cls => !cls.startsWith('start-menu-style-') && cls !== 'start-menu-apps-only' && cls !== 'start-menu-list-style')
                .join(' ');
              startMenu.classList.add('start-menu-style-app-launcher');
              closeStartMenuAnimated();
            }
            break;
          case 'open-settings':
            openApp('settings', 'Settings', 'fa-cog', 'green');
            break;
          case 'uninstall-app': {
            if (
              currentContextMenuTarget &&
              (currentContextMenuTarget.classList.contains('app-grid-item') ||
                currentContextMenuTarget.classList.contains('app-launcher-app'))
            ) {
              const appName = currentContextMenuTarget.getAttribute('data-app');
              const appTitle = currentContextMenuTarget.getAttribute('data-app-title') || currentContextMenuTarget.querySelector('span')?.textContent || appName;
              showConfirmDialog({
                title: 'Uninstall App',
                message: `Are you sure you want to uninstall <b>${appTitle}</b>? This cannot be undone!`,
                iconClass: 'fa-trash',
                okText: 'Uninstall',
                cancelText: 'Cancel',
                style: 'desktop'
              }).then(confirmed => {
                if (confirmed) {
                  // Remove from startMenuApps array
                  if (typeof startMenuApps !== 'undefined') {
                    const idx = startMenuApps.findIndex(a => a.id === appName || a.name === appName || (a.name && a.name.toLowerCase().replace(/\\s+/g, '-') === appName));
                    if (idx !== -1) {
                      startMenuApps.splice(idx, 1);
                    }
                  }
                  // Remove from DOM if present
                  if (currentContextMenuTarget && currentContextMenuTarget.parentElement) {
                    currentContextMenuTarget.parentElement.removeChild(currentContextMenuTarget);
                  }
                  // Remove from desktop if present
                  const desktopIcon = document.querySelector('.desktop-icon[data-app=\"' + appName + '\"]');
                  if (desktopIcon && desktopIcon.parentElement) {
                    desktopIcon.parentElement.removeChild(desktopIcon);
                  }
                  // Remove from taskbar if pinned
                  unpinAppFromTaskbar(appName);
                  // Refresh start menu UI
                  if (typeof populateStartMenuApps === 'function') populateStartMenuApps();
                  if (typeof showShortTopNotification === 'function') showShortTopNotification('App uninstalled');
                }
                if (typeof hideContextMenu === 'function') hideContextMenu();
              });
            }
            break;
          }
          case 'sort-name': {
            // Only handle if desktop area is context
            const desktopIconsContainer = document.querySelector('.desktop-icons');
            if (desktopIconsContainer && (currentContextMenuTarget === desktopIconsContainer || currentContextMenuTarget.classList.contains('desktop-icons'))) {
              const icons = Array.from(desktopIconsContainer.querySelectorAll('.desktop-icon'));
              icons.sort((a, b) => {
                const aName = a.querySelector('span')?.textContent?.toLowerCase() || '';
                const bName = b.querySelector('span')?.textContent?.toLowerCase() || '';
                return aName.localeCompare(bName);
              });
              icons.forEach(icon => desktopIconsContainer.appendChild(icon));
              saveCurrentDesktopIconOrder();
              if (typeof showShortTopNotification === 'function') showShortTopNotification('Sorted by name');
              initializeDesktopIconPositions(); // Always re-layout
            } else {
              _originalExecuteContextMenuAction.call(this, action);
            }
            break;
          }
          case 'sort-date': {
            const desktopIconsContainer = document.querySelector('.desktop-icons');
            if (desktopIconsContainer && (currentContextMenuTarget === desktopIconsContainer || currentContextMenuTarget.classList.contains('desktop-icons'))) {
              const icons = Array.from(desktopIconsContainer.querySelectorAll('.desktop-icon'));
              icons.sort((a, b) => {
                // Use data-created attribute if present, else fallback to DOM order
                const aDate = a.getAttribute('data-created') || a.dataset.created || '';
                const bDate = b.getAttribute('data-created') || b.dataset.created || '';
                if (aDate && bDate) return aDate.localeCompare(bDate);
                return 0; // fallback: keep DOM order
              });
              icons.forEach(icon => desktopIconsContainer.appendChild(icon));
              saveCurrentDesktopIconOrder();
              if (typeof showShortTopNotification === 'function') showShortTopNotification('Sorted by date');
              initializeDesktopIconPositions(); // Always re-layout
            } else {
              _originalExecuteContextMenuAction.call(this, action);
            }
            break;
          }
          case 'sort-type': {
            const desktopIconsContainer = document.querySelector('.desktop-icons');
            if (desktopIconsContainer && (currentContextMenuTarget === desktopIconsContainer || currentContextMenuTarget.classList.contains('desktop-icons'))) {
              // Get app ids from startMenuApps
              const appIds = (window.startMenuApps || []).map(app => app.id);
              const icons = Array.from(desktopIconsContainer.querySelectorAll('.desktop-icon'));
              // Apps first, then files, both alphabetically
              const isApp = icon => appIds.includes(icon.getAttribute('data-app'));
              icons.sort((a, b) => {
                const aIsApp = isApp(a);
                const bIsApp = isApp(b);
                if (aIsApp && !bIsApp) return -1;
                if (!aIsApp && bIsApp) return 1;
                // Both same type, sort by name
                const aName = a.querySelector('span')?.textContent?.toLowerCase() || '';
                const bName = b.querySelector('span')?.textContent?.toLowerCase() || '';
                return aName.localeCompare(bName);
              });
              icons.forEach(icon => desktopIconsContainer.appendChild(icon));
              saveCurrentDesktopIconOrder();
              if (typeof showShortTopNotification === 'function') showShortTopNotification('Sorted by type (apps first)');
              initializeDesktopIconPositions(); // Always re-layout
            } else {
              _originalExecuteContextMenuAction.call(this, action);
            }
            break;
          }
          case 'add-to-desktop':
            if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('app-grid-item')) {
              const appName = currentContextMenuTarget.getAttribute('data-app');
              const appTitle = currentContextMenuTarget.getAttribute('data-app-title') || currentContextMenuTarget.querySelector('span')?.textContent || appName;
              // Get icon details from startMenuApps, fallback to getAppIconDetails
              let details = { iconClass: 'fa-window-maximize', iconBgClass: 'gray-icon' };
              if (typeof startMenuApps !== 'undefined') {
                const appObj = startMenuApps.find(a =>
                  a.id === appName ||
                  a.name === appName ||
                  (a.name && a.name.toLowerCase().replace(/\s+/g, '-') === appName)
                );
                if (appObj) {
                  details.iconClass = appObj.iconClass || details.iconClass;
                  details.iconBgClass = appObj.iconBgClass || details.iconBgClass;
                } else {
                  details = getAppIconDetails(appName);
                }
              } else {
                details = getAppIconDetails(appName);
              }
              const desktopIconsContainer = document.querySelector('.desktop-icons');
              if (!desktopIconsContainer) {
                if (typeof showShortTopNotification === 'function') showShortTopNotification('Desktop not found');
                break;
              }
              // Robust check: if already on desktop, do not add
              if (desktopIconsContainer.querySelector('.desktop-icon[data-app="' + appName + '"]')) {
                if (typeof showShortTopNotification === 'function') showShortTopNotification('Already on Desktop');
                break;
              }
              const icon = document.createElement('div');
              icon.className = 'desktop-icon';
              icon.setAttribute('data-app', appName);
              icon.setAttribute('data-created', new Date().toISOString()); // Set creation date
              icon.innerHTML = `
                <div class="icon-container ${details.iconBgClass}"><i class="fas ${details.iconClass}"></i></div>
                <span>${appTitle}</span>
              `;
              // --- Find first available grid slot ---
              if (window.innerWidth > 1023) {
                // Use grid logic
                const leftOffset = GRID_GAP;
                const topOffset = GRID_GAP;
                const colWidth = GRID_CELL_WIDTH + GRID_GAP;
                const iconHeight = GRID_CELL_HEIGHT;
                const verticalGap = GRID_GAP;
                const taskbar = document.querySelector('.taskbar');
                const taskbarHeight = taskbar ? taskbar.offsetHeight : 0;
                const availableHeight = window.innerHeight - taskbarHeight - 50; // 30px bottom margin
                const maxRows = Math.max(1, Math.floor((availableHeight - topOffset) / (iconHeight + verticalGap)));
                const maxCols = Math.max(1, Math.floor((desktopIconsContainer.clientWidth - leftOffset) / colWidth));
                // Mark occupied slots
                const occupied = {};
                desktopIconsContainer.querySelectorAll('.desktop-icon').forEach(existingIcon => {
                  const left = parseInt(existingIcon.style.left, 10);
                  const top = parseInt(existingIcon.style.top, 10);
                  if (!isNaN(left) && !isNaN(top)) {
                    const col = Math.round((left - leftOffset) / colWidth);
                    const row = Math.round((top - topOffset) / (iconHeight + verticalGap));
                    occupied[`${col},${row}`] = true;
                  }
                });
                // Find first free slot (column by column, then row)
                let found = false;
                let targetCol = 0, targetRow = 0;
                outer: for (let col = 0; col < maxCols; col++) {
                  for (let row = 0; row < maxRows; row++) {
                    if (!occupied[`${col},${row}`]) {
                      targetCol = col;
                      targetRow = row;
                      found = true;
                      break outer;
                    }
                  }
                }
                // Place icon at found slot
                const iconLeft = leftOffset + targetCol * colWidth;
                const iconTop = topOffset + targetRow * (iconHeight + verticalGap);
                icon.style.position = 'absolute';
                icon.style.left = iconLeft + 'px';
                icon.style.top = iconTop + 'px';
                icon.setAttribute('data-absolute', 'true');
              }
              desktopIconsContainer.appendChild(icon);
              setupDesktopIcon(icon);
              if (typeof showShortTopNotification === 'function') showShortTopNotification('Added to Desktop');
              // Save positions if using absolute
              if (window.innerWidth > 1023 && saveDesktopIconPositions && saveDesktopIconPositions());
            }
            break;
          case 'remove-from-desktop':
            if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('desktop-icon')) {
              const appName = currentContextMenuTarget.getAttribute('data-app');
              // Remove the icon from the DOM
              const parent = currentContextMenuTarget.parentElement;
              if (parent) {
                parent.removeChild(currentContextMenuTarget);
                // Update icon order and positions
                saveCurrentDesktopIconOrder && saveCurrentDesktopIconOrder();
                if (window.innerWidth > 1023 && typeof saveDesktopIconPositions === 'function') saveDesktopIconPositions();
                if (typeof showShortTopNotification === 'function') showShortTopNotification('Removed from Desktop');
              }
              if (typeof hideContextMenu === 'function') hideContextMenu();
            }
            break;
          case 'desktop-app-launcher-mode':
            switchToAppLauncherMode();
            return;
          // --- EASY MODE ---
          case 'app-launcher-easy-mode':
          case 'single-task-mode': {
            // Animate out desktop icons, widgets, and taskbar before switching
            const desktopIconsContainer = document.querySelector('.desktop-icons');
            const widgetsScreen = document.getElementById('widgets-screen');
            const taskbar = document.querySelector('.taskbar');

            let animCount = 0, animDone = 0;
            function onAnimEnd() { animDone++; if (animDone >= animCount) finishSwitchToEasyMode(); }

            if (desktopIconsContainer && desktopIconsContainer.style.display !== 'none') {
              animCount++;
              desktopIconsContainer.classList.add('anim-slide-left');
              desktopIconsContainer.addEventListener('animationend', function handler() {
                desktopIconsContainer.removeEventListener('animationend', handler);
                desktopIconsContainer.classList.remove('anim-slide-left');
                onAnimEnd();
              });
            }
            if (widgetsScreen && widgetsScreen.style.display !== 'none') {
              animCount++;
              widgetsScreen.classList.add('anim-slide-right');
              widgetsScreen.addEventListener('animationend', function handler() {
                widgetsScreen.removeEventListener('animationend', handler);
                widgetsScreen.classList.remove('anim-slide-right');
                onAnimEnd();
              });
            }
            if (taskbar && taskbar.style.display !== 'none') {
              animCount++;
              taskbar.classList.add('anim-slide-down');
              taskbar.addEventListener('animationend', function handler() {
                taskbar.removeEventListener('animationend', handler);
                taskbar.classList.remove('anim-slide-down');
                onAnimEnd();
              });
            }

            // If nothing to animate, switch immediately
            if (animCount === 0) finishSwitchToEasyMode();

            // Move your existing easy mode switch code into this function:
            function finishSwitchToEasyMode() {
              // Prevent duplicate overlays
              if (document.getElementById('app-launcher-desktop')) return;
              // Set easy mode flag
              window._easyMode = true;
              // Switch to Easy Mode (like app launcher, but no taskbar, apps maximized, no min/max icons)
              const desktopArea = document.getElementById('desktop-area');
              const desktopIconsContainer = document.querySelector('.desktop-icons');
              const taskbar = document.querySelector('.taskbar');
              const widgetsScreen = document.getElementById('widgets-screen');
              const widgetsToggleBtn = document.getElementById('widgets-toggle-btn');
              const appLauncherBtn = document.getElementById('app-launcher-btn');
              if (appLauncherBtn) appLauncherBtn.style.display = 'none';
              if (desktopIconsContainer) {
                desktopIconsContainer.style.display = 'none';
                desktopIconsContainer.style.pointerEvents = 'none';
              }
              
              // Save current taskbar style classes before hiding the taskbar
              if (taskbar) {
                // Save current classes to restore them later
                window._previousTaskbarClasses = {
                  hasTextMode: taskbar.classList.contains('taskbar-text-mode'),
                  hasWindows11Style: taskbar.classList.contains('taskbar-windows11-style')
                };
                
                // Remove style classes before hiding
                taskbar.classList.remove('taskbar-text-mode');
                taskbar.classList.remove('taskbar-windows11-style');
                taskbar.style.display = 'none';
              }
              
              if (widgetsScreen) widgetsScreen.style.display = 'none';
              if (widgetsToggleBtn) widgetsToggleBtn.style.display = 'none';
              // Remove any previous app-launcher-desktop if present
              let launcherDesktop = document.getElementById('app-launcher-desktop');
              if (launcherDesktop) launcherDesktop.remove();
              // Remove App Launcher overlay if present
              const appLauncherOverlay = document.getElementById('app-launcher-overlay');
              if (appLauncherOverlay && appLauncherOverlay.parentNode) appLauncherOverlay.parentNode.removeChild(appLauncherOverlay);
              // Remove App Launcher desktop icon if present
              const appLauncherIcon = document.querySelector('.desktop-icon[data-app="app-launcher"]');
              if (appLauncherIcon && appLauncherIcon.parentNode) {
                window._appLauncherIconWasPresent = true;
                appLauncherIcon.parentNode.removeChild(appLauncherIcon);
              } else {
                window._appLauncherIconWasPresent = false;
              }
              // Create the easy mode desktop container
              launcherDesktop = document.createElement('div');
              launcherDesktop.id = 'app-launcher-desktop';
              launcherDesktop.style.position = 'absolute';
              launcherDesktop.style.top = '0';
              launcherDesktop.style.left = '0';
              launcherDesktop.style.width = '100%';
              launcherDesktop.style.height = '100%';
              launcherDesktop.style.display = 'flex';
              launcherDesktop.style.flexDirection = 'column';
              // --- Top Bar ---
              const topBar = createAppLauncherTopBar();
              launcherDesktop.appendChild(topBar);



              // --- App Grid ---
              const grid = document.createElement('div');
              grid.className = 'app-launcher-grid';
              grid.style.display = 'grid';
              grid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(90px, 1fr))';
              grid.style.gap = '32px';
              grid.style.width = 'min(90vw, 900px)';
              grid.style.maxWidth = '100vw';
              grid.style.margin = 'auto';
              grid.style.justifyItems = 'center';
              grid.style.alignItems = 'start';
              grid.style.padding = '32px 0 0 0';
              grid.style.flex = '1 1 0';
              if (startMenuApps) {
                startMenuApps.forEach(app => {
                  const appItem = document.createElement('div');
                  appItem.className = 'app-launcher-app';
                  appItem.style.display = 'flex';
                  appItem.style.flexDirection = 'column';
                  appItem.style.alignItems = 'center';
                  appItem.style.justifyContent = 'center';
                  appItem.style.minHeight = '120px';
                  appItem.style.cursor = 'pointer';
                  appItem.style.userSelect = 'none';
                  appItem.tabIndex = 0;
                  appItem.setAttribute('data-app', app.id);
                  appItem.innerHTML = `<div class="icon-container ${app.iconBgClass}" style="width:64px;height:64px;border-radius:16px;display:flex;align-items:center;justify-content:center;font-size:28px;box-shadow:0 4px 16px rgba(0,0,0,0.18);margin-bottom:10px;"><i class="fas ${app.iconClass}"></i></div><span style="font-size:14px;color:#fff;margin-top:5px;text-shadow:0 1px 4px #222;text-align:center;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;">${app.name}</span>`;
                  appItem.addEventListener('click', function (e) {
                    openApp(app.id, app.name, app.iconClass, app.iconBgClass, appItem);
                  });
                  grid.appendChild(appItem);
                });
              }
              launcherDesktop.appendChild(grid);
              if (desktopArea) desktopArea.appendChild(launcherDesktop);
              if (desktopArea) desktopArea.classList.add('easy-mode');
              document.body.classList.add('easy-mode');
              if (launcherDesktop) {
                launcherDesktop.addEventListener('contextmenu', function (e) {
                  // Allow context menu for input, textarea, or contenteditable
                  if (
                    e.target.tagName === 'INPUT' ||
                    e.target.tagName === 'TEXTAREA' ||
                    e.target.isContentEditable
                  ) return;
                  e.preventDefault();
                  return false;
                });
              }
              // Animate in top bar and grid
              topBar.classList.add('anim-slide-down');
              topBar.addEventListener('animationend', function handler() {
                topBar.removeEventListener('animationend', handler);
                topBar.classList.remove('anim-slide-down');
              });
              grid.classList.add('anim-zoom-in');
              grid.addEventListener('animationend', function handler() {
                grid.removeEventListener('animationend', handler);
                grid.classList.remove('anim-zoom-in');
              });
              // --- FIX: Re-attach volume panel listeners after mode switch ---
              if (typeof setupVolumePanelListeners === 'function') setupVolumePanelListeners();
              if (typeof attachVolumeBtnHandler === 'function') attachVolumeBtnHandler();
            }
            break;
          }
          case 'close-app': {
            // Close the window associated with the taskbar icon
            if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('taskbar-app-icon')) {
              const winId = currentContextMenuTarget.getAttribute('data-window-id');
              if (winId && openWindows[winId] && openWindows[winId].element) {
                const windowElement = openWindows[winId].element;
                // If minimized, restore it first so close animation and logic work
                if (windowElement.classList.contains('minimized')) {
                  windowElement.classList.remove('minimized');
                  windowElement.style.display = 'flex';
                  if (openWindows[winId].taskbarIcon) openWindows[winId].taskbarIcon.classList.remove('minimized');
                }
                // Simulate click on the close button if present
                const closeButton = windowElement.querySelector('.window-close');
                if (closeButton) {
                  closeButton.click();
                } else {
                  // Fallback: remove window directly
                  windowElement.remove();
                  if (openWindows[winId].taskbarIcon) openWindows[winId].taskbarIcon.remove();
                  delete openWindows[winId];
                  updateTaskbarActiveState && updateTaskbarActiveState();
                }
                if (typeof hideContextMenu === 'function') hideContextMenu();
                return;
              }
            }
            break;
          }


          case 'minimize-app': {
            // Minimize the window associated with the taskbar icon
            if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('taskbar-app-icon')) {
              const winId = currentContextMenuTarget.getAttribute('data-window-id');
              if (winId && openWindows[winId] && openWindows[winId].element) {
                const windowElement = openWindows[winId].element;
                const taskbarIcon = openWindows[winId].taskbarIcon;
                if (typeof toggleMinimizeWindow === 'function') {
                  toggleMinimizeWindow(windowElement, taskbarIcon);
                } else {
                  windowElement.style.display = 'none';
                  windowElement.classList.add('minimized');
                  if (taskbarIcon) {
                    taskbarIcon.classList.add('minimized');
                    taskbarIcon.classList.remove('active');
                  }
                }
                if (typeof hideContextMenu === 'function') hideContextMenu();
                return;
              }
            }
            break;
          }

          case 'hide-app-launcher-taskbar-right': {
            // Toggle the App Launcher button in the taskbar
            const appLauncherBtn = document.getElementById('app-launcher-btn');
            if (appLauncherBtn) {
              const isHidden = appLauncherBtn.style.display === 'none';
              appLauncherBtn.style.display = isHidden ? '' : 'none';
              // Update the context menu label
              // Find the context menu item and update its label
              const menuItem = currentContextMenuTarget.closest('.context-menu-item');
              if (menuItem) {
                const span = menuItem.querySelector('span');
                if (span) {
                  span.textContent = isHidden ? 'Show App Launcher' : 'Hide App Launcher';
                }
              }
              if (typeof showShortTopNotification === 'function') {
                showShortTopNotification(isHidden ? 'App Launcher shown' : 'App Launcher hidden');
              }
            }
            if (typeof hideContextMenu === 'function') hideContextMenu();
            break;
          }

          case 'hide-search-icon-taskbar-right': {
            // Toggle the visibility of the global search icon in the right taskbar
            const searchIconBtn = document.getElementById('global-search-btn');
            if (searchIconBtn) {
              const isHidden = searchIconBtn.style.display === 'none';
              // Toggle display
              searchIconBtn.style.display = isHidden ? '' : 'none';
              // Update the context menu label (label should reflect the NEXT action)
              const menuItem = currentContextMenuTarget.closest('.context-menu-item');
              if (menuItem) {
                const span = menuItem.querySelector('span');
                if (span) {
                  span.textContent = isHidden ? 'Show Search icon' : 'Hide Search icon';
                }
              }
              if (typeof showShortTopNotification === 'function') {
                showShortTopNotification(isHidden ? 'Search icon shown' : 'Search icon hidden');
              }
            }
            if (typeof hideContextMenu === 'function') hideContextMenu();
            break;
          }

          case 'hide-volume-taskbar-right': {
            // Toggle the visibility of the volume button in the right taskbar
            const volumeBtn = document.getElementById('volume-btn');
            if (volumeBtn) {
              const isHidden = volumeBtn.style.display === 'none';
              volumeBtn.style.display = isHidden ? '' : 'none';
              // Update the context menu label
              const menuItem = currentContextMenuTarget.closest('.context-menu-item');
              if (menuItem) {
                const span = menuItem.querySelector('span');
                if (span) {
                  span.textContent = isHidden ? 'Show Volume' : 'Hide Volume';
                }
              }
              if (typeof showShortTopNotification === 'function') {
                showShortTopNotification(isHidden ? 'Volume button shown' : 'Volume button hidden');
              }
            }
            if (typeof hideContextMenu === 'function') hideContextMenu();
            break;
          }

          case 'hide-wallet-taskbar-right': {
            // Toggle the visibility of the wallet button in the right taskbar
            const walletBtn = document.getElementById('wallet-btn');
            if (walletBtn) {
              const isHidden = walletBtn.style.display === 'none';
              walletBtn.style.display = isHidden ? '' : 'none';
              // Update the context menu label
              const menuItem = currentContextMenuTarget.closest('.context-menu-item');
              if (menuItem) {
                const span = menuItem.querySelector('span');
                if (span) {
                  span.textContent = isHidden ? 'Show Wallet' : 'Hide Wallet';
                }
              }
              if (typeof showShortTopNotification === 'function') {
                showShortTopNotification(isHidden ? 'Wallet button shown' : 'Wallet button hidden');
              }
            }
            if (typeof hideContextMenu === 'function') hideContextMenu();
            break;
          }

          case 'hide-full-screen-taskbar-right': {
            // Toggle the visibility of the full screen button in the right taskbar
            const fullscreenBtn = document.getElementById('fullscreen-btn');
            if (fullscreenBtn) {
              const isHidden = fullscreenBtn.style.display === 'none';
              fullscreenBtn.style.display = isHidden ? '' : 'none';
              // Update the context menu label
              const menuItem = currentContextMenuTarget.closest('.context-menu-item');
              if (menuItem) {
                const span = menuItem.querySelector('span');
                if (span) {
                  span.textContent = isHidden ? 'Show Full Screen' : 'Hide Full Screen';
                }
              }
              if (typeof showShortTopNotification === 'function') {
                showShortTopNotification(isHidden ? 'Full screen button shown' : 'Full screen button hidden');
              }
            }
            if (typeof hideContextMenu === 'function') hideContextMenu();
            break;
          }

          case 'show-desktop': {
            // Minimize all open windows
            if (typeof openWindows === 'object' && typeof toggleMinimizeWindow === 'function') {
              Object.values(openWindows).forEach(winObj => {
                if (winObj.element && !winObj.element.classList.contains('minimized')) {
                  toggleMinimizeWindow(winObj.element, winObj.taskbarIcon);
                }
              });
              if (typeof showShortTopNotification === 'function') {
                showShortTopNotification('All windows minimized');
              }
            }
            if (typeof hideContextMenu === 'function') hideContextMenu();
            break;
          }

          default:
            _originalExecuteContextMenuAction.call(this, action);
        }
      } catch (err) {
        console.error('Context menu action error:', err);
      }
    };
    console.log('Patched executeContextMenuAction installed');
  })();

  if (desktopArea) {
    desktopArea.addEventListener('contextmenu', function (e) {
      // Allow context menu for input, textarea, contenteditable, or selected text
      const sel = window.getSelection();
      if (
        e.target.tagName === 'INPUT' ||
        e.target.tagName === 'TEXTAREA' ||
        e.target.isContentEditable ||
        (sel && sel.rangeCount > 0 && !sel.getRangeAt(0).collapsed && sel.toString().trim().length > 0)
      ) return;

      // Custom context menu for pinned-only taskbar icons
      if (e.target.closest('.taskbar-app-icon.pinned-only')) {
        currentContextMenuTarget = e.target.closest('.taskbar-app-icon.pinned-only');
        const appName = currentContextMenuTarget.getAttribute('data-app');
        const details = getAppIconDetails(appName);
        const openWin = Object.values(openWindows).find(w => w.name === appName && w.element);
        let menuItems;
        if (openWin && openWin.element) {
          if (openWin.element.classList.contains('minimized')) {
            menuItems = [
              { label: 'Open', action: 'open-app', icon: details.iconClass },
              { label: 'Unpin from Taskbar', action: 'unpin-taskbar', icon: 'fa-thumbtack' },
              { type: 'separator' },
              { label: 'Close Window', action: 'close-app', icon: 'fa-xmark' }
            ];
          } else {
            menuItems = [
              { label: 'Minimize Window', action: 'minimize-app', icon: 'fa-window-minimize' },
              { label: 'Unpin from Taskbar', action: 'unpin-taskbar', icon: 'fa-thumbtack' },
              { type: 'separator' },
              { label: 'Close Window', action: 'close-app', icon: 'fa-xmark' }
            ];
          }
        } else {
          menuItems = [
            { label: 'Open', action: 'open-app', icon: details.iconClass },
            { label: 'Unpin from Taskbar', action: 'unpin-taskbar', icon: 'fa-thumbtack' }
          ];
        }
        populateContextMenu(menuItems, e.clientX, e.clientY);
        e.preventDefault();
        return;
      }






      // Skip if right-clicking the search input
      if (e.target.classList && e.target.classList.contains('search-input')) return;
      e.preventDefault();
      hideContextMenu(); // Hide any previous before showing new
      currentContextMenuTarget = e.target;
      const menuItems = [];
      if (e.target.closest('.taskbar .taskbar-app-icon.minimized')) {
        currentContextMenuTarget = e.target.closest('.taskbar-app-icon.minimized');
        menuItems.push({ label: 'Open', action: 'open-taskbar-icon', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Pin To Taskbar', action: 'pin-to-taskbar', icon: 'fa-thumbtack' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Close Window', action: 'close-app', icon: 'fa-xmark' });
      } else if (e.target.closest('.trash-item ')) {
        currentContextMenuTarget = e.target.closest('.trash-item');
        menuItems.push({ label: 'Open', action: 'open-file', icon: 'fa-folder-open' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Empty Trash', action: 'empty-trash', icon: 'fa-trash-alt' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Get info', action: 'get-info', icon: 'fa-info-circle' });
      } else if (e.target.closest('.taskbar .taskbar-app-icon')) {
        currentContextMenuTarget = e.target.closest('.taskbar-app-icon');
        menuItems.push({ label: 'Minimize Window', action: 'minimize-app', icon: 'fa-window-minimize' });
        menuItems.push({ label: 'Pin To Taskbar', action: 'pin-to-taskbar', icon: 'fa-thumbtack' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Close Window', action: 'close-app', icon: 'fa-xmark' });
      } else if (e.target.closest('.taskbar .taskbar-app-icons')) {
        currentContextMenuTarget = e.target.closest('.taskbar-app-icons');
        // Determine if search bar is currently visible
        const searchBar = document.querySelector('.taskbar .search-container');
        const searchBarVisible = searchBar && searchBar.style.display !== 'none';
        // Determine if the right search icon is currently visible
        const searchIconBtn = document.getElementById('global-search-btn');
        const searchIconVisible = searchIconBtn && searchIconBtn.style.display !== 'none';
        // Determine if the App Launcher button is currently visible
        const appLauncherBtn = document.getElementById('app-launcher-btn');
        const appLauncherVisible = appLauncherBtn && appLauncherBtn.style.display !== 'none';
        menuItems.push({
          label: searchBarVisible ? 'Hide search bar' : 'Show search bar',
          action: 'toggle-search-taskbar',
          icon: 'fa-search'
        });
        menuItems.push({
          label: 'Show / Hide Icons', action: 'show-hide-icons-taskbar-right', icon: 'fa-eye', subItems: [
            { label: searchIconVisible ? 'Hide Search icon' : 'Show Search icon', action: 'hide-search-icon-taskbar-right', icon: 'fa-search' },
            { label: appLauncherVisible ? 'Hide App Launcher' : 'Show App Launcher', action: 'hide-app-launcher-taskbar-right', icon: 'fa-th' },
            // Use volume button visibility for label
            (() => {
              const volumeBtn = document.getElementById('volume-btn');
              const volumeVisible = volumeBtn && volumeBtn.style.display !== 'none';
              return { label: volumeVisible ? 'Hide Volume' : 'Show Volume', action: 'hide-volume-taskbar-right', icon: 'fa-volume-high' };
            })(),
            (() => {
              const walletBtn = document.getElementById('wallet-btn');
              const walletVisible = walletBtn && walletBtn.style.display !== 'none';
              return { label: walletVisible ? 'Hide Wallet' : 'Show Wallet', action: 'hide-wallet-taskbar-right', icon: 'fa-wallet' };
            })(),
            { type: 'separator' },
            (() => {
              const fullscreenBtn = document.getElementById('fullscreen-btn');
              const fullscreenVisible = fullscreenBtn && fullscreenBtn.style.display !== 'none';
              return { label: fullscreenVisible ? 'Hide Full Screen' : 'Show Full Screen', action: 'hide-full-screen-taskbar-right', icon: 'fa-expand' };
            })(),
          ]
        });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Customize Widgets', action: 'customize-widgets', icon: 'fa-server' });
        menuItems.push({ label: 'Show desktop', action: 'show-desktop', icon: 'fa-display' });
        menuItems.push({ type: 'separator' });
        menuItems.push({
          label: 'Customize Taskbar', action: 'customize-all-taskbar', icon: 'fa-cog', subItems: [
            { label: 'Default', action: 'taskbar-icons-middle-alignment', icon: 'fa-ellipsis' },
            { label: 'Windows 11 Style', action: 'taskbar-windows11-alignment', icon: 'fa-ellipsis-h' },
            { label: 'Icons - Left alignment', action: 'taskbar-icons-left-alignment', icon: 'fa-server' },
            { label: 'Icons and Text', action: 'taskbar-icons-and-text-apps', icon: 'fa-server' },

          ]
        });
      } else if (e.target.closest('.app-launcher-mode .app-launcher-app')) {
        currentContextMenuTarget = e.target.closest('.app-launcher-app');
        const appName = currentContextMenuTarget.getAttribute('data-app');
        const appTitle = currentContextMenuTarget.getAttribute('data-app-title') || currentContextMenuTarget.querySelector('span')?.textContent || appName;
        const details = getAppIconDetails(appName);
        // Determine if system app
        let isSystemApp = false;
        if (typeof startMenuApps !== 'undefined') {
          const appObj = startMenuApps.find(a =>
            a.id === appName ||
            a.name === appName ||
            (a.name && a.name.toLowerCase().replace(/\s+/g, '-') === appName)
          );
          if (appObj && appObj.category && appObj.category.toUpperCase().includes('SYSTEM')) isSystemApp = true;
        }
        const menuItems = [
          { label: 'Open', action: 'open-app', icon: details.iconClass },
          { label: isAppPinned(appName) ? 'Unpin from Taskbar' : 'Pin to Taskbar', action: isAppPinned(appName) ? 'unpin-taskbar' : 'pin-to-taskbar', icon: 'fa-thumbtack' },
          { type: 'separator' },
          isSystemApp
            ? { label: 'Uninstall App', action: 'uninstall-app', icon: 'fa-trash', disabled: true }
            : { label: 'Uninstall App', action: 'uninstall-app', icon: 'fa-trash' }
        ];
        populateContextMenu(menuItems, e.clientX, e.clientY);
        e.preventDefault();
        return;
      } else if (e.target.closest('.desktop-icon')) {
        currentContextMenuTarget = e.target.closest('.desktop-icon');
        menuItems.push({ label: 'Open', action: 'open-app', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Pin To Taskbar', action: 'pin-to-taskbar', icon: 'fa-thumbtack' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Remove from Desktop', action: 'remove-from-desktop', icon: 'fa-trash' });
      } else if (e.target.closest('.start-button')) {
        currentContextMenuTarget = e.target.closest('.start-button');
        menuItems.push({ label: 'My Profile', action: 'my-profile-settings', icon: 'fa-user' });
        menuItems.push({ label: 'Appearance', action: 'appearance-settings', icon: 'fa-paint-brush' });
        menuItems.push({ label: 'Notifications', action: 'notifications-settings', icon: 'fa-bell' });
        menuItems.push({ label: 'Privacy', action: 'privacy-settings', icon: 'fa-user-shield' });
        menuItems.push({ label: 'Security', action: 'security-settings', icon: 'fa-lock' });
        menuItems.push({ label: 'Integrations', action: 'integrations-settings', icon: 'fa-plug' });
        menuItems.push({ label: 'Active Services', action: 'active-services', icon: 'fa-cogs' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'My Website', action: 'my-website', icon: 'fa-globe' });
        menuItems.push({ label: 'Products', action: 'products-settings', icon: 'fa-box-open' });
        menuItems.push({ label: 'Payments', action: 'payments-settings', icon: 'fa-credit-card' });
        menuItems.push({ label: 'Shipping', action: 'shipping-settings', icon: 'fa-shipping-fast' });
        menuItems.push({ label: 'Customers & Privacy', action: 'customers-privacy-settings', icon: 'fa-users' });
        menuItems.push({ label: 'Emails', action: 'emails-settings', icon: 'fa-envelope' });
        menuItems.push({ label: 'Billing', action: 'billing-settings', icon: 'fa-file-invoice-dollar' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Open Settings', action: 'open-settings', icon: 'fa-cog' });
        menuItems.push({ type: 'separator' });
        menuItems.push({
          label: 'Start menu style',
          action: 'start-menu-style',
          icon: 'fa-rocket',
          subItems: [
            {
              label: 'Default',
              action: 'start-menu-style-default',
              icon: 'fa-columns',
              checked: startMenu && startMenu.classList.contains('start-menu-style-default')
            },
            {
              label: 'Default Apps only',
              action: 'start-menu-style-default-apps-only',
              icon: 'fa-grip',
              checked: startMenu && startMenu.classList.contains('start-menu-style-default-apps-only')
            },
            {
              label: 'Windows 11 Style',
              action: 'start-menu-style-windows11',
              icon: 'fa-square-poll-horizontal',
              checked: startMenu && startMenu.classList.contains('start-menu-style-windows11')
            },
            {
              label: 'List with sidebar',
              action: 'start-menu-style-apps-list-with-sidebar',
              icon: 'fa-book-open',
              checked: startMenu && startMenu.classList.contains('start-menu-list-style') && !startMenu.classList.contains('start-menu-style-apps-list-only')
            },
            {
              label: 'List Apps only',
              action: 'start-menu-style-apps-list-only',
              icon: 'fa-table-list',
              checked: startMenu && startMenu.classList.contains('start-menu-style-apps-list-only')
            },
            { type: 'separator' },
            {
              label: 'App Launcher',
              action: 'start-menu-style-app-launcher',
              icon: 'fa-table-cells',
              checked: startMenu && startMenu.classList.contains('start-menu-style-app-launcher')
            }
          ]
        });
      } else if (e.target.closest('.window-main-content .file-item')) {
        currentContextMenuTarget = e.target.closest('.file-item');
        menuItems.push({ label: 'Open', action: 'open-file', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Open in new window', action: 'open-in-new-window', icon: 'fa-window-restore' });
        menuItems.push({ label: 'Download', action: 'download', icon: 'fa-download' });
        menuItems.push({ label: 'Preview', action: 'preview', icon: 'fa-eye' });
        menuItems.push({ label: 'Upload files in this folder', action: 'upload-files', icon: 'fa-upload' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Copy', action: 'copy-file', icon: 'fa-copy' });
        menuItems.push({ label: 'Cut', action: 'cut-file', icon: 'fa-scissors' });
        menuItems.push({ label: 'Duplicate', action: 'duplicate-file', icon: 'fa-clone' });
        menuItems.push({ label: 'Move Into New Folder', action: 'into-new-folder', icon: 'fa-folder-plus' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Delete file', action: 'into-trash', icon: 'fa-trash' });
        menuItems.push({ label: 'Rename', action: 'rename', icon: 'fa-i-cursor' });
        menuItems.push({
          label: 'Create archive', action: 'create-archive', icon: 'fa-file-archive', subItems: [
            { label: 'ZIP', action: 'archive-zip', icon: 'fa-file-archive' },
            { label: 'TAR', action: 'archive-tar', icon: 'fa-file-archive' }
          ]
        });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Share with...', action: 'share-with-others', icon: 'fa-random' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Add to Favorites', action: 'add-folder-to-favorites', icon: 'fa-share-square' });
        menuItems.push({ label: 'Get info', action: 'get-info', icon: 'fa-info-circle' });
      } else if (e.target.closest('.app-store-window .sidebar-item ')) {
        currentContextMenuTarget = e.target.closest('.sidebar-item');
        menuItems.push({ label: 'Open', action: 'open-file', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Add new app', action: 'add-new-app', icon: 'fa-plus' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Report problem', action: 'report-problem', icon: 'fa-info-circle' });
      } else if (e.target.closest('.window-sidebar .sidebar-section.drives-section .sidebar-item ')) {
        currentContextMenuTarget = e.target.closest('.sidebar-item');
        menuItems.push({ label: 'Open', action: 'open-file', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Open in new window', action: 'open-in-new-window', icon: 'fa-window-restore' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Connect / Disconnect', action: 'connect-disconnect', icon: 'fa-info-circle' });
      } else if (e.target.closest('.window-sidebar .sidebar-section.shared-section .sidebar-item ')) {
        currentContextMenuTarget = e.target.closest('.sidebar-item');
        menuItems.push({ label: 'Open', action: 'open-file', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Open in new window', action: 'open-in-new-window', icon: 'fa-window-restore' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Get info', action: 'get-info', icon: 'fa-info-circle' });
      } else if (e.target.closest('.email-app-window .sidebar-item ')) {
        currentContextMenuTarget = e.target.closest('.sidebar-item');
        menuItems.push({ label: 'Open', action: 'open-folder-mail', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Mark all as read', action: 'mark-all-as-read', icon: 'fa-envelope-open' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Rename folder', action: 'rename-folder', icon: 'fa-i-cursor' });
        menuItems.push({ label: 'Create new folder', action: 'create-new-folder', icon: 'fa-folder-plus' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Empty folder', action: 'empty-folder', icon: 'fa-trash' });
        menuItems.push({ label: 'Delete folder', action: 'delete-folder', icon: 'fa-trash' });
      } else if (e.target.closest('.email-app-window .email-content-from ')) {
        currentContextMenuTarget = e.target.closest('.email-content-from');
        menuItems.push({ label: 'Reply', action: 'reply', icon: 'fa-reply' });
        menuItems.push({ label: 'Compose new email', action: 'compose-new-email', icon: 'fa-plus' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'More emails from sender', action: 'more-emails-from-sender', icon: 'fa-at' });
        menuItems.push({ label: 'Copy email address', action: 'copy-email-address', icon: 'fa-copy' });
      } else if (e.target.closest('.email-app-window .email-list-item ')) {
        currentContextMenuTarget = e.target.closest('.email-list-item');
        menuItems.push({ label: 'Reply', action: 'reply', icon: 'fa-reply' });
        menuItems.push({ label: 'Reply All', action: 'reply-all', icon: 'fa-reply-all' });
        menuItems.push({ label: 'Forward', action: 'forward', icon: 'fa-forward' });
        menuItems.push({ label: 'Compose new email', action: 'compose-new-email', icon: 'fa-plus' });

        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Open in new window', action: 'email-open-in-new-window', icon: 'fa-window-restore' });
        menuItems.push({ label: 'More emails from sender', action: 'more-emails-from-sender', icon: 'fa-at' });
        menuItems.push({ label: 'Copy email address', action: 'copy-email-address', icon: 'fa-copy' });
        menuItems.push({ label: 'Add sender to contacts', action: 'add-sender-to-contacts', icon: 'fa-user-plus' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Mark as read', action: 'mark-as-read', icon: 'fa-envelope-open' });
        menuItems.push({ label: 'Mark as unread', action: 'mark-as-unread', icon: 'fa-envelope' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Add to favorites', action: 'add-to-favorites', icon: 'fa-star' });
        menuItems.push({ label: 'Convert to task', action: 'convert-to-task', icon: 'fa-tasks' });
        menuItems.push({
          label: 'Move to folder', action: 'move-to-folder', icon: 'fa-folder-open', subItems: [
            { label: 'Folder name', action: 'move-to-folder-name', icon: 'fa-folder-open' },
            { label: 'Another folder', action: 'move-to-another-folder', icon: 'fa-folder-open' },
            { type: 'separator' },
            { label: 'Create new folder', action: 'create-new-folder', icon: 'fa-folder-plus' },
          ]
        });
        menuItems.push({
          label: 'Add a label', action: 'add-a-label', icon: 'fa-tag', subItems: [
            { label: 'To Do', action: 'add-a-label-to-do', icon: 'fa-tag' },
            { label: 'Important', action: 'add-a-label-important', icon: 'fa-tag' },
            { label: 'Work', action: 'add-a-label-work', icon: 'fa-tag' },
            { label: 'Personal', action: 'add-a-label-personal', icon: 'fa-tag' },
            { type: 'separator' },
            { label: 'Create new label', action: 'create-new-label', icon: 'fa-tag' },
          ]
        });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Block sender', action: 'block-sender', icon: 'fa-user-shield' });
        menuItems.push({ label: 'Mark as SPAM', action: 'mark-as-spam', icon: 'fa-shield-virus' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Delete', action: 'delete', icon: 'fa-trash' });
      } else if (e.target.closest('.window-sidebar .sidebar-section .sidebar-item ')) {
        currentContextMenuTarget = e.target.closest('.sidebar-item');
        menuItems.push({ label: 'Open', action: 'open-file', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Open in new window', action: 'open-in-new-window', icon: 'fa-window-restore' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Get info', action: 'get-info', icon: 'fa-info-circle' });
      } else if (e.target.closest('.contact-app-window .contact-list-item ')) {
        currentContextMenuTarget = e.target.closest('.contact-list-item');
        menuItems.push({ label: 'Open contact', action: 'open-contact-details', icon: 'fa-user' });
        menuItems.push({ label: 'Open in new window', action: 'open-contact-in-new-window', icon: 'fa-user-plus' });
        menuItems.push({ label: 'View all orders', action: 'view-all-orders', icon: 'fa-box' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Login as this user', action: 'login-as-contact-user', icon: 'fa-user-shield' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Add to favorites', action: 'add-to-favorites', icon: 'fa-star' });
        menuItems.push({
          label: 'Add to group', action: 'add-to-group', icon: 'fa-users', subItems: [
            { label: 'Group 1 ', action: 'add-to-group-1', icon: 'fa-users' },
            { label: 'Group 2', action: 'add-to-group-2', icon: 'fa-users' },
            { label: 'Group 3', action: 'add-to-group-3', icon: 'fa-users' },
            { type: 'separator' },
            { label: 'Create new group', action: 'create-new-group', icon: 'fa-plus' },
          ]
        });
        menuItems.push({
          label: 'Add label', action: 'add-label', icon: 'fa-tag', subItems: [
            { label: 'To Do', action: 'add-label-to-do', icon: 'fa-tag' },
            { label: 'Important', action: 'add-label-important', icon: 'fa-tag' },
            { label: 'Work', action: 'add-label-work', icon: 'fa-tag' },
            { label: 'Personal', action: 'add-label-personal', icon: 'fa-tag' },
            { type: 'separator' },
            { label: 'Create new label', action: 'create-new-label', icon: 'fa-tag' },
          ]
        });
        menuItems.push({ label: 'Add note', action: 'add-note', icon: 'fa-sticky-note' });
        menuItems.push({ type: 'separator' });
        menuItems.push({
          label: 'Send', action: 'send-email', icon: 'fa-envelope', subItems: [
            { label: 'Compose new email', action: 'compose-new-email', icon: 'fa-plus' },
            { label: 'Compose SMS', action: 'compose-sms', icon: 'fa-sms' },
            { label: 'Send WhatsApp', action: 'send-whatsapp', icon: 'fa-whatsapp' },
            { type: 'separator' },
            { label: 'All emails from contact', action: 'emails-from-contact', icon: 'fa-at' },
          ]
        });
        menuItems.push({
          label: 'Copy', action: 'copy-contact-data', icon: 'fa-copy', subItems: [
            { label: 'Copy email address', action: 'copy-contact-email', icon: 'fa-envelope' },
            { label: 'Copy phone number', action: 'copy-contact-phone', icon: 'fa-phone' },
            { type: 'separator' },
            { label: 'Copy contact info', action: 'copy-all-contact-info', icon: 'fa-copy' },
          ]
        });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Block account', action: 'block-account', icon: 'fa-user-slash' });
        menuItems.push({ label: 'Delete contact', action: 'delete-contact', icon: 'fa-trash' });
      } else if (e.target.closest('.products-manager-window .products-list-item')) {
        currentContextMenuTarget = e.target.closest('.products-list-item');
        menuItems.push({ label: 'Edit Product', action: 'open-product-editor', icon: 'fa-box' });
        menuItems.push({ label: 'Edit in new window', action: 'open-product-editor-in-new-window', icon: 'fa-box' });
        menuItems.push({
          label: 'Status', action: 'change-product-status', icon: 'fa-users', subItems: [
            { label: 'Active', action: 'change-product-status-active', icon: 'fa-users' },
            { label: 'Draft', action: 'change-product-status-draft', icon: 'fa-users' },

            { type: 'separator' },
            { label: 'Staff Review', action: 'change-product-status-staff-review', icon: 'fa-users' },
          ]
        });
        menuItems.push({
          label: 'Stock', action: 'change-product-status', icon: 'fa-users', subItems: [
            { label: 'In stock', action: 'change-product-status-active', icon: 'fa-users' },
            { label: 'Out of stock', action: 'change-product-status-draft', icon: 'fa-users' },
            { type: 'separator' },
            { label: 'Backorder', action: 'change-product-status-staff-review', icon: 'fa-users' },
          ]
        });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Preview Product', action: 'preview-product', icon: 'fa-eye' });
        menuItems.push({ label: 'Add / Remove Featured Product', action: 'add-remove-featured-product', icon: 'fa-star' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Sales report', action: 'view-sales-report', icon: 'fa-chart-line' });
        menuItems.push({ label: 'SEO Settings', action: 'product-seo-settings', icon: 'fa-box' });
        menuItems.push({ label: 'Create Ads Campaign', action: 'create-ads-campaign', icon: 'fa-box' });
        menuItems.push({ label: 'Create Newsletter', action: 'create-newsletter', icon: 'fa-envelope' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Delete Product', action: 'delete-product', icon: 'fa-trash' });


      } else if (e.target.closest('.orders-manager-window .orders-list-item ')) {
        currentContextMenuTarget = e.target.closest('.orders-list-item');
        menuItems.push({ label: 'Open order', action: 'open-order-details', icon: 'fa-box' });
        menuItems.push({ label: 'Open in new window', action: 'open-order-in-new-window', icon: 'fa-box' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'All orders from contact', action: 'view-all-orders-from-contact', icon: 'fa-box' });
        menuItems.push({ label: 'View contact', action: 'view-contact', icon: 'fa-user-shield' });
        menuItems.push({ type: 'separator' });
        menuItems.push({
          label: 'Change order status', action: 'change-order-status', icon: 'fa-users', subItems: [
            { label: 'Cancel order', action: 'change-order-status-canceled', icon: 'fa-users' },
            { label: 'On hold', action: 'change-order-status-on-hold', icon: 'fa-users' },
            { label: 'Pending', action: 'change-order-status-pending', icon: 'fa-users' },
            { label: 'In progress', action: 'change-order-status-in-progress', icon: 'fa-users' },
            { label: 'Completed', action: 'change-order-status-completed', icon: 'fa-users' },
            { type: 'separator' },
            { label: 'Refunded', action: 'change-order-status-refunded', icon: 'fa-plus' },
          ]
        });


        menuItems.push({
          label: 'Add label', action: 'add-label', icon: 'fa-tag', subItems: [
            { label: 'To Do', action: 'add-label-to-do', icon: 'fa-tag' },
            { label: 'Important', action: 'add-label-important', icon: 'fa-tag' },
            { label: 'Work', action: 'add-label-work', icon: 'fa-tag' },
            { label: 'Personal', action: 'add-label-personal', icon: 'fa-tag' },
            { type: 'separator' },
            { label: 'Create new label', action: 'create-new-label', icon: 'fa-tag' },
          ]
        });
        menuItems.push({ label: 'Add order note', action: 'add-note', icon: 'fa-sticky-note' });
        menuItems.push({ type: 'separator' });
        menuItems.push({
          label: 'Send', action: 'send-email', icon: 'fa-envelope', subItems: [
            { label: 'Compose new email', action: 'compose-new-email', icon: 'fa-plus' },
            { label: 'Compose SMS', action: 'compose-sms', icon: 'fa-sms' },
            { label: 'Send WhatsApp', action: 'send-whatsapp', icon: 'fa-whatsapp' },
            { type: 'separator' },
            { label: 'All emails from contact', action: 'emails-from-contact', icon: 'fa-at' },
          ]
        });
        menuItems.push({
          label: 'Copy', action: 'copy-contact-data', icon: 'fa-copy', subItems: [
            { label: 'Copy email address', action: 'copy-contact-email', icon: 'fa-envelope' },
            { label: 'Copy phone number', action: 'copy-contact-phone', icon: 'fa-phone' },
            { type: 'separator' },
            { label: 'Copy contact info', action: 'copy-all-contact-info', icon: 'fa-copy' },
          ]
        });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Block account', action: 'block-account', icon: 'fa-user-slash' });
        menuItems.push({ label: 'Delete order', action: 'delete-order', icon: 'fa-trash' });
      } else if (e.target.closest('.window-main-content .window-app-content')) {
        currentContextMenuTarget = e.target.closest('.window-app-content');
        menuItems.push({
          label: 'View', action: 'list-view', icon: 'fa-eye', subItems: [
            { label: 'Icons', action: 'view-icons', icon: 'fa-th-large' },
            { label: 'List', action: 'view-list', icon: 'fa-list' }
          ]
        });
        menuItems.push({
          label: 'Sort', action: 'sort', icon: 'fa-sort', subItems: [
            { label: 'Name', action: 'sort-name', icon: 'fa-sort-alpha-down' },
            { label: 'Date', action: 'sort-date', icon: 'fa-calendar-alt' },
            { label: 'Type', action: 'sort-type', icon: 'fa-file' },
            { label: 'Size', action: 'sort-size', icon: 'fa-file' },
            { type: 'separator' },
            { label: 'Permissions', action: 'sort-permissions', icon: 'fa-file' },
            { type: 'separator' },
            { label: 'Folder first', action: 'folder-first', icon: 'fa-file' },
          ]
        });
        menuItems.push({ label: 'Refresh', action: 'reload', icon: 'fa-rotate-right', checked: true });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Paste', action: 'paste', icon: 'fa-paste', disabled: true });
        menuItems.push({ label: 'Upload files', action: 'upload-files', icon: 'fa-upload' });
        menuItems.push({ label: 'New folder', action: 'new-folder', icon: 'fa-folder-plus' });
        menuItems.push({
          label: 'New file', action: 'new-file', icon: 'fa-file-medical', subItems: [
            { label: 'Text file', action: 'new-text-file', icon: 'fa-file-alt' },
            { label: 'Spreadsheet', action: 'new-spreadsheet', icon: 'fa-file-excel' },
            { label: 'Presentation', action: 'new-presentation', icon: 'fa-file-powerpoint' }
          ]
        });

        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Share with...', action: 'share-with-others', icon: 'fa-random' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Select all', action: 'select-all', icon: 'fa-check-square' });
        menuItems.push({ label: 'Add folder to Favorites', action: 'add-folder-to-favorites', icon: 'fa-share-square' });
        menuItems.push({ label: 'Preferences', action: 'preferences', icon: 'fa-cog' });
        menuItems.push({ label: 'Get info', action: 'get-info', icon: 'fa-info-circle' });
      } else if (e.target.closest('.taskbar-icon #notifications-btn')) {
        currentContextMenuTarget = e.target.closest('#notifications-btn');
        menuItems.push({ label: 'Clear all notifications', action: 'clear-all-notifications', icon: 'fa-broom' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Customize notifications', action: 'customize-notifications', icon: 'fa-gear' });
        menuItems.push({
          label: 'Desktop notifications', action: 'new-file', icon: 'fa-comments', subItems: [
            { label: 'Only 1 notification', action: 'show-only-1-notification', checked: desktopNotificationMode === 'one' },
            { label: 'Only 3 Notifications', action: 'show-only-3-notifications', checked: desktopNotificationMode === 'three' },
            { label: 'All notifications', action: 'show-all-notifications', checked: desktopNotificationMode === 'all' }
          ]
        });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: isNotificationsMuted ? 'Unmute Notifications' : 'Mute Notifications', action: 'mute-notifications', icon: isNotificationsMuted ? 'fa-bell' : 'fa-bell-slash' });
      } else if (e.target.closest('.taskbar-icon #wallet-btn')) {
        currentContextMenuTarget = e.target.closest('#wallet-btn');
        menuItems.push({ label: 'Open Wallet Panel', action: 'taskbar-open-wallet', icon: 'fa-wallet' });
        menuItems.push({ label: 'Open Wallet App', action: 'taskbar-open-wallet-app', icon: 'fa-money-check-dollar' });
        menuItems.push({ type: 'separator' });
        menuItems.push({
          label: 'Display Settings', action: 'new-file', icon: 'fa-comments', subItems: [
            { label: 'Show icon', action: 'show-wallet-icon', icon: 'fa-file-alt', checked: window.walletDisplayMode === 'icon' },
            { label: 'Show account balance', action: 'show-account-balance', icon: 'fa-file-excel', checked: window.walletDisplayMode === 'balance' },
          ]
        });
      } else if (e.target.closest('.taskbar-right #volume-btn')) {
        currentContextMenuTarget = e.target.closest('#volume-btn');
        menuItems.push({ label: 'Open Volume', action: 'taskbar-open-volume', icon: 'fa-volume-high' });
        menuItems.push({ label: 'Microphone', action: 'taskbar-open-calendar', icon: 'fa-microphone' });
        // Dynamically set Show/Hide music player label
        const volumePanel = document.getElementById('volume-panel');
        let musicPanelVisible = true;
        if (volumePanel) {
          const musicPanel = volumePanel.querySelector('.music-panel-box');
          if (musicPanel && (musicPanel.style.display === 'none' || getComputedStyle(musicPanel).display === 'none')) {
            musicPanelVisible = false;
          }
        }
        menuItems.push({ label: musicPanelVisible ? 'Hide music player' : 'Show music player', action: 'open-music-player', icon: 'fa-music' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Open sound settings', action: 'open-sound-settings', icon: 'fa-gear' });
        menuItems.push({ label: isMuted ? 'Unmute' : 'Mute', action: 'taskbar-mute', icon: isMuted ? 'fa-volume-up' : 'fa-volume-mute' });
      } else if (e.target.closest('.taskbar-right .taskbar-time')) {
        currentContextMenuTarget = e.target.closest('.taskbar-time');
        menuItems.push({ label: 'Open Calendar', action: 'taskbar-open-calendar', icon: 'fa-calendar-days' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Date and Time Settings', action: 'taskbar-date-time-settings', icon: 'fa-gear' });
        menuItems.push({
          label: 'Time & Date visibility', action: 'show-hide-time-date', icon: 'fa-eye', subItems: [
            { label: 'Show time & date', action: 'always-show-time-date', icon: 'fa-eye' },
            { label: 'Hide time & date', action: 'always-hide-time-date', icon: 'fa-eye-slash' },
            { type: 'separator' },
            { label: 'Show only in full screen', action: 'show-only-in-full-screen', icon: 'fa-chalkboard' },
          ]
        });
      } else if (e.target.closest('.taskbar-right #ai-chat-btn')) {
        currentContextMenuTarget = e.target.closest('#ai-chat-btn');
        menuItems.push({ label: 'Open AI Chat', action: 'taskbar-open-ai-chat', icon: 'fa-comment-dots' });
        menuItems.push({ label: 'Open New Chat', action: 'taskbar-new-chat', icon: 'fa-plus' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Chat Settings', action: 'taskbar-ai-chat-settings', icon: 'fa-gear' });
        menuItems.push({ label: 'Chat history', action: 'taskbar-chat-history', icon: 'fa-history' });
        menuItems.push({ label: 'Clear chat', action: 'taskbar-clear-chat', icon: 'fa-broom' });

      } else if (e.target.closest('.taskbar-right #widgets-toggle-btn')) {
        currentContextMenuTarget = e.target.closest('#widgets-toggle-btn');
        menuItems.push({ label: 'Always show widgets', action: 'always-show-widgets', icon: 'fa-folder-open' });
        menuItems.push({ label: 'Disable widgets', action: 'disable-widgets', icon: 'fa-copy' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Customize widgets', action: 'customize-widgets', icon: 'fa-gear' });

      } else if (
        e.target === desktopArea ||
        (e.target.classList && e.target.classList.contains('desktop-icons'))
      ) {
        menuItems.push({
          label: 'View', icon: 'fa-eye', subItems: [
            { label: 'Desktop mode', action: 'desktop-mode', icon: 'fa-desktop' },
            { label: 'App launcher mode', action: 'desktop-app-launcher-mode', icon: 'fa-grip' },
            { label: 'Easy Mode', action: 'app-launcher-easy-mode', icon: 'fa-chalkboard' },
            { type: 'separator' },
            { label: 'Widgets Mode', action: 'widgets-mode', icon: 'fa-shapes' },


          ]
        });
        menuItems.push({
          label: 'Sort by', icon: 'fa-sort', subItems: [
            { label: 'Name', action: 'sort-name', icon: 'fa-sort-alpha-down' },
            { label: 'Date', action: 'sort-date', icon: 'fa-arrow-down-1-9' },
            { label: 'Type', action: 'sort-type', icon: 'fa-arrow-down-wide-short' },
          ]
        });
        menuItems.push({ label: 'Refresh', action: 'refresh', icon: 'fa-arrows-rotate' });
        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Paste', action: 'paste', icon: 'fa-paste', disabled: true });
        menuItems.push({ label: 'Upload files', action: 'upload-files', icon: 'fa-upload' });
        menuItems.push({
          label: 'New', action: 'create-new', icon: 'fa-file-medical', subItems: [
            { label: 'Folder', action: 'new-folder', icon: 'fa-folder-plus' },
            { type: 'separator' },
            { label: 'File', action: 'new-file', icon: 'fa-file-medical' },
            { label: 'Text file', action: 'new-text-file', icon: 'fa-file-alt' },
            { label: 'Spreadsheet', action: 'new-spreadsheet', icon: 'fa-file-excel' },
            { label: 'Presentation', action: 'new-presentation', icon: 'fa-file-powerpoint' }

          ]
        });

        menuItems.push({ type: 'separator' });
        menuItems.push({ label: 'Help & Support', action: 'help-and-support', icon: 'fa-question-circle' });
        menuItems.push({ label: 'Personalize', action: 'personalize', icon: 'fa-paint-brush' });

      }

      // After all menuItems are pushed, but before calling populateContextMenu:
      for (const item of menuItems) {
        if (item.action === 'pin-to-taskbar') {
          let appName = null;
          if (currentContextMenuTarget) {
            appName = currentContextMenuTarget.getAttribute('data-app');
            // If taskbar icon, try data-window-id to get app name from openWindows
            if (!appName && currentContextMenuTarget.classList.contains('taskbar-app-icon')) {
              const winId = currentContextMenuTarget.getAttribute('data-window-id');
              if (winId && openWindows[winId]) appName = openWindows[winId].name;
            }
            if (!appName && currentContextMenuTarget.classList.contains('pinned-only')) {
              appName = currentContextMenuTarget.getAttribute('data-app');
            }
          }
          if (appName && isAppPinned(appName)) {
            item.label = 'Unpin from Taskbar';
            item.action = 'unpin-taskbar';
          } else {
            item.label = 'Pin To Taskbar';
            item.action = 'pin-to-taskbar';
          }
        }
      }

      if (menuItems.length > 0) populateContextMenu(menuItems, e.clientX, e.clientY);
    });
  }




  function populateContextMenu(menuItems, x, y) {
    if (!contextMenu) return;
    contextMenu.innerHTML = '';
    let submenuEl = null;
    let submenuHideTimeout = null;
    menuItems.forEach(item => {
      const menuItemEl = document.createElement('div');
      menuItemEl.className = 'context-menu-item';
      if (item.type === 'separator') {
        menuItemEl.className = 'context-menu-separator';
      } else {
        menuItemEl.innerHTML = (item.icon ? `<i class=\"fas ${item.icon}\"></i>` : '') + `<span>${item.label}</span>`;
        if (item.disabled) menuItemEl.classList.add('disabled');
        // Only add .has-submenu and chevron if this is a top-level item with a submenu
        if (Array.isArray(item.subItems) && item.subItems.length > 0) {
          menuItemEl.classList.add('has-submenu');
          const chevron = document.createElement('i');
          chevron.className = 'fas fa-chevron-right context-menu-chevron';
          menuItemEl.appendChild(chevron); // Always last for flex
        }
        menuItemEl.addEventListener('click', async (e) => {
          if (!item.disabled && !(Array.isArray(item.subItems) && item.subItems.length > 0)) {

            console.log('Clicked menu item:', item.label, item.action);
            // Detailed logging for clipboard actions
            if (item.action && item.action.startsWith('text-')) {
              console.log('Active element:', document.activeElement);
              console.log('CurrentContextMenuTarget:', currentContextMenuTarget);
              if (currentContextMenuTarget) {
                console.log('Selection:', currentContextMenuTarget.selectionStart, currentContextMenuTarget.selectionEnd);
                console.log('Is contenteditable:', currentContextMenuTarget.isContentEditable);
              }
            }
            try {
              console.log('About to call window.executeContextMenuAction:', item.action, typeof window.executeContextMenuAction, window.executeContextMenuAction);
              await window.executeContextMenuAction(item.action);
            } catch (err) {
              console.error('Context menu action error:', err);
            }
            hideContextMenu();
          }
          e.stopPropagation();
        });
        // Submenu logic
        if (Array.isArray(item.subItems) && item.subItems.length > 0) {
          menuItemEl.addEventListener('mouseenter', function (e) {
            if (submenuHideTimeout) clearTimeout(submenuHideTimeout);
            if (submenuEl && submenuEl.parentNode) submenuEl.parentNode.removeChild(submenuEl);
            submenuEl = document.createElement('div');
            submenuEl.className = 'context-menu submenu';
            submenuEl.style.position = 'fixed';
            submenuEl.style.zIndex = '1000001';
            submenuEl.style.visibility = 'hidden';
            submenuEl.classList.remove('hidden');
            submenuEl.innerHTML = '';
            item.subItems.forEach(subItem => {
              if (subItem.type === 'separator') {
                const subSep = document.createElement('div');
                subSep.className = 'context-menu-separator';
                submenuEl.appendChild(subSep);
                return;
              }
              const subItemEl = document.createElement('div');
              subItemEl.className = 'context-menu-item context-menu-submenu-item';
              // Add check mark if this is the selected notification mode or wallet display mode
              let showCheck = false;
              if (
                subItem.checked || // NEW: Check the item's checked property
                (subItem.action === 'show-only-1-notification' && desktopNotificationMode === 'one') ||
                (subItem.action === 'show-only-3-notifications' && desktopNotificationMode === 'three') ||
                (subItem.action === 'show-all-notifications' && desktopNotificationMode === 'all') ||
                (subItem.action === 'show-wallet-icon' && window.walletDisplayMode === 'icon') ||
                (subItem.action === 'show-account-balance' && window.walletDisplayMode === 'balance')
              ) {
                showCheck = true;
              }
              // Render icon for submenu item if present
              subItemEl.innerHTML = (subItem.icon ? `<i class=\"fas ${subItem.icon}\"></i>` : '') + `<span>${subItem.label}</span>` + (showCheck ? '<i class="fas fa-check context-menu-checkmark"></i>' : '');
              if (subItem.disabled) subItemEl.classList.add('disabled');
              // Never add chevron or .has-submenu to submenu items
              subItemEl.addEventListener('click', (ev) => {
                if (!subItem.disabled) {
                  window.executeContextMenuAction(subItem.action);
                  hideContextMenu();
                  // Remove submenu if present
                  if (submenuEl && submenuEl.parentNode) {
                    submenuEl.parentNode.removeChild(submenuEl);
                    submenuEl = null;
                  }
                }
                ev.stopPropagation();
              });
              submenuEl.appendChild(subItemEl);
            });
            document.body.appendChild(submenuEl);
            // Position submenu to the right of the parent item
            const parentRect = menuItemEl.getBoundingClientRect();
            const menuRect = contextMenu.getBoundingClientRect();
            submenuEl.style.left = (parentRect.right) + 'px';
            submenuEl.style.top = (parentRect.top) + 'px';
            // Measure submenu size
            submenuEl.style.visibility = 'hidden';
            submenuEl.classList.remove('hidden');
            const subW = submenuEl.offsetWidth;
            const subH = submenuEl.offsetHeight;
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            let subX = parentRect.right;
            let subY = parentRect.top;
            // Flip left if overflow right
            if (subX + subW > viewportWidth) {
              subX = parentRect.left - subW;
              if (subX < 5) subX = viewportWidth - subW - 5;
            }
            // Flip up if overflow bottom
            if (subY + subH > viewportHeight) {
              subY = parentRect.bottom - subH;
              if (subY < 5) subY = viewportHeight - subH - 5;
            }
            // Clamp
            if (subX < 5) subX = 5;
            if (subY < 5) subY = 5;
            submenuEl.style.left = subX + 'px';
            submenuEl.style.top = subY + 'px';
            submenuEl.style.visibility = '';
            submenuEl.classList.remove('hidden');
            // Keep submenu open as long as parent or submenu is hovered
            function keepSubmenuOpen(ev) {
              if (!submenuEl) return;
              if (submenuEl.matches(':hover') || menuItemEl.matches(':hover')) {
                if (submenuHideTimeout) clearTimeout(submenuHideTimeout);
                submenuHideTimeout = null;
              } else {
                if (!submenuHideTimeout) {
                  submenuHideTimeout = setTimeout(() => {
                    if (submenuEl && submenuEl.parentNode) submenuEl.parentNode.removeChild(submenuEl);
                    submenuEl = null;
                  }, 60);
                }
              }
            }
            menuItemEl.addEventListener('mouseleave', keepSubmenuOpen);
            submenuEl.addEventListener('mouseleave', keepSubmenuOpen);
            submenuEl.addEventListener('mouseenter', function () {
              if (submenuHideTimeout) clearTimeout(submenuHideTimeout);
              submenuHideTimeout = null;
            });
          });
          // Remove submenu immediately if mouse leaves both parent and submenu
          menuItemEl.addEventListener('mouseleave', function (e) {
            if (!submenuEl) return;
            if (submenuHideTimeout) clearTimeout(submenuHideTimeout);
            submenuHideTimeout = setTimeout(() => {
              if (submenuEl && submenuEl.parentNode) submenuEl.parentNode.removeChild(submenuEl);
              submenuEl = null;
            }, 60);
          });
        }
      }
      contextMenu.appendChild(menuItemEl);
    });
    // After building, forcibly remove any chevron not a direct child of a .context-menu-item.has-submenu
    setTimeout(() => {
      document.querySelectorAll('.context-menu-chevron').forEach(chev => {
        if (!chev.parentElement || !chev.parentElement.classList.contains('has-submenu')) {
          chev.remove();
        }
      });
    }, 0);
    // Temporarily show to measure size
    contextMenu.style.visibility = 'hidden';
    contextMenu.classList.remove('hidden');
    contextMenu.style.left = '0px';
    contextMenu.style.top = '0px';
    const menuWidth = contextMenu.offsetWidth;
    const menuHeight = contextMenu.offsetHeight;
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    let finalX = x;
    let finalY = y;
    // Flip horizontally if near right edge
    if (x + menuWidth > viewportWidth) {
      finalX = x - menuWidth;
      if (finalX < 5) finalX = viewportWidth - menuWidth - 5;
    }
    // Flip vertically if near bottom edge
    if (y + menuHeight > viewportHeight) {
      finalY = y - menuHeight;
      if (finalY < 5) finalY = viewportHeight - menuHeight - 5;
    }
    // Clamp to left/top edge
    if (finalX < 5) finalX = 5;
    if (finalY < 5) finalY = 5;
    contextMenu.style.left = `${finalX}px`;
    contextMenu.style.top = `${finalY}px`;
    contextMenu.style.visibility = '';
    contextMenu.classList.remove('hidden');
    // macOS-like pop animation from mouse location
    // Set transform-origin to mouse position relative to menu
    const originX = x - finalX;
    const originY = y - finalY;
    contextMenu.style.transformOrigin = `${originX}px ${originY}px`;
    contextMenu.classList.remove('context-menu-anim-pop');
    void contextMenu.offsetWidth; // force reflow
    contextMenu.classList.add('context-menu-anim-pop');
    contextMenu.addEventListener('animationend', function handler() {
      contextMenu.classList.remove('context-menu-anim-pop');
      contextMenu.removeEventListener('animationend', handler);
    });
  }
  function executeContextMenuAction(action) {
    if (!currentContextMenuTarget) return;
    switch (action) {
      case 'taskbar-icons-middle-alignment':
        // Default style - center alignment
        const taskbarAppIcons = document.querySelector('.taskbar-app-icons');
        if (taskbarAppIcons) {
          // Remove any existing alignment classes
          taskbarAppIcons.classList.remove('taskbar-icons-left');
          document.querySelector('.taskbar').classList.remove('taskbar-windows11-style');
          document.querySelector('.taskbar').classList.remove('taskbar-text-mode');
          
          // Ensure proper order of elements in taskbar
          const startButton = document.getElementById('start-button');
          const searchContainer = document.querySelector('.search-container');
          const taskbar = document.querySelector('.taskbar');
          
          if (startButton && taskbar && searchContainer) {
            // Make sure start button is first
            taskbar.insertBefore(startButton, taskbar.firstChild);
            
            // Make sure search container is after start button
            if (searchContainer.previousElementSibling !== startButton) {
              taskbar.insertBefore(searchContainer, startButton.nextSibling);
            }
            
            // Make sure app icons container is after search container
            taskbar.insertBefore(taskbarAppIcons, searchContainer.nextSibling);
          }
          // Reset any start menu positioning
          const startMenu = document.getElementById('start-menu');
          if (startMenu) {
            startMenu.style.left = '';
          }
          // Restore original toggleStartMenu if it was modified
          if (window.originalToggleStartMenu) {
            window.toggleStartMenu = window.originalToggleStartMenu;
          }
          // Save the preference
          localStorage.setItem('taskbarStyle', 'default');
          if (typeof showShortTopNotification === 'function') {
            showShortTopNotification('Taskbar style set to Default');
          }
          
          // Force re-render of taskbar icons
          renderPinnedTaskbarIcons();
        }
        break;
        
      case 'taskbar-windows11-alignment':
        // Windows 11 style - center alignment with start button positioned absolutely
        const taskbarAppIconsWin11 = document.querySelector('.taskbar-app-icons');
        if (taskbarAppIconsWin11) {
          // Remove left alignment if present
          taskbarAppIconsWin11.classList.remove('taskbar-icons-left');
          // Remove text mode if present
          document.querySelector('.taskbar').classList.remove('taskbar-text-mode');
          
          // Get the taskbar and start button
          const taskbar = document.querySelector('.taskbar');
          const startButtonWin11 = document.getElementById('start-button');
          
          if (taskbar && startButtonWin11) {
            // First, make sure the start button is in its original position
            // outside of the app icons container to preserve its context menu
            if (startButtonWin11.parentElement !== taskbar) {
              taskbar.insertBefore(startButtonWin11, taskbarAppIconsWin11);
            }
            
            // Add Windows 11 style class to taskbar
            taskbar.classList.add('taskbar-windows11-style');
            
            // Fix the start menu position when in Windows 11 style
            if (typeof toggleStartMenu === 'function') {
              // Save the original function if not already saved
              if (!window.originalToggleStartMenu) {
                window.originalToggleStartMenu = toggleStartMenu;
              }
              
              window.toggleStartMenu = function(e) {
                const startMenu = document.getElementById('start-menu');
                if (startMenu) {
                  // Position the start menu under the start button in Windows 11 style
                  if (document.querySelector('.taskbar').classList.contains('taskbar-windows11-style')) {
                    const startButtonWin11 = document.getElementById('start-button');
                    if (startButtonWin11) {
                      const startButtonRect = startButtonWin11.getBoundingClientRect();
                      startMenu.style.left = startButtonRect.left + 'px';
                    }
                  } else {
                    startMenu.style.left = ''; // Reset to default for other styles
                  }
                }
                // Call the original function
                return window.originalToggleStartMenu.apply(this, arguments);
              };
            }
          }
          
          // Save the preference
          localStorage.setItem('taskbarStyle', 'windows11');
          if (typeof showShortTopNotification === 'function') {
            showShortTopNotification('Taskbar style set to Windows 11');
          }
          
          // Force re-render of taskbar icons
          renderPinnedTaskbarIcons();
        }
        break;
        
      case 'taskbar-icons-left-alignment':
        // Left alignment - exactly like default but with left-aligned icons
        const taskbarAppIconsLeft = document.querySelector('.taskbar-app-icons');
        if (taskbarAppIconsLeft) {
          // Add left alignment class
          taskbarAppIconsLeft.classList.add('taskbar-icons-left');
          // Remove Windows 11 style if present
          document.querySelector('.taskbar').classList.remove('taskbar-windows11-style');
          // Remove text-mode class if present
          document.querySelector('.taskbar').classList.remove('taskbar-text-mode');
          
          // Ensure proper order of elements in taskbar
          const startButtonLeft = document.getElementById('start-button');
          const searchContainer = document.querySelector('.search-container');
          const taskbarLeft = document.querySelector('.taskbar');
          
          if (startButtonLeft && taskbarLeft && searchContainer) {
            // Make sure start button is first
            taskbarLeft.insertBefore(startButtonLeft, taskbarLeft.firstChild);
            
            // Make sure search container is after start button
            if (searchContainer.previousElementSibling !== startButtonLeft) {
              taskbarLeft.insertBefore(searchContainer, startButtonLeft.nextSibling);
            }
            
            // Make sure app icons container is after search container
            taskbarLeft.insertBefore(taskbarAppIconsLeft, searchContainer.nextSibling);
          }
          // Reset any start menu positioning
          const startMenu = document.getElementById('start-menu');
          if (startMenu) {
            startMenu.style.left = '';
          }
          // Restore original toggleStartMenu if it was modified
          if (window.originalToggleStartMenu) {
            window.toggleStartMenu = window.originalToggleStartMenu;
          }
          // Save the preference
          localStorage.setItem('taskbarStyle', 'left');
          if (typeof showShortTopNotification === 'function') {
            showShortTopNotification('Taskbar icons aligned to the left');
          }
          
          // Force re-render of taskbar icons
          renderPinnedTaskbarIcons();
        }
        break;
        
      case 'taskbar-icons-and-text-apps':
        // Icons and text - like left alignment but with app names displayed
        const taskbarAppIconsText = document.querySelector('.taskbar-app-icons');
        if (taskbarAppIconsText) {
          // Add left alignment class
          taskbarAppIconsText.classList.add('taskbar-icons-left');
          // Remove Windows 11 style if present
          document.querySelector('.taskbar').classList.remove('taskbar-windows11-style');
          // Add text-mode class
          document.querySelector('.taskbar').classList.add('taskbar-text-mode');
          
          // Ensure proper order of elements in taskbar
          const startButtonText = document.getElementById('start-button');
          const searchContainer = document.querySelector('.search-container');
          const taskbarText = document.querySelector('.taskbar');
          
          if (startButtonText && taskbarText && searchContainer) {
            // Make sure start button is first
            taskbarText.insertBefore(startButtonText, taskbarText.firstChild);
            
            // Make sure search container is after start button
            if (searchContainer.previousElementSibling !== startButtonText) {
              taskbarText.insertBefore(searchContainer, startButtonText.nextSibling);
            }
            
            // Make sure app icons container is after search container
            taskbarText.insertBefore(taskbarAppIconsText, searchContainer.nextSibling);
          }
          
          // Reset any start menu positioning
          const startMenu = document.getElementById('start-menu');
          if (startMenu) {
            startMenu.style.left = '';
          }
          
          // Restore original toggleStartMenu if it was modified
          if (window.originalToggleStartMenu) {
            window.toggleStartMenu = window.originalToggleStartMenu;
          }
          
          // Save the preference
          localStorage.setItem('taskbarStyle', 'text');
          if (typeof showShortTopNotification === 'function') {
            showShortTopNotification('Taskbar icons and text mode enabled');
          }
          
          // Force re-render of taskbar icons to include text
          renderPinnedTaskbarIcons();
        }
        break;
        
      case 'open-app':
        if (currentContextMenuTarget.matches('.desktop-icon')) {
          if (window.innerWidth <= MOBILE_BREAKPOINT) {
            // On mobile, trigger a single click
            currentContextMenuTarget.dispatchEvent(new MouseEvent('click', { bubbles: true, button: 0 }));
          } else {
            // On desktop, trigger a double click
            currentContextMenuTarget.dispatchEvent(new MouseEvent('dblclick', { bubbles: true, button: 0 }));
          }
        }
        break;
      case 'open-taskbar-icon': {
        // Restore a minimized window from the taskbar context menu
        if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('taskbar-app-icon')) {
          const winId = currentContextMenuTarget.getAttribute('data-window-id');
          if (winId && openWindows[winId] && openWindows[winId].element) {
            const windowElement = openWindows[winId].element;
            const taskbarIcon = openWindows[winId].taskbarIcon;
            if (windowElement.classList.contains('minimized')) {
              if (typeof toggleMinimizeWindow === 'function') toggleMinimizeWindow(windowElement, taskbarIcon);
            }
            if (typeof makeWindowActive === 'function') makeWindowActive(windowElement);
            if (typeof hideContextMenu === 'function') hideContextMenu();
          }
        }
        break;
      }
      case 'add-to-desktop':
        if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('app-grid-item')) {
          const appName = currentContextMenuTarget.getAttribute('data-app');
          const appTitle = currentContextMenuTarget.getAttribute('data-app-title') || currentContextMenuTarget.querySelector('span')?.textContent || appName;
          // Get icon details from startMenuApps, fallback to getAppIconDetails
          let details = { iconClass: 'fa-window-maximize', iconBgClass: 'gray-icon' };
          if (typeof startMenuApps !== 'undefined') {
            const appObj = startMenuApps.find(a =>
              a.id === appName
            );
            if (appObj) {
              details.iconClass = appObj.iconClass || details.iconClass;
              details.iconBgClass = appObj.iconBgClass || details.iconBgClass;
            } else {
              details = getAppIconDetails(appName);
            }
          } else {
            details = getAppIconDetails(appName);
          }
          const desktopIconsContainer = document.querySelector('.desktop-icons');
          if (!desktopIconsContainer) {
            if (typeof showShortTopNotification === 'function') showShortTopNotification('Desktop not found');
            break;
          }
          // Robust check: if already on desktop, do not add
          if (desktopIconsContainer.querySelector('.desktop-icon[data-app="' + appName + '"]')) {
            if (typeof showShortTopNotification === 'function') showShortTopNotification('Already on Desktop');
            break;
          }
          const icon = document.createElement('div');
          icon.className = 'desktop-icon';
          icon.setAttribute('data-app', appName);
          icon.setAttribute('data-created', new Date().toISOString()); // Set creation date
          icon.innerHTML = `
            <div class="icon-container ${details.iconBgClass}"><i class="fas ${details.iconClass}"></i></div>
            <span>${appTitle}</span>
          `;
          // --- Find first available grid slot ---
          if (window.innerWidth > 1023) {
            // Use grid logic
            const leftOffset = GRID_GAP;
            const topOffset = GRID_GAP;
            const colWidth = GRID_CELL_WIDTH + GRID_GAP;
            const iconHeight = GRID_CELL_HEIGHT;
            const verticalGap = GRID_GAP;
            const taskbar = document.querySelector('.taskbar');
            const taskbarHeight = taskbar ? taskbar.offsetHeight : 0;
            const availableHeight = window.innerHeight - taskbarHeight - 50; // 30px bottom margin
            const maxRows = Math.max(1, Math.floor((availableHeight - topOffset) / (iconHeight + verticalGap)));
            const maxCols = Math.max(1, Math.floor((desktopIconsContainer.clientWidth - leftOffset) / colWidth));
            // Mark occupied slots
            const occupied = {};
            desktopIconsContainer.querySelectorAll('.desktop-icon').forEach(existingIcon => {
              const left = parseInt(existingIcon.style.left, 10);
              const top = parseInt(existingIcon.style.top, 10);
              if (!isNaN(left) && !isNaN(top)) {
                const col = Math.round((left - leftOffset) / colWidth);
                const row = Math.round((top - topOffset) / (iconHeight + verticalGap));
                occupied[`${col},${row}`] = true;
              }
            });
            // Find first free slot (column by column, then row)
            let found = false;
            let targetCol = 0, targetRow = 0;
            outer: for (let col = 0; col < maxCols; col++) {
              for (let row = 0; row < maxRows; row++) {
                if (!occupied[`${col},${row}`]) {
                  targetCol = col;
                  targetRow = row;
                  found = true;
                  break outer;
                }
              }
            }
            // Place icon at found slot
            const iconLeft = leftOffset + targetCol * colWidth;
            const iconTop = topOffset + targetRow * (iconHeight + verticalGap);
            icon.style.position = 'absolute';
            icon.style.left = iconLeft + 'px';
            icon.style.top = iconTop + 'px';
            icon.setAttribute('data-absolute', 'true');
          }
          desktopIconsContainer.appendChild(icon);
          setupDesktopIcon(icon);
          if (typeof showShortTopNotification === 'function') showShortTopNotification('Added to Desktop');
          // Save positions if using absolute
          if (window.innerWidth > 1023 && saveDesktopIconPositions && saveDesktopIconPositions());
        }
        break;
      case 'open-settings':
        openApp('settings', 'Settings', 'fa-cog', 'green');
        break;
      case 'sort-name': {
        // Only handle if desktop area is context
        const desktopIconsContainer = document.querySelector('.desktop-icons');
        if (desktopIconsContainer && (currentContextMenuTarget === desktopIconsContainer || currentContextMenuTarget.classList.contains('desktop-icons'))) {
          const icons = Array.from(desktopIconsContainer.querySelectorAll('.desktop-icon'));
          icons.sort((a, b) => {
            const aName = a.querySelector('span')?.textContent?.toLowerCase() || '';
            const bName = b.querySelector('span')?.textContent?.toLowerCase() || '';
            return aName.localeCompare(bName);
          });
          icons.forEach(icon => desktopIconsContainer.appendChild(icon));
          saveCurrentDesktopIconOrder();
          if (typeof showShortTopNotification === 'function') showShortTopNotification('Sorted by name');
          initializeDesktopIconPositions(); // Always re-layout
        } else {
          _originalExecuteContextMenuAction.call(this, action);
        }
        break;
      }
      case 'sort-date': {
        const desktopIconsContainer = document.querySelector('.desktop-icons');
        if (desktopIconsContainer && (currentContextMenuTarget === desktopIconsContainer || currentContextMenuTarget.classList.contains('desktop-icons'))) {
          const icons = Array.from(desktopIconsContainer.querySelectorAll('.desktop-icon'));
          icons.sort((a, b) => {
            // Use data-created attribute if present, else fallback to DOM order
            const aDate = a.getAttribute('data-created') || a.dataset.created || '';
            const bDate = b.getAttribute('data-created') || b.dataset.created || '';
            if (aDate && bDate) return aDate.localeCompare(bDate);
            return 0; // fallback: keep DOM order
          });
          icons.forEach(icon => desktopIconsContainer.appendChild(icon));
          saveCurrentDesktopIconOrder();
          if (typeof showShortTopNotification === 'function') showShortTopNotification('Sorted by date');
          initializeDesktopIconPositions(); // Always re-layout
        } else {
          _originalExecuteContextMenuAction.call(this, action);
        }
        break;
      }
      case 'sort-type': {
        const desktopIconsContainer = document.querySelector('.desktop-icons');
        if (desktopIconsContainer && (currentContextMenuTarget === desktopIconsContainer || currentContextMenuTarget.classList.contains('desktop-icons'))) {
          // Get app ids from startMenuApps
          const appIds = (window.startMenuApps || []).map(app => app.id);
          const icons = Array.from(desktopIconsContainer.querySelectorAll('.desktop-icon'));
          // Apps first, then files, both alphabetically
          const isApp = icon => appIds.includes(icon.getAttribute('data-app'));
          icons.sort((a, b) => {
            const aIsApp = isApp(a);
            const bIsApp = isApp(b);
            if (aIsApp && !bIsApp) return -1;
            if (!aIsApp && bIsApp) return 1;
            // Both same type, sort by name
            const aName = a.querySelector('span')?.textContent?.toLowerCase() || '';
            const bName = b.querySelector('span')?.textContent?.toLowerCase() || '';
            return aName.localeCompare(bName);
          });
          icons.forEach(icon => desktopIconsContainer.appendChild(icon));
          saveCurrentDesktopIconOrder();
          if (typeof showShortTopNotification === 'function') showShortTopNotification('Sorted by type (apps first)');
          initializeDesktopIconPositions(); // Always re-layout
        } else {
          _originalExecuteContextMenuAction.call(this, action);
        }
        break;
      }
      case 'remove-from-desktop':
        if (currentContextMenuTarget && currentContextMenuTarget.classList.contains('desktop-icon')) {
          const appName = currentContextMenuTarget.getAttribute('data-app');
          // Remove the icon from the DOM
          const parent = currentContextMenuTarget.parentElement;
          if (parent) {
            parent.removeChild(currentContextMenuTarget);
            // Update icon order and positions
            saveCurrentDesktopIconOrder && saveCurrentDesktopIconOrder();
            if (window.innerWidth > 1023 && typeof saveDesktopIconPositions === 'function') saveDesktopIconPositions();
            if (typeof showShortTopNotification === 'function') showShortTopNotification('Removed from Desktop');
          }
          if (typeof hideContextMenu === 'function') hideContextMenu();
        }
        break;

      case 'app-launcher-easy-mode':
      case 'single-task-mode':
        switchToEasyMode();
        return;
      case 'desktop-mode':
        switchToDesktopMode();
        return;
      case 'widgets-mode':
        if (typeof window.switchToWidgetMode === 'function') {
          window.switchToWidgetMode();
        }
        return;
      case 'toggle-search-taskbar':
        const searchBar = document.querySelector('.taskbar .search-container');
        if (searchBar) {
          const searchBarVisible = searchBar.style.display !== 'none';
          searchBar.style.display = searchBarVisible ? 'none' : 'flex';
          // Update the context menu label
          const searchMenuItem = currentContextMenuTarget.closest('.context-menu-item');
          if (searchMenuItem) {
            searchMenuItem.querySelector('span').textContent = searchBarVisible ? 'Show search bar' : 'Hide search bar';
          }
        }
        break;
      case 'show-desktop': {
        // Minimize all open windows
        if (typeof openWindows === 'object' && typeof toggleMinimizeWindow === 'function') {
          Object.values(openWindows).forEach(winObj => {
            if (winObj.element && !winObj.element.classList.contains('minimized')) {
              toggleMinimizeWindow(winObj.element, winObj.taskbarIcon);
            }
          });
          if (typeof showShortTopNotification === 'function') {
            showShortTopNotification('All windows minimized');
          }
        }
        if (typeof hideContextMenu === 'function') hideContextMenu();
        break;
      }
      case 'clear-all-notifications':
        clearAllNotifications();
        break;
    }
  }

  // Widgets scroll handle logic
  const widgetsScrollHandle = document.getElementById('widgets-scroll-handle');
  const widgetsScreen = document.getElementById('widgets-screen');
  if (widgetsScrollHandle && widgetsScreen) {
    widgetsScrollHandle.addEventListener('wheel', function (e) {
      // Forward the scroll to the widgets panel
      widgetsScreen.scrollTop += e.deltaY;
      e.preventDefault();
    }, { passive: false });

    // Enhanced widget scroll handle interaction
    initWidgetsInteraction();
  }

  function initWidgetsInteraction() {
    if (!widgetsScrollHandle || !widgetsScreen) return;

    // Remove previous listeners to avoid duplicates
    widgetsScrollHandle.onmouseenter = null;
    widgetsScreen.onmouseenter = null;
    widgetsScrollHandle.onmouseleave = null;
    widgetsScreen.onmouseleave = null;

    if (window.innerWidth <= 1023) {
      // Mobile/tablet: always allow scroll and pointer events for touch
      widgetsScreen.style.overflowY = 'auto';
      widgetsScreen.style.pointerEvents = 'auto';
      widgetsScrollHandle.style.cursor = 'pointer';
    } else {
      // Desktop: always allow scroll, but do NOT set pointer-events (let CSS z-index handle stacking)
      widgetsScreen.style.overflowY = 'auto';
      // widgetsScreen.style.pointerEvents = 'auto'; // REMOVE THIS LINE
    }
  }

  // Add a wheel event listener to main-content-area to scroll widgetsScreen if mouse is over its area
  const mainContentArea = document.querySelector('.main-content-area');
  if (mainContentArea && widgetsScreen) {
    mainContentArea.addEventListener('wheel', function (e) {
      if (window.innerWidth >= 1024) {
        const rect = widgetsScreen.getBoundingClientRect();
        if (
          e.clientX >= rect.left &&
          e.clientX <= rect.right &&
          e.clientY >= rect.top &&
          e.clientY <= rect.bottom
        ) {
          widgetsScreen.scrollTop += e.deltaY;
        }
      }
    }, { passive: true });
  }

  updateCurrentTime();
  setInterval(updateCurrentTime, 60000);
  if (typeof populateStartMenuApps === 'function') populateStartMenuApps();
  else console.error('populateStartMenuApps is not defined or not a function');

  initializeDesktopIconPositions();

  // Add snap overlay for snap hints if not present
  if (!document.getElementById('snap-overlay')) {
    const snapOverlay = document.createElement('div');
    snapOverlay.id = 'snap-overlay';
    snapOverlay.style.position = 'fixed';
    snapOverlay.style.top = '0';
    snapOverlay.style.left = '0';
    snapOverlay.style.width = '100vw';
    snapOverlay.style.height = '100vh';
    snapOverlay.style.pointerEvents = 'none';
    snapOverlay.style.zIndex = '99999';
    snapOverlay.style.display = 'none';
    document.body.appendChild(snapOverlay);
  }

  // Helper to check if the window is truly windowed (not maximized, not snapped)
  function isTrulyWindowed(windowElement) {
    if (!windowElement.classList.contains('maximized')) return true;
    // If maximized but not full screen (i.e., snapped), treat as not windowed
    const left = windowElement.style.left;
    const width = windowElement.style.width;
    // Snap left
    if (left === '0px' && width === Math.floor(window.innerWidth / 2) + 'px') return false;
    // Snap right
    if (left === Math.floor(window.innerWidth / 2) + 'px' && width === Math.floor(window.innerWidth / 2) + 'px') return false;
    // Maximized (full screen)
    if (left === '0px' && width === window.innerWidth + 'px') return false;
    return false;
  }

  // Helper to save the last windowed (not maximized/snapped) state
  function saveWindowedState(windowElement) {
    if (isTrulyWindowed(windowElement)) {
      windowElement.dataset.prevWidth = windowElement.style.width || windowElement.offsetWidth + 'px';
      windowElement.dataset.prevHeight = windowElement.style.height || windowElement.offsetHeight + 'px';
      windowElement.dataset.prevLeft = windowElement.style.left || windowElement.offsetLeft + 'px';
      windowElement.dataset.prevTop = windowElement.style.top || windowElement.offsetTop + 'px';
    }
  }

  // Add App launcher desktop icon if not present
  document.addEventListener('DOMContentLoaded', function () {

    // Add App launcher icon to desktop
    if (desktopIconsContainer && !document.querySelector('.desktop-icon[data-app="app-launcher"]')) {
      const appLauncherIcon = document.createElement('div');
      appLauncherIcon.className = 'desktop-icon';
      appLauncherIcon.setAttribute('data-app', 'app-launcher');
      appLauncherIcon.innerHTML = `
        <div class="icon-container blue-icon"><i class="fas fa-th"></i></div>
        <span>App launcher</span>
      `;
      desktopIconsContainer.appendChild(appLauncherIcon);
    }

  });
  // --- App launcher window logic and event listener ---
  function openAppLauncherWindow(iconElementForAnim) {
    if (typeof window.hideWalletSidebar === 'function') window.hideWalletSidebar();
    // Prevent multiple launchers
    if (document.getElementById('app-launcher-overlay')) {
      return;
    }
    // Create fullscreen overlay
    const overlay = document.createElement('div');
    overlay.id = 'app-launcher-overlay';
    overlay.style.position = 'fixed';
    overlay.style.top = '0';
    overlay.style.left = '0';
    overlay.style.width = '100vw';
    overlay.style.height = '100vh';
    //overlay.style.background = '#050217d0';
    overlay.style.zIndex = '5000';
    overlay.style.display = 'flex';
    overlay.style.alignItems = 'center';
    overlay.style.justifyContent = 'center';
    overlay.style.flexDirection = 'column'; // Stack search bar above grid
    overlay.style.backdropFilter = 'blur(70px)';
    overlay.style.transition = 'opacity 0.3s';
    overlay.style.opacity = '0';
    overlay.tabIndex = 0;
    overlay.style.background = 'radial-gradient(circle, #050217a6 40%, #050217a6 100%)';

    // --- macOS-style search bar ---
    const searchBarContainer = document.createElement('div');
    searchBarContainer.className = 'search-bar-container';

    searchBarContainer.style.maxWidth = '100vw;';
    searchBarContainer.style.margin = '40px auto 0 auto';
    searchBarContainer.style.display = 'flex';
    searchBarContainer.style.justifyContent = 'center';
    searchBarContainer.style.alignItems = 'center';
    searchBarContainer.style.position = 'sticky';
    searchBarContainer.style.top = '0';
    searchBarContainer.style.zIndex = '10';
    searchBarContainer.style.height = '44px'; // Match input height
    searchBarContainer.style.marginBottom = '24px'; // Add spacing below the whole bar
    searchBarContainer.style.background = 'transparent';

    const searchInput = document.createElement('input');
    searchInput.type = 'text';
    searchInput.placeholder = 'Start typing...';
    searchInput.style.width = '100%';
    searchInput.style.height = '44px';
    searchInput.style.borderRadius = '0px';
    searchInput.style.border = 'none';
    searchInput.style.background = 'transparent';
    searchInput.style.color = '#fff';
    searchInput.style.fontSize = '20px';
    searchInput.style.outline = 'none';
    //searchInput.style.marginBottom = '24px'; // Remove this line
    searchInput.style.fontFamily = 'inherit';
    searchInput.style.letterSpacing = '0.01em';
    searchInput.autofocus = true;
    searchInput.style.display = 'block';
    searchInput.style.position = 'relative';
    searchInput.style.textAlign = 'center';
    // Add a search icon (macOS style)
    const searchIcon = document.createElement('i');
    searchIcon.className = 'fas fa-search';
    searchIcon.style.position = 'absolute';
    searchIcon.style.left = '18px';
    searchIcon.style.top = '0';
    searchIcon.style.height = '44px';
    searchIcon.style.display = 'flex';
    searchIcon.style.alignItems = 'center';
    searchIcon.style.color = 'rgba(255,255,255,0.6)';
    searchIcon.style.fontSize = '20px';
    searchIcon.style.pointerEvents = 'none';
    searchIcon.style.display = 'none';

    searchBarContainer.appendChild(searchInput);
    searchBarContainer.appendChild(searchIcon);
    overlay.appendChild(searchBarContainer);

    // App grid container
    const gridOuter = document.createElement('div');
    gridOuter.style.display = 'flex';
    gridOuter.style.justifyContent = 'center';
    gridOuter.style.alignItems = 'center';
    gridOuter.style.width = '100%';
    gridOuter.style.height = '100%';
    gridOuter.style.flex = '1 1 0';
    gridOuter.style.overflowY = 'auto';

    const grid = document.createElement('div');
    grid.className = 'app-launcher-grid';
    grid.style.display = 'grid';
    grid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(90px, 1fr))';
    grid.style.gap = '32px';
    grid.style.width = 'min(90vw, 900px)';
    grid.style.maxWidth = '100vw';
    grid.style.margin = 'auto';
    grid.style.justifyItems = 'center';
    grid.style.alignItems = 'start'; // Prevent vertical shifting
    grid.style.padding = '24px 0 0 0'; // Less top padding since search bar is sticky
    grid.style.transition = 'opacity 0.2s';
    grid.style.overflowY = 'visible';

    // Add all start menu apps to the grid
    const appItems = [];
    startMenuApps.forEach(app => {
      if (app.id === 'app-launcher') return; // Don't show launcher in itself
      const appItem = document.createElement('div');
      appItem.className = 'app-launcher-app';
      appItem.style.display = 'flex';
      appItem.style.flexDirection = 'column';
      appItem.style.alignItems = 'center';
      appItem.style.justifyContent = 'center';
      appItem.style.minHeight = '120px'; // Slightly less for macOS look
      appItem.style.cursor = 'pointer';
      appItem.style.userSelect = 'none';
      appItem.style.transition = 'transform 0.18s cubic-bezier(0.4,0,0.2,1), box-shadow 0.18s cubic-bezier(0.4,0,0.2,1)';
      appItem.tabIndex = 0;
      appItem.setAttribute('data-app', app.id);
      // Icon container style
      const iconContainerStyle = `width: 64px; height: 64px; border-radius: 16px; display: flex; align-items: center; justify-content: center; font-size: 28px; box-shadow: 0 4px 16px rgba(0,0,0,0.18); margin-bottom: 10px;`;
      appItem.innerHTML = `
        <div class=\"icon-container ${app.iconBgClass}\" style=\"${iconContainerStyle}\">
          <i class=\"fas ${app.iconClass}\"></i>
        </div>
        <span style=\"font-size: 14px; color: #fff; margin-top: 5px; text-shadow: 0 1px 4px #222; text-align: center; width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; display: block;\">${app.name}</span>
      `;
      // Ensure the app name is always centered
      const appSpan = appItem.querySelector('span');
      if (appSpan) {
        appSpan.style.textAlign = 'center';
        appSpan.style.width = '100%';
        appSpan.style.display = 'block';
        appSpan.style.whiteSpace = 'nowrap';
        appSpan.style.overflow = 'hidden';
        appSpan.style.textOverflow = 'ellipsis';
        appSpan.style.marginTop = '5px';
      }
      // Add hover effect for macOS style
      const iconContainer = appItem.querySelector('.icon-container');
      appItem.addEventListener('mouseenter', function () {
        appItem.style.transform = 'scale(1.10)';
        if (iconContainer) iconContainer.style.boxShadow = '0 8px 32px rgba(0,0,0,0.22)';
      });
      appItem.addEventListener('mouseleave', function () {
        appItem.style.transform = '';
        if (iconContainer) iconContainer.style.boxShadow = '0 4px 16px rgba(0,0,0,0.18)';
      });

      appItem.addEventListener('mousedown', e => e.stopPropagation());
      grid.appendChild(appItem);
      appItems.push(appItem);

    });
    // Add the "no apps found" message element
    const noAppsMsg = document.createElement('div');
    noAppsMsg.textContent = 'No app found, check appstore for more apps';
    noAppsMsg.style.display = 'none';
    noAppsMsg.style.color = '#fff';
    noAppsMsg.style.fontSize = '18px';
    noAppsMsg.style.textAlign = 'center';
    noAppsMsg.style.gridColumn = '1 / -1';
    noAppsMsg.style.margin = '40px 0';
    grid.appendChild(noAppsMsg);
    gridOuter.appendChild(grid);
    overlay.appendChild(gridOuter);
    document.body.appendChild(overlay);
    setTimeout(() => { overlay.style.opacity = '1'; }, 10);

    // --- Add footer with My Profile and Logout buttons ---
    const footer = document.createElement('div');
    footer.className = 'app-launcher-footer';
    footer.style.display = 'flex';
    footer.style.justifyContent = 'center';
    footer.style.alignItems = 'center';
    footer.style.width = '100%';
    footer.style.maxWidth = 'min(90vw, 900px)';
    footer.style.margin = '24px auto 32px auto';


    footer.style.borderRadius = '18px';

    footer.style.position = 'relative';
    footer.style.bottom = '0';
    footer.style.zIndex = '20';



    const logoutBtn = document.createElement('button');
    logoutBtn.className = 'app-launcher-logout-btn';
    logoutBtn.innerHTML = '<i class="fas fa-sign-out-alt" style="margin-right:8px;"></i>Logout';
    logoutBtn.style.background = 'rgb(255 255 255 / 15%)';
    logoutBtn.style.color = '#fff';
    logoutBtn.style.border = 'none';
    logoutBtn.style.borderRadius = '10px';
    logoutBtn.style.padding = '10px 22px';
    logoutBtn.style.fontSize = '15px';
    logoutBtn.style.cursor = 'pointer';
    logoutBtn.style.display = 'flex';
    logoutBtn.style.alignItems = 'center';
    logoutBtn.style.transition = 'background 0.18s';
    logoutBtn.addEventListener('mouseenter', () => { logoutBtn.style.background = 'var(--accent-color)' });
    logoutBtn.addEventListener('mouseleave', () => { logoutBtn.style.background = 'rgb(255 255 255 / 15%)' });
    logoutBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      handleLogout();
    });


    footer.appendChild(logoutBtn);
    overlay.appendChild(footer);


    // Keyboard navigation state
    let selectedAppIndex = 0;

    function updateAppSelection(newIndex) {
      const visibleApps = appItems.filter(item => item.style.display !== 'none');
      appItems.forEach(item => item.classList.remove('selected'));
      if (visibleApps.length > 0) {
        selectedAppIndex = ((newIndex % visibleApps.length) + visibleApps.length) % visibleApps.length; // wrap
        visibleApps[selectedAppIndex].classList.add('selected');
        // Optionally scroll into view
        visibleApps[selectedAppIndex].scrollIntoView({ block: 'nearest', behavior: 'smooth' });
      } else {
        selectedAppIndex = 0;
      }
    }

    // --- Fix: Define openAppFromLauncher in this scope ---
    function openAppFromLauncher(appItem) {
      appItems.forEach(item => item.classList.remove('selected'));
      appItem.classList.add('selected');
      openApp(
        appItem.getAttribute('data-app'),
        appItem.querySelector('span').textContent,
        appItem.querySelector('i').className.split(' ').find(cls => cls.startsWith('fa-')),
        appItem.className.split(' ').find(cls => cls.endsWith('-icon') || ['orange', 'blue', 'red', 'teal', 'purple', 'gray'].includes(cls)),
        appItem
      );
      closeLauncher();
    }
    // --- End fix ---

    // --- Search/filter logic ---
    searchInput.addEventListener('input', function () {
      const term = this.value.trim().toLowerCase();
      let visibleCount = 0;
      appItems.forEach(item => {
        const appName = item.getAttribute('data-app');
        const isVisible = (!term || appName.includes(term));
        item.style.display = isVisible ? '' : 'none';
        if (isVisible) visibleCount++;
      });
      // Show/hide the no apps found message
      if (visibleCount === 0) {
        noAppsMsg.style.display = 'block';
      } else {
        noAppsMsg.style.display = 'none';
      }
      // Only highlight first visible app if user has typed something
      if (term.length > 0 && visibleCount > 0) updateAppSelection(0);
      else appItems.forEach(item => item.classList.remove('selected'));
    });

    // On arrow keys and Enter, move selection or open
    searchInput.addEventListener('keydown', function (e) {
      const visibleApps = appItems.filter(item => item.style.display !== 'none');
      let arrowPressed = false;
      let selectedVisibleIndex = visibleApps.findIndex(item => item.classList.contains('selected'));
      if (selectedVisibleIndex === -1) selectedVisibleIndex = 0;
      let newIndex = selectedVisibleIndex;
      if (e.key === 'ArrowRight') {
        newIndex = selectedVisibleIndex + 1;
        if (newIndex >= visibleApps.length) newIndex = 0;
        updateAppSelection(newIndex);
        e.preventDefault();
        arrowPressed = true;
      } else if (e.key === 'ArrowLeft') {
        newIndex = selectedVisibleIndex - 1;
        if (newIndex < 0) newIndex = visibleApps.length - 1;
        updateAppSelection(newIndex);
        e.preventDefault();
        arrowPressed = true;
      } else if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
        // Use DOM positions for robust navigation
        const currentItem = visibleApps[selectedVisibleIndex];
        const currentRect = currentItem.getBoundingClientRect();
        const currentTop = currentRect.top;
        const currentLeft = currentRect.left;
        // Find all items in the next/previous row
        let candidates = visibleApps.filter((item, idx) => {
          const rect = item.getBoundingClientRect();
          if (e.key === 'ArrowDown') return rect.top > currentTop;
          else return rect.top < currentTop;
        });
        if (candidates.length === 0) {
          e.preventDefault();
          return;
        }
        // Find the closest row (by top distance)
        let targetRowTop = null;
        let minRowDelta = Infinity;
        candidates.forEach(item => {
          const rect = item.getBoundingClientRect();
          const rowDelta = Math.abs(rect.top - currentTop);
          if (rowDelta < minRowDelta) {
            minRowDelta = rowDelta;
            targetRowTop = rect.top;
          }
        });
        // Only consider items in the closest row
        let rowItems = candidates.filter(item => {
          const rect = item.getBoundingClientRect();
          return rect.top === targetRowTop;
        });
        // Find the item in that row with the closest left value
        let minDelta = Infinity;
        let bestIndex = selectedVisibleIndex;
        rowItems.forEach(item => {
          const rect = item.getBoundingClientRect();
          const delta = Math.abs(rect.left - currentLeft);
          if (delta < minDelta) {
            minDelta = delta;
            bestIndex = visibleApps.indexOf(item);
          }
        });
        updateAppSelection(bestIndex);
        e.preventDefault();
        arrowPressed = true;
      } else if (e.key === 'Enter') {
        e.stopPropagation();
        if (visibleApps.length > 0) {
          // Add hover effect
          const selected = visibleApps[selectedAppIndex];
          const iconContainer = selected.querySelector('.icon-container');
          selected.style.transform = 'scale(1.10)';
          if (iconContainer) iconContainer.style.boxShadow = '0 8px 32px rgba(0,0,0,0.22)';
          setTimeout(() => {
            openAppFromLauncher(selected);
            // Remove hover effect after click
            selected.style.transform = '';
            if (iconContainer) iconContainer.style.boxShadow = '0 4px 16px rgba(0,0,0,0.18)';
          }, 120);
          e.preventDefault();
        }
      }
      // If user pressed an arrow key and nothing is selected, select the first visible app
      if (arrowPressed && visibleApps.length > 0 && !visibleApps.some(item => item.classList.contains('selected'))) {
        updateAppSelection(0);
      }
    });

    // On open, do NOT select any app
    setTimeout(() => { searchInput.focus(); /* do not call updateAppSelection(0) here */ }, 100);

    // On click, set .selected to the clicked app
    appItems.forEach(appItem => {
      appItem.addEventListener('click', (e) => {
        e.stopPropagation();
        openAppFromLauncher(appItem);
      });
    });

    // --- Add robust close logic for App Launcher ---
    function closeLauncher() {
      overlay.style.opacity = '0';
      setTimeout(() => {
        if (overlay.parentNode) overlay.parentNode.removeChild(overlay);
      }, 300);
      document.removeEventListener('keydown', onKeyDown);
      overlay.removeEventListener('click', onOverlayClick);
    }
    function onKeyDown(e) {
      if (e.key === 'Escape') closeLauncher();
    }
    function onOverlayClick(e) {
      // Only keep launcher open if click is inside search bar or on an app icon/title
      if (
        e.target.closest('.search-bar-container') ||
        e.target.closest('.app-launcher-app')
      ) {
        return;
      }
      closeLauncher();
    }
    document.addEventListener('keydown', onKeyDown);
    overlay.addEventListener('click', onOverlayClick);
  }

  const appLauncherBtn = document.getElementById('app-launcher-btn');
  if (appLauncherBtn) {
    appLauncherBtn.addEventListener('click', function () {
      const appLauncherIcon = document.querySelector('.desktop-icon[data-app="app-launcher"]');
      openAppLauncherWindow(appLauncherIcon);
    });
  }




  // --- Bulletproof: Attach ResizeObserver to all .window elements ---
  function attachSidebarResizeObserver(win) {
    if (!win || win._sidebarResizeObserver) return;
    const ro = new ResizeObserver(() => {
      window.updateSidebarForWindow(win);
    });
    ro.observe(win);
    win._sidebarResizeObserver = ro;
    // Initial call
    window.updateSidebarForWindow(win);
  }
  // Attach to all current windows
  document.querySelectorAll('.window').forEach(attachSidebarResizeObserver);

  // Patch window creation functions
  if (typeof createWindowFromTemplate === 'function') {
    const _originalCreateWindowFromTemplate = createWindowFromTemplate;
    createWindowFromTemplate = function () {
      const win = _originalCreateWindowFromTemplate.apply(this, arguments);
      attachSidebarResizeObserver(win);
      return win;
    };
  }
  if (typeof createGenericWindow === 'function') {
    const _originalCreateGenericWindow = createGenericWindow;
    createGenericWindow = function () {
      const win = _originalCreateGenericWindow.apply(this, arguments);
      attachSidebarResizeObserver(win);
      return win;
    };
  }
});


// --- Global keyboard shortcut for App Launcher: Ctrl + Alt + Space ---
document.addEventListener('keydown', function (e) {
  // Ignore if focus is in an input, textarea, or contenteditable
  const active = document.activeElement;
  if (active && (active.tagName === 'INPUT' || active.tagName === 'TEXTAREA' || active.isContentEditable)) return;
  // Ctrl + Alt + Space
  if (e.ctrlKey && e.altKey && !e.metaKey && !e.shiftKey && (e.code === 'Space' || e.key === ' ')) {
    e.preventDefault();
    // Only open if not already open
    if (!document.getElementById('app-launcher-overlay')) {
      // Try to find the desktop icon for animation, else pass null
      const appLauncherIcon = document.querySelector('.desktop-icon[data-app="app-launcher"]');
      openAppLauncherWindow(appLauncherIcon);
    }
  }
});


// --- DESKTOP WIDGETS TOGGLE BUTTON ---
function attachWidgetsToggleBtnListener() {
  const widgetsToggleBtn = document.getElementById('widgets-toggle-btn');
  const widgetsToggleArrow = document.getElementById('widgets-toggle-arrow');
  const widgetsScreen = document.getElementById('widgets-screen');
  if (widgetsToggleBtn && widgetsToggleArrow && widgetsScreen) {
    // Remove previous listeners by replacing with a clone
    const newBtn = widgetsToggleBtn.cloneNode(true);
    widgetsToggleBtn.parentNode.replaceChild(newBtn, widgetsToggleBtn);
    const arrowIcon = newBtn.querySelector('i');
    function setChevronIcon(visible) {
      if (!arrowIcon) return;
      arrowIcon.classList.remove('fa-chevron-right', 'fa-chevron-left');
      arrowIcon.classList.add(visible ? 'fa-chevron-right' : 'fa-chevron-left');
    }
    // --- FIX: Sync state ---
    window.widgetsVisible = !widgetsScreen.classList.contains('widgets-hidden');
    // Set initial icon
    setChevronIcon(window.widgetsVisible);
    newBtn.addEventListener('click', function () {
      if (window.innerWidth <= 1023) return; // Only on desktop
      window.widgetsVisible = !window.widgetsVisible;
      if (!window.widgetsVisible) {
        widgetsScreen.classList.add('widgets-hidden');
        setChevronIcon(false);
      } else {
        widgetsScreen.classList.remove('widgets-hidden');
        widgetsScreen.style.display = '';
        setChevronIcon(true);
      }
    });
    // On resize, always show widgets if switching to mobile
    window.addEventListener('resize', function resizeHandler() {
      if (window.innerWidth <= 1023) {
        widgetsScreen.classList.remove('widgets-hidden');
        widgetsScreen.style.display = '';
        window.widgetsVisible = true;
        setChevronIcon(true);
      }
    }, { once: true });
  }
}

document.addEventListener('DOMContentLoaded', function () {
  attachWidgetsToggleBtnListener();

});




document.addEventListener('DOMContentLoaded', function () {

  const aiChatBtn = document.getElementById('ai-chat-btn');
  const aiChatWindow = document.getElementById('ai-chat-window');
  let aiChatVisible = false;
  if (aiChatBtn && aiChatWindow) {
    aiChatBtn.addEventListener('click', function () {
      if (window.innerWidth <= 1023) return;
      if (typeof window.hideWalletSidebar === 'function') window.hideWalletSidebar();
      aiChatVisible = !aiChatVisible;
      if (aiChatVisible) {
        aiChatWindow.style.display = 'flex';
        setTimeout(() => aiChatWindow.classList.add('ai-chat-visible'), 10);
      } else {
        aiChatWindow.classList.remove('ai-chat-visible');
        aiChatWindow.addEventListener('transitionend', function handler() {
          if (!aiChatVisible) aiChatWindow.style.display = 'none';
          aiChatWindow.removeEventListener('transitionend', handler);
        });
      }
    });
  }
  const aiChatCloseBtn = document.getElementById('ai-chat-close-btn');
  if (aiChatCloseBtn) {
    aiChatCloseBtn.addEventListener('click', function () {
      if (!aiChatVisible) return;
      aiChatVisible = false;
      aiChatWindow.classList.remove('ai-chat-visible');
      aiChatWindow.addEventListener('transitionend', function handler() {
        if (!aiChatVisible) aiChatWindow.style.display = 'none';
        aiChatWindow.removeEventListener('transitionend', handler);
      });
    });
  }
});




document.addEventListener('DOMContentLoaded', function () {

  // GLOBAL SEARCH OVERLAY LOGIC
  const globalSearchBtn = document.getElementById('global-search-btn');
  const globalSearchOverlay = document.getElementById('global-search-overlay');
  const globalSearchInput = document.getElementById('global-search-input');
  const globalSearchDropdownBtn = document.getElementById('global-search-dropdown-btn');
  const globalSearchDropdownList = document.getElementById('global-search-dropdown-list');
  const globalSearchSelected = document.getElementById('global-search-selected');
  let globalSearchDropdownOpen = false;
  function showGlobalSearch() {
    if (typeof window.hideWalletSidebar === 'function') window.hideWalletSidebar();
    if (window.innerWidth <= 1023) return;
    globalSearchOverlay.style.display = 'flex';
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        globalSearchOverlay.style.opacity = '1';
        globalSearchOverlay.style.visibility = 'visible';
        if (globalSearchInput) {
          // Force input to be focusable and reset focus state
          globalSearchInput.tabIndex = -1;
          globalSearchInput.blur();
          globalSearchInput.tabIndex = 0;
          globalSearchInput.focus();
          globalSearchInput.select();
        }
        document.body.style.overflow = 'hidden';
      });
    });
  }
  function hideGlobalSearch() {
    globalSearchOverlay.style.opacity = '0';
    globalSearchOverlay.style.visibility = 'hidden';
    setTimeout(() => {
      globalSearchOverlay.style.display = 'none';
      document.body.style.overflow = '';
    }, 300);
    closeDropdown();
  }
  function openDropdown() {
    globalSearchDropdownList.style.display = 'flex';
    globalSearchDropdownOpen = true;
  }
  function closeDropdown() {
    globalSearchDropdownList.style.display = 'none';
    globalSearchDropdownOpen = false;
  }
  if (globalSearchBtn && globalSearchOverlay) {
    globalSearchBtn.addEventListener('click', function () {
      if (window.innerWidth <= 1023) return;
      if (globalSearchOverlay.style.display !== 'flex') {
        globalSearchOverlay.style.display = 'flex';
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            globalSearchOverlay.style.opacity = '1';
            globalSearchOverlay.style.visibility = 'visible';
            if (globalSearchInput) {
              // Remove and re-append input for bulletproof focus
              const parent = globalSearchInput.parentNode;
              const next = globalSearchInput.nextSibling;
              parent.removeChild(globalSearchInput);
              if (next) parent.insertBefore(globalSearchInput, next);
              else parent.appendChild(globalSearchInput);
              setTimeout(() => {
                globalSearchInput.focus();
                globalSearchInput.setSelectionRange(0, globalSearchInput.value.length);
              }, 30);
            }
            document.body.style.overflow = 'hidden';
          });
        });
      } else {
        if (globalSearchInput) {
          // Remove and re-append input for bulletproof focus
          const parent = globalSearchInput.parentNode;
          const next = globalSearchInput.nextSibling;
          parent.removeChild(globalSearchInput);
          if (next) parent.insertBefore(globalSearchInput, next);
          else parent.appendChild(globalSearchInput);
          setTimeout(() => {
            globalSearchInput.focus();
            globalSearchInput.setSelectionRange(0, globalSearchInput.value.length);
          }, 30);
        }
      }
    });
    globalSearchInput && globalSearchInput.addEventListener('keydown', function (e) {
      if (e.key === 'Escape') hideGlobalSearch();
    });
    document.addEventListener('keydown', function (e) {
      if (globalSearchOverlay.style.display !== 'none' && e.key === 'Escape') hideGlobalSearch();
    });
    globalSearchOverlay.addEventListener('mousedown', function (e) {
      if (e.target === globalSearchOverlay) hideGlobalSearch();
    });
    // Dropdown logic
    if (globalSearchDropdownBtn && globalSearchDropdownList) {
      globalSearchDropdownBtn.addEventListener('click', function (e) {
        e.stopPropagation();
        if (globalSearchDropdownOpen) closeDropdown();
        else openDropdown();
      });
      globalSearchDropdownList.addEventListener('mousedown', function (e) {
        e.stopPropagation();
      });
      document.addEventListener('mousedown', function (e) {
        if (globalSearchDropdownOpen && !globalSearchDropdownList.contains(e.target) && e.target !== globalSearchDropdownBtn) {
          closeDropdown();
        }
      });
      Array.from(globalSearchDropdownList.querySelectorAll('.dropdown-item')).forEach(item => {
        item.addEventListener('click', function () {
          globalSearchDropdownList.querySelectorAll('.dropdown-item').forEach(i => i.classList.remove('selected'));
          item.classList.add('selected');
          // Set icon and text in the selected button
          globalSearchSelected.innerHTML = item.innerHTML;
          closeDropdown();
        });
      });
      // On page load, set the default selected icon+text
      const initiallySelected = globalSearchDropdownList.querySelector('.dropdown-item.selected');
      if (initiallySelected) {
        globalSearchSelected.innerHTML = initiallySelected.innerHTML;
      }
    }
  }
});



document.addEventListener('DOMContentLoaded', function () {

  const notificationsBtn = document.getElementById('notifications-btn');
  const notificationsPanel = document.getElementById('notifications-panel');
  let notificationsVisible = false;
  if (notificationsPanel && notificationsBtn) {
    // Remove static HTML and render dynamically
    notificationsPanel.innerHTML = '';
    // Optionally, initialize with default notifications
    if (notifications.length === 0) {
      notifications.push(
        {
          id: 'notif-' + Date.now() + '-' + Math.random().toString(36).slice(2),
          title: 'New sale',
          desc: 'New sale from Andrei Caramitru',
          meta: '1m',
          iconClass: 'fa-shopping-cart',
          iconBgClass: 'notif-bg-blue',
          avatar: 'img/avatar.png',
          unread: true
        },
        {
          id: 'notif-' + (Date.now() + 1) + '-' + Math.random().toString(36).slice(2),
          title: 'Andrei Caramitru made a new <b>sale</b>',
          desc: 'in total of <b>4500 lei</b>',
          meta: '20m',
          iconClass: 'fa-bolt',
          iconBgClass: 'notif-bg-indigo',
          avatar: 'img/avatar.png',
          unread: true
        },
        {
          id: 'notif-' + (Date.now() + 2) + '-' + Math.random().toString(36).slice(2),
          title: 'Andrei Caramitru made a new sale',
          desc: 'in total of 4500 lei',
          meta: '40m',
          iconClass: 'fa-shopping-bag',
          iconBgClass: 'notif-bg-orange',
          avatar: 'img/avatar.png',
          unread: false
        },
        {
          id: 'notif-' + (Date.now() + 3) + '-' + Math.random().toString(36).slice(2),
          title: 'Andrei Caramitru posted a <b>review</b>',
          desc: 'on <b>Blugi de blana imblaniti misto</b>',
          meta: '1h ago',
          iconClass: 'fa-star',
          iconBgClass: 'notif-bg-green',
          avatar: 'img/avatar.png',
          unread: false
        }
      );
    }
    renderNotificationsPanel();
    // Add event delegation for delete buttons (already present, keep as is)
    notificationsPanel.addEventListener('click', function (e) {
      if (e.target.classList.contains('notif-clear')) {
        clearAllNotifications();
        return;
      }
      if (e.target.classList.contains('notif-delete-btn')) {
        const notifCard = e.target.closest('.notif-card');
        if (notifCard) {
          const notifList = notifCard.parentElement;
          const notificationsPanel = document.getElementById('notifications-panel');
          // FLIP: measure positions before removal
          const prevCards = notificationsPanel.querySelectorAll('.notif-card');
          let prevPositions = [];
          let prevIds = [];
          prevCards.forEach(card => {
            prevPositions.push(card.getBoundingClientRect().top);
            prevIds.push(card.dataset.notifId);
          });
          // Animate the card out to the right
          notifCard.style.transition = 'transform 0.3s cubic-bezier(0.4,0,0.2,1), opacity 0.3s cubic-bezier(0.4,0,0.2,1)';
          notifCard.style.transform = 'translateX(120%)';
          notifCard.style.opacity = '0';
          setTimeout(() => {
            // Remove from notifications array
            const idx = Array.from(notifList.children).indexOf(notifCard);
            let removedId = notifCard.dataset.notifId;
            if (idx > -1) notifications.splice(idx, 1);
            renderNotificationsPanel();
            // FLIP: animate remaining cards up
            const newCards = notificationsPanel.querySelectorAll('.notif-card');
            newCards.forEach(card => {
              const notifId = card.dataset.notifId;
              const prevIdx = prevIds.indexOf(notifId);
              if (prevIdx !== -1) {
                const oldTop = prevPositions[prevIdx];
                const newTop = card.getBoundingClientRect().top;
                const dy = oldTop - newTop;
                if (dy !== 0) {
                  card.style.transition = 'none';
                  card.style.transform = `translateY(${dy}px)`;
                  requestAnimationFrame(() => {
                    card.style.transition = 'transform 0.35s cubic-bezier(0.4,0,0.2,1)';
                    card.style.transform = '';
                  });
                  card.addEventListener('transitionend', function handler() {
                    card.style.transition = '';
                    card.removeEventListener('transitionend', handler);
                  });
                }
              }
            });
            if (typeof updateNotificationsBadge === 'function') updateNotificationsBadge();
          }, 300);
        }
      }
    });

    notificationsBtn.addEventListener('click', function (e) {
      console.log('[NOTIF] Button clicked');
      notificationsVisible = !notificationsVisible;
      console.log('[NOTIF] notificationsVisible:', notificationsVisible);
      if (notificationsVisible) {
        renderNotificationsPanel();

        // Hide wallet sidebar if visible
        if (typeof window.hideWalletSidebar === 'function') {
          const walletSidebar = document.getElementById('wallet-sidebar');
          if (walletSidebar && walletSidebar.classList.contains('wallet-sidebar-visible')) {
            window.hideWalletSidebar();
            console.log('[NOTIF] Hiding wallet sidebar');
          }
        }
        // Hide ai-chat panel if visible
        const aiChatWindow = document.getElementById('ai-chat-window');
        if (aiChatWindow && aiChatWindow.classList.contains('ai-chat-visible')) {
          aiChatWindow.classList.remove('ai-chat-visible');
          aiChatWindow.addEventListener('transitionend', function handler(e) {
            if (e.propertyName === 'transform') {
              aiChatWindow.style.display = 'none';
              aiChatWindow.removeEventListener('transitionend', handler);
              console.log('[NOTIF] AI chat panel hidden');
            }
          });
        }
        notificationsPanel.style.display = 'flex';
        console.log('[NOTIF] Set notificationsPanel display to flex');
        setTimeout(() => {
          notificationsPanel.classList.add('notifications-visible');
          console.log('[NOTIF] Added notifications-visible class');
        }, 10);
      } else {
        notificationsPanel.classList.remove('notifications-visible');
        console.log('[NOTIF] Removed notifications-visible class, waiting for transitionend');
        notificationsPanel.addEventListener('transitionend', function handler() {
          if (!notificationsVisible) {
            notificationsPanel.style.display = 'none';
            console.log('[NOTIF] Set notificationsPanel display to none after transition');
          }
          notificationsPanel.removeEventListener('transitionend', handler);
        });
      }
    });

    // Click-outside-to-close logic
    document.addEventListener('mousedown', function (e) {
      if (notificationsVisible && notificationsPanel.style.display === 'flex') {
        if (!notificationsPanel.contains(e.target) && !notificationsBtn.contains(e.target)) {
          notificationsVisible = false;
          notificationsPanel.classList.remove('notifications-visible');
          notificationsPanel.addEventListener('transitionend', function handler() {
            if (!notificationsVisible) notificationsPanel.style.display = 'none';
            notificationsPanel.removeEventListener('transitionend', handler);
          });
        }
      }
    });
  }

});




document.addEventListener('DOMContentLoaded', function () {

  const fullscreenBtn = document.getElementById('fullscreen-btn');
  if (fullscreenBtn) {
    const fullscreenIcon = fullscreenBtn.querySelector('i');
    function isFullscreen() {
      return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
    }
    
    // Modified to handle errors properly and ensure user gesture
    function requestFullscreen(elem, fromUserGesture = false) {
      try {
        // Only proceed if this is from a user gesture
        if (!fromUserGesture) {
          console.warn('Fullscreen request not from user gesture');
          if (typeof showShortTopNotification === 'function') {
            showShortTopNotification('Fullscreen must be triggered by user interaction');
          }
          return Promise.reject('Not from user gesture');
        }
        
        if (elem.requestFullscreen) {
          return elem.requestFullscreen();
        } else if (elem.webkitRequestFullscreen) {
          return elem.webkitRequestFullscreen();
        } else if (elem.mozRequestFullScreen) {
          return elem.mozRequestFullScreen();
        } else if (elem.msRequestFullscreen) {
          return elem.msRequestFullscreen();
        }
      } catch (err) {
        console.warn('Fullscreen request failed:', err);
        // Show a notification to the user
        if (typeof showShortTopNotification === 'function') {
          showShortTopNotification('Fullscreen must be triggered by user interaction');
        }
      }
      return Promise.reject('No fullscreen API available');
    }
    
    function exitFullscreen() {
      try {
        if (document.exitFullscreen) {
          return document.exitFullscreen();
        } else if (document.webkitExitFullscreen) {
          return document.webkitExitFullscreen();
        } else if (document.mozCancelFullScreen) {
          return document.mozCancelFullScreen();
        } else if (document.msExitFullscreen) {
          return document.msExitFullscreen();
        }
      } catch (err) {
        console.warn('Exit fullscreen failed:', err);
      }
      return Promise.resolve();
    }
    
    function updateFullscreenIcon() {
      if (isFullscreen()) {
        fullscreenIcon.classList.remove('fa-expand');
        fullscreenIcon.classList.add('fa-compress');
      } else {
        fullscreenIcon.classList.remove('fa-compress');
        fullscreenIcon.classList.add('fa-expand');
      }
    }
    
    // Direct user interaction handler
    fullscreenBtn.addEventListener('click', function(event) {
      // Ensure this is a direct user click
      if (event.isTrusted) {
        if (isFullscreen()) {
          exitFullscreen().catch(err => console.warn('Exit fullscreen error:', err));
        } else {
          requestFullscreen(document.documentElement, true).catch(err => {
            console.warn('Request fullscreen error:', err);
            // Only show notification for real errors, not when we already showed one
            if (err !== 'No fullscreen API available' && typeof showShortTopNotification === 'function') {
              showShortTopNotification('Fullscreen request failed');
            }
          });
        }
      } else {
        console.warn('Ignoring non-trusted fullscreen event');
        if (typeof showShortTopNotification === 'function') {
          showShortTopNotification('Fullscreen must be triggered by user interaction');
        }
      }
    });
    
    document.addEventListener('fullscreenchange', updateFullscreenIcon);
    document.addEventListener('webkitfullscreenchange', updateFullscreenIcon);
    document.addEventListener('mozfullscreenchange', updateFullscreenIcon);
    document.addEventListener('MSFullscreenChange', updateFullscreenIcon);
    updateFullscreenIcon();
  }
});


document.addEventListener('DOMContentLoaded', function () {

  const widgetsScreen = document.getElementById('widgets-screen');
  function enableWidgetsScreenScroll() {
    if (!widgetsScreen) return;
    if (window.innerWidth >= 1024) {
      widgetsScreen.addEventListener('wheel', function (e) {
        widgetsScreen.scrollTop += e.deltaY;
        // Do not preventDefault, so scroll bubbles if at top/bottom
      }, { passive: true });
    }
  }
  enableWidgetsScreenScroll();
  window.addEventListener('resize', enableWidgetsScreenScroll);

});







// --- Desktop Icon Arrangement Persistence ---
function saveDesktopIconPositions() {
  if (window.innerWidth <= 1023) return; // Only on desktop
  const icons = document.querySelectorAll('.desktop-icon');
  const positions = Array.from(icons).map(icon => ({
    app: icon.getAttribute('data-app'),
    left: icon.style.left,
    top: icon.style.top
  }));
  localStorage.setItem('desktopIconPositions', JSON.stringify(positions));
}






function restoreDesktopIconPositions() {
  if (window.innerWidth <= 1023) return false; // Only on desktop
  const positions = JSON.parse(localStorage.getItem('desktopIconPositions') || '[]');
  const desktopIconsContainer = document.querySelector('.desktop-icons');
  if (!positions.length || !desktopIconsContainer) {
    if (desktopIconsContainer) {
      desktopIconsContainer.removeAttribute('data-absolute');
      document.querySelectorAll('.desktop-icon').forEach(icon => {
        icon.removeAttribute('data-absolute');
      });
    }
    return false;
  }
  const icons = document.querySelectorAll('.desktop-icon');
  let restored = false;
  positions.forEach(pos => {
    const icon = Array.from(icons).find(i => i.getAttribute('data-app') === pos.app);
    if (icon && pos.left && pos.top) {
      icon.style.position = 'absolute';
      icon.style.left = pos.left;
      icon.style.top = pos.top;
      icon.setAttribute('data-absolute', 'true');
      restored = true;
    }
  });
  if (restored) {
    desktopIconsContainer.setAttribute('data-absolute', 'true');
  } else {
    desktopIconsContainer.removeAttribute('data-absolute');
    icons.forEach(icon => icon.removeAttribute('data-absolute'));
  }
  return restored;
}

// Patch initializeDesktopIconPositions to restore positions if available, otherwise use grid
const _originalInitDesktopIconPositions = window.initializeDesktopIconPositions;
window.initializeDesktopIconPositions = function () {
  const desktopIconsContainer = document.querySelector('.desktop-icons');
  const icons = document.querySelectorAll('.desktop-icon');
  if (window.innerWidth > 1023) {
    // Try to restore, if not, use grid
    const restored = restoreDesktopIconPositions();
    if (!restored) {
      if (desktopIconsContainer) desktopIconsContainer.removeAttribute('data-absolute');
      icons.forEach(icon => icon.removeAttribute('data-absolute'));
      _originalInitDesktopIconPositions();
    }
  } else {
    if (desktopIconsContainer) desktopIconsContainer.removeAttribute('data-absolute');
    icons.forEach(icon => icon.removeAttribute('data-absolute'));
    _originalInitDesktopIconPositions();
  }
};

// Patch globalOnIconMouseUp to save positions after drag
const _originalGlobalOnIconMouseUp = window.globalOnIconMouseUp;
window.globalOnIconMouseUp = function (e) {
  _originalGlobalOnIconMouseUp(e);
  if (window.innerWidth > 1023) saveDesktopIconPositions();
};

window.addEventListener('resize', function () {
  if (window.innerWidth > 1023) {
    // On resize, try to restore, if not, use grid
    const restored = restoreDesktopIconPositions();
    if (!restored) {
      if (typeof _originalInitDesktopIconPositions === 'function') {
        _originalInitDesktopIconPositions();
      }
    }
  }
});



// --- WINDOW POPOUT ---




// --- SWIPE TO DELETE FOR NOTIFICATIONS ---
function enableNotificationSwipeToDelete() {
  console.log('enableNotificationSwipeToDelete called');
  // Wait a moment for DOM to be ready, then find cards
  setTimeout(() => {
    const notifCards = document.querySelectorAll('.notif-card');
    console.log('Found notification cards:', notifCards.length);
    
    if (notifCards.length === 0) {
      console.log('No notification cards found, trying mobile screen selector');
      const mobileNotifCards = document.querySelectorAll('#notifications-screen .notif-card');
      console.log('Found mobile notification cards:', mobileNotifCards.length);
      if (mobileNotifCards.length > 0) {
        setupSwipeForCards(mobileNotifCards);
        return;
      }
    } else {
      setupSwipeForCards(notifCards);
    }
  }, 100);
}

function setupSwipeForCards(notifCards) {
  notifCards.forEach(card => {
    let startX = 0;
    let currentX = 0;
    let translateX = 0;
    let swiping = false;
    let hasMoved = false; // Track if touch has moved at all
    const threshold = 60; // Reduced from 80px to make it more responsive

    // Create a background for delete if not present
    let swipeBg = card.querySelector('.notif-swipe-bg');
    if (!swipeBg) {
      swipeBg = document.createElement('div');
      swipeBg.className = 'notif-swipe-bg';
      swipeBg.innerHTML = '<i class="fas fa-trash"></i>';
      card.insertBefore(swipeBg, card.firstChild);
    }

    card.addEventListener('touchstart', function (e) {
      console.log('Touch start detected on notification card');
      if (e.touches.length !== 1) return;
      e.stopPropagation(); // Prevent global touch handlers from interfering
      startX = e.touches[0].clientX;
      currentX = startX;
      translateX = 0;
      swiping = true;
      hasMoved = false;
      card.style.transition = 'none';
    });

    card.addEventListener('touchmove', function (e) {
      if (!swiping) return;
      e.stopPropagation(); // Prevent global touch handlers from interfering
      currentX = e.touches[0].clientX;
      translateX = Math.max(0, currentX - startX); // Only allow right swipe
      
      // Mark that touch has moved if there's any movement
      if (Math.abs(currentX - startX) > 5) {
        hasMoved = true;
      }
      
      card.style.transform = `translateX(${translateX}px)`;
      swipeBg.style.opacity = Math.min(1, Math.abs(translateX) / threshold);
    });

    card.addEventListener('touchend', function (e) {
      if (!swiping) return;
      e.stopPropagation(); // Prevent global touch handlers from interfering
      swiping = false;
      card.style.transition = 'transform 0.2s';
      
      // Calculate final translateX from current position if not set by touchmove
      if (!hasMoved && e.changedTouches && e.changedTouches[0]) {
        currentX = e.changedTouches[0].clientX;
        translateX = Math.max(0, currentX - startX);
      }
      
      console.log('Touch end: translateX =', translateX, 'threshold =', threshold, 'hasMoved =', hasMoved);
      
      if (translateX > threshold) { // Only if swiped right enough
        card.style.transform = `translateX(120%)`;
        card.classList.add('notif-card-removing');
        
        // Remove from notifications array using the data-notif-id
        const notifId = card.dataset.notifId;
        if (notifId) {
          const notifIndex = notifications.findIndex(n => n.id === notifId);
          if (notifIndex !== -1) {
            notifications.splice(notifIndex, 1);
            console.log('Mobile swipe: Deleted notification', notifId, 'remaining:', notifications.length);
            
            // Update both screens and badge
            if (typeof updateNotificationsBadge === 'function') {
              updateNotificationsBadge();
            }
          } else {
            console.log('Mobile swipe: Could not find notification with ID', notifId);
          }
        } else {
          console.log('Mobile swipe: No notifId found on card');
        }
        
        card.addEventListener('transitionend', function handler() {
          card.removeEventListener('transitionend', handler);
          const notifList = card.parentElement;
          
          // Use the existing collapsing animation for smooth height transition
          const cardHeight = card.offsetHeight;
          card.style.height = cardHeight + 'px';
          
          // Preserve the border-radius during collapse to avoid visual jump
          const computedStyle = window.getComputedStyle(card);
          const borderRadius = computedStyle.borderRadius;
          
          card.classList.add('notif-card-collapsing');
          
          // Force preserve the border-radius
          card.style.borderRadius = borderRadius;
          
          // Animate height to 0
          requestAnimationFrame(() => {
            card.style.height = '0px';
          });
          
          // Wait for collapse animation to complete before removing
          card.addEventListener('transitionend', function collapseHandler() {
            card.removeEventListener('transitionend', collapseHandler);
            card.remove();

            // Check if this was the last notification in the section
            if (notifList && notifList.classList.contains('notif-list') && notifList.querySelectorAll('.notif-card').length === 0) {
              const sectionLabel = notifList.previousElementSibling;
              if (sectionLabel && sectionLabel.classList.contains('notif-section-label')) {
                if (typeof fadeOutSectionLabel === 'function') {
                  fadeOutSectionLabel(sectionLabel);
                }
                // Remove the empty list after animation
                setTimeout(() => notifList.remove(), 400);
              }
            }

            // Use the exact same logic as the X button click (which works perfectly)
            setTimeout(() => {
              console.log(`Mobile swipe: After DOM cleanup, notifications.length = ${notifications.length}`);
              
              // Match exactly what the X button does - renderNotificationsScreen FIRST
              renderNotificationsScreen();
              renderNotificationsPanel(); // Also update the panel if it exists
              if (typeof updateNotificationsBadge === 'function') updateNotificationsBadge();
              
              console.log('Mobile swipe: Completed using X button logic');
            }, 150);
          });
        });
      } else {
        // Snap back
        card.style.transform = '';
        swipeBg.style.opacity = 0;
      }
    });
    
    // Add touchcancel handler to reset state if touch is interrupted
    card.addEventListener('touchcancel', function (e) {
      if (swiping) {
        console.log('Touch cancelled, resetting card position');
        swiping = false;
        hasMoved = false;
        card.style.transition = 'transform 0.2s';
        card.style.transform = '';
        swipeBg.style.opacity = 0;
      }
    });
  });
}


// --- WINDOWS 11 STYLE TOAST NOTIFICATION ---
function showToastNotification(opts = {}) {
  if (isNotificationsMuted) return;
  // Toast content (allow override for test/dev)
  const notifContent = opts.content || `
    <button class="notif-delete-btn" title="Dismiss notification">&times;</button>
    <div class="notif-icon-bg notif-bg-blue"><i class="fas fa-shopping-cart"></i></div>
    <div class="notif-content">
      <div class="notif-main-row">
        <span class="notif-main-title">New incoming notification1</span>

      </div>
      <div class="notif-desc">This is a test notification</div>
      <div class="notif-meta">now</div>
    </div>
    <img class="notif-avatar" src="img/avatar.png" />
  `;
  // Toast stacking container
  let container = document.getElementById('os-toast-container');
  if (!container) {
    container = document.createElement('div');
    container.id = 'os-toast-container';
    container.style.position = 'fixed';
    container.style.top = '32px';
    container.style.right = '32px';
    container.style.width = '340px';
    container.style.zIndex = '999999';
    container.style.pointerEvents = 'none';
    container.style.height = 'auto';
    document.body.appendChild(container);
  }
  // Remove all if mode is 'one'
  if (desktopNotificationMode === 'one') {
    Array.from(container.children).forEach(child => child.remove());
  }
  // Create toast
  const toast = document.createElement('div');
  toast.className = 'notif-card unread os-toast-notification';
  toast.style.position = 'absolute';
  toast.style.right = '0';
  toast.style.left = 'auto';
  toast.style.margin = '0';
  toast.style.width = '340px';
  toast.style.maxWidth = '90vw';
  toast.style.pointerEvents = 'auto';
  toast.innerHTML = notifContent;
  // Insert at top (index 0)
  container.insertBefore(toast, container.firstChild);
  // Animate in
  toast.style.transform = 'translateX(120%)';
  toast.style.opacity = '0.7';
  setTimeout(() => {
    toast.style.transition = 'top 0.35s cubic-bezier(0.4,0,0.2,1), transform 0.45s cubic-bezier(0.4,0,0.2,1), opacity 0.45s cubic-bezier(0.4,0,0.2,1)';
    toast.style.transform = 'translateX(0)';
    toast.style.opacity = '1';
  }, 10);
  // Dismiss logic
  let dismissTimer;
  let dismissed = false;
  function dismissToast() {
    if (dismissed) return;
    dismissed = true;
    toast.style.opacity = '0.7';
    toast.style.transform = 'translateX(120%)';
    setTimeout(() => {
      toast.remove();
      updateToastStackPositions();
    }, 500);
  }
  function startTimer() {
    dismissTimer = setTimeout(dismissToast, 4000);
  }
  function clearTimer() {
    if (dismissTimer) clearTimeout(dismissTimer);
  }
  toast.addEventListener('mouseenter', clearTimer);
  toast.addEventListener('mouseleave', startTimer);
  const delBtn = toast.querySelector('.notif-delete-btn');
  if (delBtn) delBtn.onclick = dismissToast;
  startTimer();
  // Stacking limit logic
  let maxToasts = 1;
  if (desktopNotificationMode === 'three') maxToasts = 3;
  if (desktopNotificationMode === 'all') {
    // Calculate how many fit in viewport
    const taskbarHeight = 60; // px (adjust if needed)
    const margin = 20; // px
    const toastHeight = 80; // px (approximate, adjust if needed)
    const available = window.innerHeight - taskbarHeight - margin - 32; // 32px top
    maxToasts = Math.floor(available / (toastHeight + 14));
  }
  // Remove excess toasts (from bottom)
  while (container.children.length > maxToasts) {
    container.lastChild.remove();
  }
  // Update positions for all toasts
  updateToastStackPositions();
}

function updateToastStackPositions() {
  const container = document.getElementById('os-toast-container');
  if (!container) return;
  const margin = 14; // px
  const toastHeight = 80; // px (should match above)
  Array.from(container.children).forEach((toast, idx) => {
    toast.style.position = 'absolute';
    toast.style.right = '0';
    toast.style.left = 'auto';
    toast.style.marginTop = '50px';
    toast.style.marginRight = '10px';
    toast.style.transition = 'top 0.35s cubic-bezier(0.4,0,0.2,1), transform 0.45s cubic-bezier(0.4,0,0.2,1), opacity 0.45s cubic-bezier(0.4,0,0.2,1)'; // Smooth move
    toast.style.top = (idx * (toastHeight + margin)) + 'px';
    toast.style.zIndex = 999999 - idx;
  });
  // Adjust container height
  container.style.height = (container.children.length * (toastHeight + margin) - margin) + 'px';
}



// --- Shared Mobile Sidebar Logic for All Windows with Sidebar ---
function setupMobileSidebarForWindow(windowElement) {
  // Try all possible sidebar and content class combos for robustness
  let sidebar = windowElement.querySelector('.window-sidebar, .settings-sidebar, .app-store-sidebar');
  let overlay = windowElement.querySelector('.sidebar-overlay');
  const windowContent = windowElement.querySelector('.window-content');
  if (windowContent && overlay && windowContent.firstElementChild !== overlay) {
    windowContent.insertBefore(overlay, windowContent.firstElementChild);
  }
  if (!overlay && windowContent) overlay = windowContent.querySelector('.sidebar-overlay');
  const menuToggle = windowElement.querySelector('.menu-toggle');
  // Try all possible content area classes
  let contentArea = windowElement.querySelector('.window-main-content, .settings-content, .app-store-main-content');
  // If not found, try direct child of window-content
  if (!contentArea && windowContent) {
    contentArea = windowContent.querySelector('.window-main-content, .settings-content, .app-store-main-content');
  }
  // If still not found, fallback to windowContent itself
  if (!contentArea && windowContent) contentArea = windowContent;
  // Debug log for diagnosis


  if (!sidebar || !overlay || !menuToggle || !contentArea) {
    console.warn('setupMobileSidebarForWindow: Missing required elements', { sidebar, overlay, menuToggle, contentArea });
    return;
  }

  // Remove previous listeners to avoid duplicates
  menuToggle.onclick = null;
  overlay.onclick = null;
  sidebar.querySelectorAll('.sidebar-item').forEach(item => { item.onclick = null; });

  function setBlockInteraction(active) {
    if (active) {
      windowElement.classList.add('sidebar-block-interaction');
    } else {
      windowElement.classList.remove('sidebar-block-interaction');
    }
  }

  // Only attach sidebar handler if menuToggle is in menu mode
  menuToggle.onclick = function () {
    if (menuToggle.getAttribute('data-mode') !== 'menu') return;
    const isShowing = !sidebar.classList.contains('show');
    sidebar.classList.toggle('show');
    overlay.classList.toggle('show');
    if (window.innerWidth <= 767) {
      setBlockInteraction(isShowing);
      if (isShowing) {
        contentArea.classList.add('sidebar-push-active');
      } else {
        contentArea.classList.remove('sidebar-push-active');
      }
    }
  };

  overlay.onclick = function () {
    sidebar.classList.remove('show');
    overlay.classList.remove('show');
    setBlockInteraction(false);
    if (window.innerWidth <= 767) {
      contentArea.classList.remove('sidebar-push-active');
    }
  };

  // Close sidebar on item click for mobile
  const sidebarItems = sidebar.querySelectorAll('.sidebar-item');
  sidebarItems.forEach(item => {
    item.onclick = function () {
      if (window.innerWidth <= 767) {
        sidebar.classList.remove('show');
        overlay.classList.remove('show');
        setBlockInteraction(false);
        contentArea.classList.remove('sidebar-push-active');
      }
    };
  });

  // Handle window resize
  window.addEventListener('resize', () => {
    if (window.innerWidth > 767) {
      sidebar.classList.remove('show');
      overlay.classList.remove('show');
      setBlockInteraction(false);
      contentArea.classList.remove('sidebar-push-active');
    }
  });
}




// Show a short notification in the top middle of the screen
function showShortTopNotification(message) {
  let existing = document.getElementById('os-short-top-notification');
  if (existing) existing.remove();
  const notif = document.createElement('div');
  notif.id = 'os-short-top-notification';
  notif.textContent = message;
  notif.style.position = 'fixed';
  notif.style.top = '32px';
  notif.style.left = '50%';
  notif.style.transform = 'translateX(-50%)';
  notif.style.background = 'var(--widget-bg)';
  notif.style.backdropFilter = 'blur(30px)';
  notif.style.color = '#fff';
  notif.style.fontSize = '16px';
  notif.style.fontWeight = '400';
  notif.style.padding = '10px 26px';
  notif.style.borderRadius = '16px';
  notif.style.zIndex = '999999';
  notif.style.boxShadow = '0 4px 24px rgba(0,0,0,0.18)';
  notif.style.opacity = '0';
  notif.style.transition = 'opacity 0.25s';
  document.body.appendChild(notif);
  setTimeout(() => { notif.style.opacity = '1'; }, 10);
  setTimeout(() => {
    notif.style.opacity = '0';
    setTimeout(() => notif.remove(), 400);
  }, 1200);
}

// Set notifications button opacity based on whether there are notifications
function setNotificationsBtnOpacity() {
  const notificationsBtn = document.getElementById('notifications-btn');
  const notificationsPanel = document.getElementById('notifications-panel');
  if (!notificationsBtn || !notificationsPanel) return;
  const notifPanelContent = notificationsPanel.querySelector('.notifications-panel-content');
  if (notifPanelContent && notifPanelContent.querySelector('.no-notifications-msg')) {
    notificationsBtn.style.opacity = '0.5';
  } else {
    notificationsBtn.style.opacity = '1';
  }
}

// Also call setNotificationsBtnOpacity on DOMContentLoaded to initialize.
document.addEventListener('DOMContentLoaded', function () {

  setNotificationsBtnOpacity();
});


function updateNotificationsBadge() {
  const notificationsBtn = document.getElementById('notifications-btn');
  if (!notificationsBtn) return;
  let notifCount = 0;
  const notificationsPanel = document.getElementById('notifications-panel');
  if (notificationsPanel) {
    const notifPanelContent = notificationsPanel.querySelector('.notifications-panel-content');
    if (notifPanelContent) {
      notifCount = notifPanelContent.querySelectorAll('.notif-card').length;
    }
  }
  let badge = notificationsBtn.querySelector('.notif-badge');
  if (!badge) {
    badge = document.createElement('span');
    badge.className = 'notif-badge';
    notificationsBtn.appendChild(badge);
  }
  if (notifCount > 0) {
    badge.textContent = notifCount > 99 ? '99+' : notifCount;
    badge.style.display = '';
  } else {
    badge.style.display = 'none';
  }
}

// After every setNotificationsBtnOpacity(); add:
setNotificationsBtnOpacity();
updateNotificationsBadge();
// ...
// On DOMContentLoaded, call updateNotificationsBadge to initialize
// ...
document.addEventListener('DOMContentLoaded', function () {
  setNotificationsBtnOpacity();
  updateNotificationsBadge();
});
// ...
// After adding a notification card:

updateNotificationsBadge();
// ...
// After removing a notification card or clearing notifications, also call updateNotificationsBadge() after setNotificationsBtnOpacity().







// --- Alert Confirmation Dialog ---
function showConfirmDialog({ title, message, iconClass, okText = "OK", cancelText = "Cancel", style = "logout" }) {
  return new Promise((resolve) => {
    let existing = document.getElementById('os-alert-overlay');
    if (existing) existing.remove();
    const overlay = document.createElement('div');
    overlay.id = 'os-alert-overlay';
    if (style === 'desktop') {
      overlay.className = 'alert-overlay desktop-alert-overlay';
      overlay.innerHTML = `
        <div class="alert-dialog desktop-alert-dialog">
          <div class="alert-icon"><i class="fas ${iconClass || 'fa-question-circle'}"></i></div>
          <div class="alert-title">${title || ''}</div>
          <div class="alert-message">${message || ''}</div>
          <div class="alert-actions">
            <button class="alert-btn alert-cancel desktop-alert-cancel">${cancelText}</button>
            <button class="alert-btn alert-ok desktop-alert-ok">${okText}</button>
          </div>
        </div>
      `;
    } else {
      overlay.className = 'alert-overlay';
      overlay.innerHTML = `
        <div class="alert-dialog">
          <div class="alert-icon"><i class="fas ${iconClass || 'fa-question-circle'}"></i></div>
          <div class="alert-title">${title || ''}</div>
          <div class="alert-message">${message || ''}</div>
          <div class="alert-actions">
            <button class="alert-btn alert-cancel">${cancelText}</button>
            <button class="alert-btn alert-ok">${okText}</button>
          </div>
        </div>
      `;
    }
    document.body.appendChild(overlay);
    setTimeout(() => overlay.classList.add('alert-overlay-bg-visible'), 10);
    setTimeout(() => overlay.querySelector('.alert-ok').focus(), 10);
    function fadeOutAndRemove(result) {
      overlay.classList.add('alert-overlay-fadeout');
      setTimeout(() => { overlay.remove(); resolve(result); }, 400);
    }
    overlay.querySelector('.alert-cancel').onclick = () => fadeOutAndRemove(false);
    overlay.querySelector('.alert-ok').onclick = () => { overlay.remove(); resolve(true); };
    overlay.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') { fadeOutAndRemove(false); }
    });
  });
}






// --- PER-APP SIDEBAR TOGGLE LOGIC ---
// Independent sidebar toggle for each app window
(function () {
  // Helper function to apply sidebar state to a specific window
  function applySidebarToggleToWindow(windowElement, isChecked) {
    console.log('Applying sidebar toggle state to window:', windowElement.id, isChecked);
    const sidebars = windowElement.querySelectorAll('.window-sidebar, .settings-sidebar, .app-store-sidebar');
    sidebars.forEach(sb => {
      if (isChecked) {
        // When toggle is ON: always keep sidebar collapsed
        sb.setAttribute('data-user-collapsed', 'true');
        if (sb._hoverLeave) sb._hoverLeave();
        sb.classList.remove('sidebar-hovered');
      } else {
        // When toggle is OFF: follow responsive breakpoints
        sb.removeAttribute('data-user-collapsed');
      }
    });

    // Update the sidebar state through updateSidebarForWindow
    if (typeof window.updateSidebarForWindow === 'function') {
      window.updateSidebarForWindow(windowElement);
    }
  }

  // Function to set up toggle for a specific window
  function setupToggleForWindow(toggle, windowElement) {
    if (!windowElement || !toggle) return;

    // Get window ID for storing the toggle state
    const windowId = windowElement.id || windowElement.getAttribute('data-app-name') || 'unknown-window';

    // Set initial state from localStorage or default to false
    const savedState = localStorage.getItem(`sidebar-toggle-${windowId}`);
    if (savedState !== null) {
      toggle.checked = savedState === 'true';
      applySidebarToggleToWindow(windowElement, toggle.checked);
    }

    // Add change listener
    toggle.addEventListener('change', function () {
      const isChecked = toggle.checked;

      // Save state in localStorage for this specific window
      localStorage.setItem(`sidebar-toggle-${windowId}`, isChecked ? 'true' : 'false');

      // Apply sidebar state to this window only
      applySidebarToggleToWindow(windowElement, isChecked);
    });
  }

  // Patch the createWindowFromTemplate function to handle new windows
  if (typeof window.createWindowFromTemplate === 'function') {
    const originalCreateWindow = window.createWindowFromTemplate;
    window.createWindowFromTemplate = function () {
      const win = originalCreateWindow.apply(this, arguments);

      // Setup toggle for the new window after a short delay
      setTimeout(function () {
        if (!win) return;

        // Find all toggles in the new window
        const toggles = win.querySelectorAll('input.window-sidebar-toggle');
        toggles.forEach(toggle => {
          setupToggleForWindow(toggle, win);
        });
      }, 0);

      return win;
    };
  }

  // Initialize all toggles when the DOM is loaded
  document.addEventListener('DOMContentLoaded', function () {
    console.log('DOM loaded, initializing per-app sidebar toggles');

    function initToggles() {
      const toggles = document.querySelectorAll('input.window-sidebar-toggle');
      console.log('Found toggle count:', toggles.length);



      // Set up each toggle with its parent window
      toggles.forEach(toggle => {
        const windowElement = toggle.closest('.window');
        if (windowElement) {
          setupToggleForWindow(toggle, windowElement);
        }
      });

      // Set up a MutationObserver to watch for new toggles being added
      const observer = new MutationObserver(function (mutations) {
        mutations.forEach(mutation => {
          if (mutation.addedNodes && mutation.addedNodes.length > 0) {
            mutation.addedNodes.forEach(node => {
              if (node.nodeType === Node.ELEMENT_NODE) {
                // Check if this node contains toggle elements
                const newToggles = node.querySelectorAll ?
                  node.querySelectorAll('input.window-sidebar-toggle') : [];

                if (newToggles.length > 0) {
                  newToggles.forEach(toggle => {
                    const windowElement = toggle.closest('.window');
                    if (windowElement) {
                      setupToggleForWindow(toggle, windowElement);
                    }
                  });
                }
              }
            });
          }
        });
      });

      // Start observing the document
      observer.observe(document.body, { childList: true, subtree: true });
    }

    // Start initialization
    initToggles();
  });
})();

// --- Point of Sale Order Item Toggle Function ---
function toggleOrderItem(element) {
  // Prevent event bubbling if clicking on buttons, inputs, or expanded content
  if (event && (
    event.target.tagName === 'BUTTON' || 
    event.target.tagName === 'INPUT' ||
    event.target.closest('.pos-item-expanded-content')
  )) {
    return;
  }
  
  // Close all other expanded items first
  const allItems = document.querySelectorAll('.pos-order-item');
  allItems.forEach(item => {
    if (item !== element && item.classList.contains('expanded')) {
      item.classList.remove('expanded');
    }
  });
  
  // Toggle the clicked item
  element.classList.toggle('expanded');
}

// --- Point of Sale Remove Order Item Function ---
function removeOrderItem(button) {
  // Prevent event bubbling
  if (event) {
    event.stopPropagation();
  }
  
  // Find the parent order item
  const orderItem = button.closest('.pos-order-item');
  
  if (orderItem) {
    // Add a fade-out animation
    orderItem.style.transition = 'all 0.3s ease';
    orderItem.style.opacity = '0';
    orderItem.style.transform = 'translateX(100%)';
    
    // Remove the item after animation completes
    setTimeout(() => {
      orderItem.remove();
    }, 300);
  }
}

// --- Calendar App Setup Function ---
function setupCalendarApp(windowElement) {
  console.log('Setting up Calendar App');
  
  if (!windowElement) {
    console.error('Calendar app window element not found');
    return;
  }

  // Initialize mini calendar
  initializeMiniCalendar(windowElement);
  
  // Initialize main calendar view
  initializeMainCalendar(windowElement);
  
  // Set default view to week
  switchCalendarView(windowElement, 'week');
  
  // Setup calendar navigation
  setupCalendarNavigation(windowElement);
  
  // Setup view selector (Month/Week/Day/Agenda)
  setupViewSelector(windowElement);
  
  // Setup calendar search functionality
  setupCalendarSearch(windowElement);
  
  // Setup scroll synchronization
  setupScrollSynchronization(windowElement);
  
  // Setup event creation
  setupEventCreation(windowElement);
  
  // Setup event management
  setupEventManagement(windowElement);
  
  // Initialize existing events
  initializeExistingEvents(windowElement);
  
  // Setup current time indicator
  setupCurrentTimeIndicator(windowElement);
  
  // Setup sidebar functionality
  setupCalendarSidebar(windowElement);
  
  // Make calendar focusable for keyboard events
  const mainCalendar = windowElement.querySelector('.main-calendar-container');
  if (mainCalendar) {
    mainCalendar.setAttribute('tabindex', '0');
  }
  
  // Scroll to today's column when app opens
  scrollToTodayColumn(windowElement);
  
  console.log('Calendar App setup completed');
}

// --- Mini Calendar Initialization ---
function initializeMiniCalendar(windowElement) {
  const miniCalendar = windowElement.querySelector('.mini-calendar');
  if (!miniCalendar) return;
  
  const currentDate = new Date();
  renderMiniCalendar(miniCalendar, currentDate);
  
  // Setup mini calendar navigation
  const prevBtn = miniCalendar.querySelector('.mini-calendar-nav[data-direction="prev"]');
  const nextBtn = miniCalendar.querySelector('.mini-calendar-nav[data-direction="next"]');
  
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() - 1);
      renderMiniCalendar(miniCalendar, currentDate);
    });
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() + 1);
      renderMiniCalendar(miniCalendar, currentDate);
    });
  }
}

// --- Main Calendar Initialization ---
function initializeMainCalendar(windowElement) {
  const mainCalendar = windowElement.querySelector('.main-calendar-container');
  if (!mainCalendar) return;
  
  const currentDate = new Date();
  renderMainCalendar(mainCalendar, currentDate, 'month');
}

// --- Calendar Navigation Setup ---
function setupCalendarNavigation(windowElement) {
  const toolbar = windowElement.querySelector('.window-toolbar');
  if (!toolbar) return;
  
  // Setup navigation buttons
  const prevBtn = toolbar.querySelector('[data-calendar-nav="prev"]');
  const nextBtn = toolbar.querySelector('[data-calendar-nav="next"]');
  const todayBtn = toolbar.querySelector('[data-calendar-nav="today"]');
  
  if (prevBtn) {
    prevBtn.addEventListener('click', () => {
      // Navigate to previous period
      navigateCalendar(windowElement, -1);
    });
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      // Navigate to next period
      navigateCalendar(windowElement, 1);
    });
  }
  
  if (todayBtn) {
    todayBtn.addEventListener('click', () => {
      // Navigate to today
      navigateCalendarToToday(windowElement);
    });
  }
}

// --- View Selector Setup ---
function setupViewSelector(windowElement) {
  const viewSelector = windowElement.querySelector('.view-selector');
  if (!viewSelector) return;
  
  const viewButtons = viewSelector.querySelectorAll('.view-btn');
  
  viewButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      console.log('View button clicked:', btn.textContent);
      
      // Remove active class from all buttons
      viewButtons.forEach(b => b.classList.remove('active'));
      
      // Add active class to clicked button
      btn.classList.add('active');
      
      // Switch calendar view
      const viewType = btn.dataset.view || btn.textContent.toLowerCase();
      console.log('Switching to view:', viewType);
      switchCalendarView(windowElement, viewType);
    });
  });
}

// --- Calendar Search Setup ---
function setupCalendarSearch(windowElement) {
  const searchInput = windowElement.querySelector('.calendarapp-search');
  if (!searchInput) return;
  
  searchInput.addEventListener('input', (e) => {
    const searchTerm = e.target.value.toLowerCase();
    filterCalendarEvents(windowElement, searchTerm);
  });
}

// --- Helper Functions ---
function renderMiniCalendar(miniCalendar, date) {
  const monthHeader = miniCalendar.querySelector('.mini-calendar-month');
  if (monthHeader) {
    monthHeader.textContent = date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
  }
  
  const grid = miniCalendar.querySelector('.mini-calendar-grid');
  if (!grid) return;
  
  // Clear existing days
  grid.innerHTML = '';
  
  // Get first day of month and number of days
  const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
  const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  const startDate = new Date(firstDay);
  startDate.setDate(startDate.getDate() - firstDay.getDay());
  
  // Generate 42 days (6 weeks)
  for (let i = 0; i < 42; i++) {
    const currentDate = new Date(startDate);
    currentDate.setDate(startDate.getDate() + i);
    
    const dayElement = document.createElement('div');
    dayElement.className = 'mini-calendar-day';
    dayElement.textContent = currentDate.getDate();
    
    if (currentDate.getMonth() !== date.getMonth()) {
      dayElement.classList.add('other-month');
    }
    
    if (isToday(currentDate)) {
      dayElement.classList.add('today');
    }
    
    grid.appendChild(dayElement);
  }
}

function renderMainCalendar(mainCalendar, date, viewType) {
  // Implementation for rendering the main calendar view
  console.log('Rendering main calendar:', viewType, date);
}

function navigateCalendar(windowElement, direction) {
  // Implementation for calendar navigation
  console.log('Navigating calendar:', direction);
}

function navigateCalendarToToday(windowElement) {
  // Implementation for navigating to today
  console.log('Navigating to today');
  scrollToTodayColumn(windowElement);
}

function switchCalendarView(windowElement, viewType) {
  console.log('Switching calendar view to:', viewType);
  
  const mainCalendar = windowElement.querySelector('.main-calendar-container');
  if (!mainCalendar) return;
  
  // Remove any existing view classes
  mainCalendar.classList.remove('week-view', 'month-view', 'day-view', 'agenda-view');
  
  // Add the new view class
  mainCalendar.classList.add(`${viewType}-view`);
  
  switch(viewType) {
    case 'agenda':
      renderAgendaView(windowElement);
      break;
    case 'week':
      renderWeekView(windowElement);
      break;
    case 'month':
      renderMonthView(windowElement);
      break;
    case 'day':
      renderDayView(windowElement);
      break;
    default:
      console.log('Unknown view type:', viewType);
  }
}

// --- Agenda View Renderer ---
function renderAgendaView(windowElement) {
  const mainCalendar = windowElement.querySelector('.main-calendar-container');
  if (!mainCalendar) return;
  
  // Create agenda view structure
  mainCalendar.innerHTML = `
    <!-- Calendar Categories Column (replaces time column) -->
    <div class="calendar-categories-column">
      <div class="calendar-categories-header">Calendars</div>
      <div class="calendar-categories-body">
        <div class="category-slot" data-calendar="personal">
          <i class="fas fa-circle" style="color: #4285f4;"></i>
          <span>Personal</span>
        </div>
        <div class="category-slot" data-calendar="work">
          <i class="fas fa-circle" style="color: #ea4335;"></i>
          <span>Work</span>
        </div>
        <div class="category-slot" data-calendar="family">
          <i class="fas fa-circle" style="color: #34a853;"></i>
          <span>Family</span>
        </div>
        <div class="category-slot" data-calendar="holidays">
          <i class="fas fa-circle" style="color: #fbbc04;"></i>
          <span>Holidays</span>
        </div>
        <div class="category-slot" data-calendar="birthdays">
          <i class="fas fa-circle" style="color: #9c27b0;"></i>
          <span>Birthdays</span>
        </div>
        <div class="category-slot" data-calendar="team-events">
          <i class="fas fa-circle" style="color: #ff9800;"></i>
          <span>Team Events</span>
        </div>
      </div>
    </div>

    <!-- Calendar Scroll Area -->
    <div class="calendar-scroll-area agenda-scroll-area">
      <div class="calendar-header agenda-header">
        <div class="calendar-hours-row">
          <!-- 24 hours from 6 AM to 5 AM (next day) -->
          <div class="calendar-hour-header">6 AM</div>
          <div class="calendar-hour-header">7 AM</div>
          <div class="calendar-hour-header">8 AM</div>
          <div class="calendar-hour-header">9 AM</div>
          <div class="calendar-hour-header">10 AM</div>
          <div class="calendar-hour-header">11 AM</div>
          <div class="calendar-hour-header">12 PM</div>
          <div class="calendar-hour-header">1 PM</div>
          <div class="calendar-hour-header">2 PM</div>
          <div class="calendar-hour-header">3 PM</div>
          <div class="calendar-hour-header">4 PM</div>
          <div class="calendar-hour-header">5 PM</div>
          <div class="calendar-hour-header">6 PM</div>
          <div class="calendar-hour-header">7 PM</div>
          <div class="calendar-hour-header">8 PM</div>
          <div class="calendar-hour-header">9 PM</div>
          <div class="calendar-hour-header">10 PM</div>
          <div class="calendar-hour-header">11 PM</div>
          <div class="calendar-hour-header">12 AM</div>
          <div class="calendar-hour-header">1 AM</div>
          <div class="calendar-hour-header">2 AM</div>
          <div class="calendar-hour-header">3 AM</div>
          <div class="calendar-hour-header">4 AM</div>
          <div class="calendar-hour-header">5 AM</div>
        </div>
      </div>

      <!-- Calendar Body -->
      <div class="calendar-body agenda-body">
        <div class="calendar-categories-grid">
          <!-- Personal Calendar Row -->
          <div class="calendar-category-row" data-calendar="personal">
            <div class="calendar-hour-slot"></div> <!-- 6 AM -->
            <div class="calendar-hour-slot"></div> <!-- 7 AM -->
            <div class="calendar-hour-slot"></div> <!-- 8 AM -->
            <div class="calendar-hour-slot">       <!-- 9 AM -->
              <!-- Sample event -->
              <div class="calendar-event event-blue agenda-event" style="left: 0%; width: 50%;" 
                   data-event-id="personal_1" data-calendar="personal" data-start-time="9" data-end-time="10" data-title="Morning Meeting">
                <div class="event-title">Morning Meeting</div>
                <div class="event-time">9:00 AM - 10:00 AM</div>
              </div>
            </div>
            <div class="calendar-hour-slot"></div> <!-- 10 AM -->
            <div class="calendar-hour-slot"></div> <!-- 11 AM -->
            <div class="calendar-hour-slot"></div> <!-- 12 PM -->
            <div class="calendar-hour-slot"></div> <!-- 1 PM -->
            <div class="calendar-hour-slot">       <!-- 2 PM -->
              <!-- Sample event -->
              <div class="calendar-event event-blue agenda-event" style="left: 0%; width: 100%;" 
                   data-event-id="personal_2" data-calendar="personal" data-start-time="14" data-end-time="16" data-title="Lunch Break">
                <div class="event-title">Lunch Break</div>
                <div class="event-time">2:00 PM - 4:00 PM</div>
              </div>
            </div>
            <div class="calendar-hour-slot"></div> <!-- 3 PM -->
            <div class="calendar-hour-slot"></div> <!-- 4 PM -->
            <div class="calendar-hour-slot"></div> <!-- 5 PM -->
            <div class="calendar-hour-slot"></div> <!-- 6 PM -->
            <div class="calendar-hour-slot"></div> <!-- 7 PM -->
            <div class="calendar-hour-slot"></div> <!-- 8 PM -->
            <div class="calendar-hour-slot"></div> <!-- 9 PM -->
            <div class="calendar-hour-slot"></div> <!-- 10 PM -->
            <div class="calendar-hour-slot"></div> <!-- 11 PM -->
            <div class="calendar-hour-slot"></div> <!-- 12 AM -->
            <div class="calendar-hour-slot"></div> <!-- 1 AM -->
            <div class="calendar-hour-slot"></div> <!-- 2 AM -->
            <div class="calendar-hour-slot"></div> <!-- 3 AM -->
            <div class="calendar-hour-slot"></div> <!-- 4 AM -->
            <div class="calendar-hour-slot"></div> <!-- 5 AM -->
          </div>
          
          <!-- Work Calendar Row -->
          <div class="calendar-category-row" data-calendar="work">
            <div class="calendar-hour-slot"></div> <!-- 6 AM -->
            <div class="calendar-hour-slot"></div> <!-- 7 AM -->
            <div class="calendar-hour-slot"></div> <!-- 8 AM -->
            <div class="calendar-hour-slot"></div> <!-- 9 AM -->
            <div class="calendar-hour-slot"></div> <!-- 10 AM -->
            <div class="calendar-hour-slot"></div> <!-- 11 AM -->
            <div class="calendar-hour-slot"></div> <!-- 12 PM -->
            <div class="calendar-hour-slot"></div> <!-- 1 PM -->
            <div class="calendar-hour-slot"></div> <!-- 2 PM -->
            <div class="calendar-hour-slot"></div> <!-- 3 PM -->
            <div class="calendar-hour-slot"></div> <!-- 4 PM -->
            <div class="calendar-hour-slot"></div> <!-- 5 PM -->
            <div class="calendar-hour-slot"></div> <!-- 6 PM -->
            <div class="calendar-hour-slot"></div> <!-- 7 PM -->
            <div class="calendar-hour-slot"></div> <!-- 8 PM -->
            <div class="calendar-hour-slot"></div> <!-- 9 PM -->
            <div class="calendar-hour-slot"></div> <!-- 10 PM -->
            <div class="calendar-hour-slot"></div> <!-- 11 PM -->
            <div class="calendar-hour-slot"></div> <!-- 12 AM -->
            <div class="calendar-hour-slot"></div> <!-- 1 AM -->
            <div class="calendar-hour-slot"></div> <!-- 2 AM -->
            <div class="calendar-hour-slot"></div> <!-- 3 AM -->
            <div class="calendar-hour-slot"></div> <!-- 4 AM -->
            <div class="calendar-hour-slot"></div> <!-- 5 AM -->
          </div>
          
          <!-- Family Calendar Row -->
          <div class="calendar-category-row" data-calendar="family">
            <div class="calendar-hour-slot"></div> <!-- 6 AM -->
            <div class="calendar-hour-slot"></div> <!-- 7 AM -->
            <div class="calendar-hour-slot"></div> <!-- 8 AM -->
            <div class="calendar-hour-slot"></div> <!-- 9 AM -->
            <div class="calendar-hour-slot"></div> <!-- 10 AM -->
            <div class="calendar-hour-slot"></div> <!-- 11 AM -->
            <div class="calendar-hour-slot"></div> <!-- 12 PM -->
            <div class="calendar-hour-slot"></div> <!-- 1 PM -->
            <div class="calendar-hour-slot"></div> <!-- 2 PM -->
            <div class="calendar-hour-slot"></div> <!-- 3 PM -->
            <div class="calendar-hour-slot"></div> <!-- 4 PM -->
            <div class="calendar-hour-slot"></div> <!-- 5 PM -->
            <div class="calendar-hour-slot"></div> <!-- 6 PM -->
            <div class="calendar-hour-slot"></div> <!-- 7 PM -->
            <div class="calendar-hour-slot"></div> <!-- 8 PM -->
            <div class="calendar-hour-slot"></div> <!-- 9 PM -->
            <div class="calendar-hour-slot"></div> <!-- 10 PM -->
            <div class="calendar-hour-slot"></div> <!-- 11 PM -->
            <div class="calendar-hour-slot"></div> <!-- 12 AM -->
            <div class="calendar-hour-slot"></div> <!-- 1 AM -->
            <div class="calendar-hour-slot"></div> <!-- 2 AM -->
            <div class="calendar-hour-slot"></div> <!-- 3 AM -->
            <div class="calendar-hour-slot"></div> <!-- 4 AM -->
            <div class="calendar-hour-slot"></div> <!-- 5 AM -->
          </div>
          
          <!-- Holidays Calendar Row -->
          <div class="calendar-category-row" data-calendar="holidays">
            <div class="calendar-hour-slot"></div> <!-- 6 AM -->
            <div class="calendar-hour-slot"></div> <!-- 7 AM -->
            <div class="calendar-hour-slot"></div> <!-- 8 AM -->
            <div class="calendar-hour-slot"></div> <!-- 9 AM -->
            <div class="calendar-hour-slot"></div> <!-- 10 AM -->
            <div class="calendar-hour-slot"></div> <!-- 11 AM -->
            <div class="calendar-hour-slot"></div> <!-- 12 PM -->
            <div class="calendar-hour-slot"></div> <!-- 1 PM -->
            <div class="calendar-hour-slot"></div> <!-- 2 PM -->
            <div class="calendar-hour-slot"></div> <!-- 3 PM -->
            <div class="calendar-hour-slot"></div> <!-- 4 PM -->
            <div class="calendar-hour-slot"></div> <!-- 5 PM -->
            <div class="calendar-hour-slot"></div> <!-- 6 PM -->
            <div class="calendar-hour-slot"></div> <!-- 7 PM -->
            <div class="calendar-hour-slot"></div> <!-- 8 PM -->
            <div class="calendar-hour-slot"></div> <!-- 9 PM -->
            <div class="calendar-hour-slot"></div> <!-- 10 PM -->
            <div class="calendar-hour-slot"></div> <!-- 11 PM -->
            <div class="calendar-hour-slot"></div> <!-- 12 AM -->
            <div class="calendar-hour-slot"></div> <!-- 1 AM -->
            <div class="calendar-hour-slot"></div> <!-- 2 AM -->
            <div class="calendar-hour-slot"></div> <!-- 3 AM -->
            <div class="calendar-hour-slot"></div> <!-- 4 AM -->
            <div class="calendar-hour-slot"></div> <!-- 5 AM -->
          </div>
          
          <!-- Birthdays Calendar Row -->
          <div class="calendar-category-row" data-calendar="birthdays">
            <div class="calendar-hour-slot"></div> <!-- 6 AM -->
            <div class="calendar-hour-slot"></div> <!-- 7 AM -->
            <div class="calendar-hour-slot"></div> <!-- 8 AM -->
            <div class="calendar-hour-slot"></div> <!-- 9 AM -->
            <div class="calendar-hour-slot"></div> <!-- 10 AM -->
            <div class="calendar-hour-slot"></div> <!-- 11 AM -->
            <div class="calendar-hour-slot"></div> <!-- 12 PM -->
            <div class="calendar-hour-slot"></div> <!-- 1 PM -->
            <div class="calendar-hour-slot"></div> <!-- 2 PM -->
            <div class="calendar-hour-slot"></div> <!-- 3 PM -->
            <div class="calendar-hour-slot"></div> <!-- 4 PM -->
            <div class="calendar-hour-slot"></div> <!-- 5 PM -->
            <div class="calendar-hour-slot"></div> <!-- 6 PM -->
            <div class="calendar-hour-slot"></div> <!-- 7 PM -->
            <div class="calendar-hour-slot"></div> <!-- 8 PM -->
            <div class="calendar-hour-slot"></div> <!-- 9 PM -->
            <div class="calendar-hour-slot"></div> <!-- 10 PM -->
            <div class="calendar-hour-slot"></div> <!-- 11 PM -->
            <div class="calendar-hour-slot"></div> <!-- 12 AM -->
            <div class="calendar-hour-slot"></div> <!-- 1 AM -->
            <div class="calendar-hour-slot"></div> <!-- 2 AM -->
            <div class="calendar-hour-slot"></div> <!-- 3 AM -->
            <div class="calendar-hour-slot"></div> <!-- 4 AM -->
            <div class="calendar-hour-slot"></div> <!-- 5 AM -->
          </div>
          
          <!-- Team Events Calendar Row -->
          <div class="calendar-category-row" data-calendar="team-events">
            <div class="calendar-hour-slot"></div> <!-- 6 AM -->
            <div class="calendar-hour-slot"></div> <!-- 7 AM -->
            <div class="calendar-hour-slot"></div> <!-- 8 AM -->
            <div class="calendar-hour-slot"></div> <!-- 9 AM -->
            <div class="calendar-hour-slot"></div> <!-- 10 AM -->
            <div class="calendar-hour-slot"></div> <!-- 11 AM -->
            <div class="calendar-hour-slot"></div> <!-- 12 PM -->
            <div class="calendar-hour-slot"></div> <!-- 1 PM -->
            <div class="calendar-hour-slot"></div> <!-- 2 PM -->
            <div class="calendar-hour-slot"></div> <!-- 3 PM -->
            <div class="calendar-hour-slot"></div> <!-- 4 PM -->
            <div class="calendar-hour-slot"></div> <!-- 5 PM -->
            <div class="calendar-hour-slot"></div> <!-- 6 PM -->
            <div class="calendar-hour-slot"></div> <!-- 7 PM -->
            <div class="calendar-hour-slot"></div> <!-- 8 PM -->
            <div class="calendar-hour-slot"></div> <!-- 9 PM -->
            <div class="calendar-hour-slot"></div> <!-- 10 PM -->
            <div class="calendar-hour-slot"></div> <!-- 11 PM -->
            <div class="calendar-hour-slot"></div> <!-- 12 AM -->
            <div class="calendar-hour-slot"></div> <!-- 1 AM -->
            <div class="calendar-hour-slot"></div> <!-- 2 AM -->
            <div class="calendar-hour-slot"></div> <!-- 3 AM -->
            <div class="calendar-hour-slot"></div> <!-- 4 AM -->
            <div class="calendar-hour-slot"></div> <!-- 5 AM -->
          </div>
        </div>
      </div>
    </div>
  `;
  
  // Setup agenda-specific event creation
  setupAgendaEventCreation(windowElement);
  
  // Setup event selection for existing agenda events
  setupAgendaEventSelection(windowElement);
  
  console.log('Agenda view rendered');
}

// --- Week View Renderer (restore original structure) ---
function renderWeekView(windowElement) {
  const mainCalendar = windowElement.querySelector('.main-calendar-container');
  if (!mainCalendar) return;
  
  // Restore the original week view structure
  mainCalendar.innerHTML = `
    <!-- Fixed Time Column -->
    <div class="calendar-time-column">
      <div class="calendar-time-column-header"></div>
      <div class="calendar-time-column-body">
        <div class="time-slot">6 AM</div>
        <div class="time-slot">7 AM</div>
        <div class="time-slot">8 AM</div>
        <div class="time-slot">9 AM</div>
        <div class="time-slot">10 AM</div>
        <div class="time-slot">11 AM</div>
        <div class="time-slot">12 PM</div>
        <div class="time-slot">1 PM</div>
        <div class="time-slot">2 PM</div>
        <div class="time-slot">3 PM</div>
        <div class="time-slot">4 PM</div>
        <div class="time-slot">5 PM</div>
        <div class="time-slot">6 PM</div>
        <div class="time-slot">7 PM</div>
        <div class="time-slot">8 PM</div>
        <div class="time-slot">9 PM</div>
        <div class="time-slot">10 PM</div>
        <div class="time-slot">11 PM</div>
        <div class="time-slot">12 AM</div>
        <div class="time-slot">1 AM</div>
        <div class="time-slot">2 AM</div>
        <div class="time-slot">3 AM</div>
        <div class="time-slot">4 AM</div>
        <div class="time-slot">5 AM</div>
      </div>
    </div>

    <!-- Calendar Scroll Area -->
    <div class="calendar-scroll-area">
      <div class="calendar-header">
        <div class="calendar-days-row">
          <!-- Week days will be generated dynamically -->
        </div>
      </div>

      <!-- Calendar Body -->
      <div class="calendar-body">
        <div class="calendar-days-grid">
          <!-- Day columns will be generated dynamically -->
        </div>
      </div>
    </div>
  `;
  
  // Generate current week
  generateWeekView(windowElement);
  
  // Setup scroll synchronization for week view
  setupScrollSynchronization(windowElement);
  
  console.log('Week view rendered');
}

// --- Month/Day View Renderers (placeholder implementations) ---
function renderMonthView(windowElement) {
  console.log('Month view not yet implemented');
  // For now, fall back to week view
  renderWeekView(windowElement);
}

function renderDayView(windowElement) {
  console.log('Day view not yet implemented');
  // For now, fall back to week view
  renderWeekView(windowElement);
}

// --- Generate Week View ---
function generateWeekView(windowElement) {
  const calendarHeader = windowElement.querySelector('.calendar-days-row');
  const calendarGrid = windowElement.querySelector('.calendar-days-grid');
  
  if (!calendarHeader || !calendarGrid) return;
  
  // Clear existing content
  calendarHeader.innerHTML = '';
  calendarGrid.innerHTML = '';
  
  // Get current date and start of week
  const today = new Date();
  const startOfWeek = new Date(today);
  startOfWeek.setDate(today.getDate() - today.getDay()); // Sunday
  
  // Generate 7 days (week)
  for (let i = 0; i < 7; i++) {
    const currentDate = new Date(startOfWeek);
    currentDate.setDate(startOfWeek.getDate() + i);
    
    const dayNames = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];
    
    // Create day header
    const dayHeader = document.createElement('div');
    dayHeader.className = 'calendar-day-header';
    if (currentDate.toDateString() === today.toDateString()) {
      dayHeader.classList.add('today');
    }
    dayHeader.innerHTML = `
      <div class="day-name">${dayNames[i]}</div>
      <div class="day-number">${currentDate.getDate()}</div>
    `;
    calendarHeader.appendChild(dayHeader);
    
    // Create day column
    const dayColumn = document.createElement('div');
    dayColumn.className = 'calendar-day-column';
    dayColumn.dataset.dayIndex = i;
    calendarGrid.appendChild(dayColumn);
  }
  
  // Re-setup event creation for the new week view
  setupEventCreation(windowElement);
  
  // Setup event management for existing events
  setupEventManagement(windowElement);
}

// --- Agenda Event Creation Setup ---
function setupAgendaEventCreation(windowElement) {
  const categoryRows = windowElement.querySelectorAll('.calendar-category-row');
  
  categoryRows.forEach((row, rowIndex) => {
    const calendar = row.dataset.calendar;
    
    let isCreating = false;
    let startX = 0;
    let initialStartX = 0;
    let startSlotIndex = 0;
    
    // Add event listeners to the entire row for better range
    row.addEventListener('mousedown', (e) => {
      if (e.target.closest('.calendar-event') || e.target.closest('.calendar-event-creator') || isDragging) return;
      
      // Remove any existing event creator
      removeCurrentEventCreator();
      
      isCreating = true;
      
      // Add visual feedback
      document.body.style.cursor = 'col-resize';
      document.body.style.userSelect = 'none';
      
      // Calculate position within the row but use scroll area for width calculations
      const rowRect = row.getBoundingClientRect();
      const calendarScrollArea = row.closest('.calendar-scroll-area');
      const scrollAreaRect = calendarScrollArea ? calendarScrollArea.getBoundingClientRect() : rowRect;
      
      // Position relative to row for event creator placement
      const relativeXToRow = e.clientX - rowRect.left;
      
      // Use fixed slot width to match CSS (120px per hour slot)
      const slotWidth = 120; // Fixed width matching CSS .calendar-hour-slot
      
      // Snap initial position to 15-minute intervals (30px per 15-minute slot)
      const quarterSlotWidth = 30; // 15-minute interval width: 120px ÷ 4 = 30px
      const rawStartX = Math.max(0, relativeXToRow);
      startX = Math.round(rawStartX / quarterSlotWidth) * quarterSlotWidth;
      initialStartX = startX;
      
      // Calculate which time slot we're starting in (15-minute intervals)
      // Use the snapped position for accurate time slot calculation
      // Note: startX is already relative to the row, no need to add offset for time calculation
      const adjustedSnappedX = startX; // Use direct snapped position relative to row start
      
      // Calculate time slot (4 slots per hour, starting from 6 AM = slot 0)
      // adjustedSnappedX is the position in pixels from the start of the row
      // Each 30px represents a 15-minute slot, so divide by 30 to get slot index
      const timeSlotFloat = adjustedSnappedX / quarterSlotWidth; // Direct conversion from pixels to 15-minute slots
      startSlotIndex = Math.round(timeSlotFloat); // Use round for precise snapping
      
      console.log('Position calculation:', {
        adjustedSnappedX,
        slotWidth,
        timeSlotFloat,
        startSlotIndex,
        expectedTime: formatTimeSlot(startSlotIndex)
      });
      
      // Clamp to valid range (0 to 95 = 24 hours * 4 slots - 1)
      const clampedTimeSlot = Math.max(0, Math.min(95, startSlotIndex));
      const startTime = formatTimeSlot(clampedTimeSlot);
      
      // Check if there's already an event at this position
      const minEventWidth = quarterSlotWidth; // 15 minutes
      if (wouldAgendaEventCollide(row, startX, minEventWidth, null)) {
        console.log('Cannot create agenda event here - collision detected');
        return; // Don't create event if there's a collision
      }
      
      // Create agenda event creator
      currentEventCreator = createAgendaEventCreator(row, startX, startSlotIndex, calendar, startTime);
      
      // Add document listeners for better tracking
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      e.preventDefault();
    });
    
    // Use document-level mousemove for better range
    function handleMouseMove(e) {
      if (!isCreating || !currentEventCreator) return;
      
      // Use requestAnimationFrame for smoother updates
      if (currentEventCreator.animationFrame) {
        cancelAnimationFrame(currentEventCreator.animationFrame);
      }
      
      currentEventCreator.animationFrame = requestAnimationFrame(() => {
        updateEventCreatorPosition(e);
      });
    }
    
    function updateEventCreatorPosition(e) {
      
      // Calculate current position relative to row for positioning
      const rowRect = row.getBoundingClientRect();
      const calendarScrollArea = row.closest('.calendar-scroll-area');
      const scrollAreaRect = calendarScrollArea ? calendarScrollArea.getBoundingClientRect() : rowRect;
      
      // Position relative to row for event creator placement
      const relativeXToRow = e.clientX - rowRect.left;
      
      // Use fixed slot width to match CSS (120px per hour slot)
      const slotWidth = 120; // Fixed width matching CSS .calendar-hour-slot
      
      // Allow dragging across the full scroll area width (24 hours * 120px each)
      const maxRowX = 24 * slotWidth; // 24 hours * 120px = 2880px total width
      const rawCurrentX = Math.max(0, Math.min(relativeXToRow, maxRowX));
      
      // Snap current position to 15-minute intervals for precise dragging (30px per 15-minute slot)
      const quarterSlotWidth = 30; // 15-minute interval width: 120px ÷ 4 = 30px
      const currentX = Math.round(rawCurrentX / quarterSlotWidth) * quarterSlotWidth;
      
      // Calculate width and left position with better responsiveness
      let left, width;
      
      if (currentX >= initialStartX) {
        // Dragging to the right
        left = initialStartX;
        width = currentX - initialStartX;
      } else {
        // Dragging to the left
        left = currentX;
        width = initialStartX - currentX;
      }
      
      // Since currentX and initialStartX are already snapped, left and width should be aligned
      // Ensure minimum width (15 minutes = 30px)
      const minWidth = quarterSlotWidth; // 15 minutes = 30px
      const finalWidth = Math.max(width, minWidth);
      
      // Ensure the event doesn't go beyond the row bounds
      const adjustedWidth = Math.min(finalWidth, maxRowX - left);
      const adjustedLeft = Math.max(0, Math.min(left, maxRowX - adjustedWidth));
      
      // Check for collisions with existing events and adjust width if needed
      const maxAllowedWidth = getMaxAllowedAgendaWidth(row, adjustedLeft, adjustedWidth, currentEventCreator);
      const finalAdjustedWidth = Math.min(adjustedWidth, maxAllowedWidth);
      
      // Update creator position (horizontal)
      currentEventCreator.style.left = `${adjustedLeft}px`;
      currentEventCreator.style.width = `${finalAdjustedWidth}px`;
      
      // Calculate time range based on position using time slots (15-minute intervals)
      // Use positions relative to row start (no scroll area offset needed)
      const adjustedLeftInScrollArea = adjustedLeft;
      const adjustedRightInScrollArea = adjustedLeftInScrollArea + finalAdjustedWidth;
      
      // Convert positions to time slots (4 slots per hour)
      // Each 30px represents a 15-minute slot, so divide by 30 to get slot index
      const startTimeSlotFloat = adjustedLeftInScrollArea / quarterSlotWidth;
      const endTimeSlotFloat = adjustedRightInScrollArea / quarterSlotWidth;
      
      // Round to 15-minute intervals for precise snapping and clamp to valid range
      const startTimeSlot = Math.max(0, Math.min(95, Math.round(startTimeSlotFloat)));
      const endTimeSlot = Math.max(startTimeSlot + 1, Math.min(96, Math.round(endTimeSlotFloat))); // Minimum 15 minutes (1 slot)
      
      const startTime = formatTimeSlot(startTimeSlot);
      const endTime = formatTimeSlot(endTimeSlot);
      
      const timeDisplay = currentEventCreator.querySelector('.event-time-display');
      if (timeDisplay) {
        timeDisplay.textContent = `${startTime} - ${endTime}`;
      }
      
      // Update event data for sidebar sync
      if (currentEventCreator && currentEventCreator.eventData) {
        currentEventCreator.eventData.startX = adjustedLeft;
        currentEventCreator.eventData.width = finalAdjustedWidth;
        currentEventCreator.eventData.startTimeSlot = startTimeSlot;
        currentEventCreator.eventData.endTimeSlot = endTimeSlot;
        currentEventCreator.eventData.calendar = calendar;
      }
      
      // Sync with sidebar time inputs if sidebar is open
      syncTimeInputsWithEventCreator(startTime, endTime);
    }
    
    function handleMouseUp(e) {
      if (!isCreating) return;
      
      isCreating = false;
      
      // Restore cursor and selection
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
      
      // Remove document listeners
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      
      if (currentEventCreator && currentEventCreator.eventData) {
        // Prevent the click event from immediately hiding the sidebar
        e.stopPropagation();
        e.preventDefault();
        
        // Capture the eventData to prevent null reference
        const eventData = { ...currentEventCreator.eventData };
        
        // Mark the event creator as "selected" so it doesn't get removed immediately
        currentEventCreator.classList.add('selected-creator');
        
        // Show the add/edit event sidebar immediately
        console.log('Showing sidebar for new event:', eventData);
        showAddEditEventSidebar(eventData);
      }
    }
    

  });
  
  // Global click handler to remove event creator when clicking outside
  windowElement.addEventListener('click', (e) => {
    if (sidebarJustOpened) return; // Don't hide sidebar if it was just opened
    
    // Don't remove selected event creators
    if (currentEventCreator && currentEventCreator.classList.contains('selected-creator')) {
      return;
    }
    
    if (!e.target.closest('.calendar-event-creator') && 
        !e.target.closest('.calendar-category-row') &&
        !e.target.closest('.calendarapp-add-edit-event-section') &&
        !e.target.closest('.calendarapp-pay-for-event-section')) {
      removeCurrentEventCreator();
      hideAddEditEventSidebar();
    }
  });
}

// --- Helper Functions ---
function formatHour(hour) {
  const h = Math.floor(hour);
  const m = Math.floor((hour - h) * 60);
  const period = h >= 12 ? 'PM' : 'AM';
  let displayHour = h;
  
  if (h === 0) {
    displayHour = 12; // 12 AM
  } else if (h > 12) {
    displayHour = h - 12; // Convert to 12-hour format
  } else if (h === 12) {
    displayHour = 12; // 12 PM
  }
  
  return `${displayHour}:${m.toString().padStart(2, '0')} ${period}`;
}

  function createAgendaEventCreator(row, startX, startSlotIndex, calendar, startTime) {
    // Use fixed slot width to match CSS (120px per hour slot)
    const slotWidth = 120; // Fixed width matching CSS .calendar-hour-slot
    const quarterSlotWidth = 30; // 15-minute interval width: 120px ÷ 4 = 30px
    const defaultWidth = quarterSlotWidth; // Start with 15-minute slot width
  
  const creator = document.createElement('div');
  creator.className = 'calendar-event-creator agenda-event-creator';
  creator.style.position = 'absolute';
  creator.style.left = `${startX}px`;
  creator.style.width = `${defaultWidth}px`;
  creator.style.height = 'calc(100% - 8px)';
  creator.style.top = '4px';
  creator.style.zIndex = '1000';
  creator.style.transition = 'none'; // Disable transition during creation for immediate response
  
  creator.innerHTML = `
    <input type="text" class="event-creator-input" placeholder="New event" value="" />
    <div class="event-time-display">${startTime}</div>
    <div class="event-creator-actions">
      <button class="event-creator-btn save">Save</button>
      <button class="event-creator-btn cancel">Cancel</button>
    </div>
  `;
  
  // Store event data using time slots (15-minute intervals)
  const startTimeSlot = startSlotIndex; // Already calculated as time slot index
  const endTimeSlot = startTimeSlot + 1; // Default to 15 minutes (1 slot = 1 * 15 minutes)
  
  creator.eventData = {
    startX: startX,
    width: defaultWidth,
    startSlotIndex: startSlotIndex,
    startTimeSlot: startTimeSlot,
    endTimeSlot: endTimeSlot,
    calendar: calendar,
    row: row
  };
  
  row.appendChild(creator);
  
  // Focus the input and ensure it's empty
  const input = creator.querySelector('.event-creator-input');
  if (input) {
    input.value = ''; // Ensure the input is empty for new events
    setTimeout(() => input.focus(), 10);
  }
  
  // Add event handlers for the creator buttons
  const saveBtn = creator.querySelector('.event-creator-btn.save');
  const cancelBtn = creator.querySelector('.event-creator-btn.cancel');
  
  if (saveBtn) {
    saveBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      e.preventDefault();
      // Save the event
      const title = input.value.trim() || 'New Event';
      creator.eventData.title = title;
      
      // Show sidebar with a small delay to avoid conflicts
      setTimeout(() => {
        showAddEditEventSidebar(creator.eventData);
      }, 10);
    });
  }
  
  if (cancelBtn) {
    cancelBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      removeCurrentEventCreator();
    });
  }
  
  return creator;
}

// --- Agenda Event Selection Setup ---
function setupAgendaEventSelection(windowElement) {
  const agendaEvents = windowElement.querySelectorAll('.agenda-event');
  
  agendaEvents.forEach(event => {
    event.addEventListener('click', (e) => {
      e.stopPropagation();
      selectEvent(event);
    });
    
    // Add hover effects
    event.addEventListener('mouseenter', () => {
      event.style.transform = 'translateY(-1px)';
      event.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.2)';
    });
    
    event.addEventListener('mouseleave', () => {
      if (!event.classList.contains('selected')) {
        event.style.transform = '';
        event.style.boxShadow = '';
      }
    });
  });
}

function filterCalendarEvents(windowElement, searchTerm) {
  // Implementation for filtering calendar events
  console.log('Filtering calendar events:', searchTerm);
}

// --- Helper Functions for Event Management ---
function removeCurrentEventCreator() {
  if (currentEventCreator) {
    // Only remove if it's not selected (being edited)
    if (!currentEventCreator.classList.contains('selected-creator')) {
      currentEventCreator.remove();
      currentEventCreator = null;
      
      // Clear the title input field when removing event creator to prepare for new event
      const titleInput = document.getElementById('event-title-input');
      if (titleInput) {
        titleInput.value = '';
      }
    }
  }
}

function formatTimeSlot(timeSlot) {
  // Each slot is 15 minutes, calendar starts at 6 AM
  const totalMinutes = timeSlot * 15;
  const hour = (Math.floor(totalMinutes / 60) + 6) % 24; // Add 6 hours offset for 6 AM start
  const minutes = totalMinutes % 60;
  const period = hour >= 12 ? 'PM' : 'AM';
  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
  const displayMinutes = minutes.toString().padStart(2, '0');
  return `${displayHour}:${displayMinutes} ${period}`;
}







function selectEvent(eventElement) {
  // Implementation for selecting an event
  console.log('Selecting event:', eventElement);
  
  // Remove previous selections
  const allEvents = document.querySelectorAll('.calendar-event');
  allEvents.forEach(event => event.classList.remove('selected'));
  
  // Add selection to this event
  eventElement.classList.add('selected');
  
  // Show event details in sidebar
  const eventData = {
    id: eventElement.dataset.eventId,
    title: eventElement.dataset.title,
    startTime: eventElement.dataset.startTime,
    endTime: eventElement.dataset.endTime,
    calendar: eventElement.dataset.calendar
  };
  
  showAddEditEventSidebar(eventData);
}

function isToday(date) {
  const today = new Date();
  return date.toDateString() === today.toDateString();
}

// --- Scroll to Today Column ---
function scrollToTodayColumn(windowElement) {
  // Find the today column header
  const todayHeader = windowElement.querySelector('.calendar-day-header.today');
  if (!todayHeader) {
    console.log('Today column not found');
    return;
  }
  
  // Find the calendar scroll area
  const calendarScrollArea = windowElement.querySelector('.calendar-scroll-area');
  if (!calendarScrollArea) {
    console.log('Calendar scroll area not found');
    return;
  }
  
  // Calculate the position of the today column
  const allHeaders = windowElement.querySelectorAll('.calendar-day-header');
  let todayIndex = -1;
  
  allHeaders.forEach((header, index) => {
    if (header.classList.contains('today')) {
      todayIndex = index;
    }
  });
  
  if (todayIndex === -1) {
    console.log('Today index not found');
    return;
  }
  
  // Calculate scroll position
  // Each column is 200px wide (min-width from CSS)
  const columnWidth = 200;
  const scrollPosition = todayIndex * columnWidth;
  
  // Get the container width to center the today column
  const containerWidth = calendarScrollArea.clientWidth;
  const centeredScrollPosition = scrollPosition - (containerWidth / 2) + (columnWidth / 2);
  
  // Set scroll position directly to today column (no animation)
  setTimeout(() => {
    calendarScrollArea.scrollLeft = Math.max(0, centeredScrollPosition);
  }, 50); // Small delay to ensure everything is rendered
  
  console.log(`Scrolling to today column at index ${todayIndex}, scroll position: ${centeredScrollPosition}`);
}

// --- Scroll Synchronization ---
function setupScrollSynchronization(windowElement) {
  const calendarScrollArea = windowElement.querySelector('.calendar-scroll-area');
  const timeColumnBody = windowElement.querySelector('.calendar-time-column-body');
  
  if (!calendarScrollArea || !timeColumnBody) {
    console.error('Calendar scroll elements not found', {
      calendarScrollArea: !!calendarScrollArea,
      timeColumnBody: !!timeColumnBody
    });
    return;
  }
  
  console.log('Setting up calendar scroll synchronization');
  
  let isUpdating = false;
  
  // Sync vertical scrolling from calendar scroll area to time column
  calendarScrollArea.addEventListener('scroll', () => {
    if (isUpdating) return;
    
    isUpdating = true;
    requestAnimationFrame(() => {
      // Sync vertical scroll with time column
      if (timeColumnBody.scrollTop !== calendarScrollArea.scrollTop) {
        timeColumnBody.scrollTop = calendarScrollArea.scrollTop;
      }
      
      isUpdating = false;
    });
  });
  
  // Sync vertical scrolling from time column to calendar scroll area
  timeColumnBody.addEventListener('scroll', () => {
    if (isUpdating) return;
    
    isUpdating = true;
    requestAnimationFrame(() => {
      if (calendarScrollArea.scrollTop !== timeColumnBody.scrollTop) {
        calendarScrollArea.scrollTop = timeColumnBody.scrollTop;
      }
      isUpdating = false;
    });
  });
  
  console.log('Calendar scroll synchronization setup complete');
}

// --- Event Creation ---
let currentEventCreator = null; // Global variable to track current creator

function setupEventCreation(windowElement) {
  const dayColumns = windowElement.querySelectorAll('.calendar-day-column');
  
  dayColumns.forEach((column, dayIndex) => {
    let isCreating = false;
    let startY = 0;
    let initialStartY = 0;
    
    column.addEventListener('mousedown', (e) => {
      if (e.target.closest('.calendar-event') || e.target.closest('.calendar-event-creator') || isDragging) return;
      
      // Remove any existing event creator
      removeCurrentEventCreator();
      
      isCreating = true;
      
      // Add visual feedback
      document.body.style.cursor = 'row-resize';
      document.body.style.userSelect = 'none';
      
      // Use fixed slot height that matches CSS (60px per hour / 4 = 15px per 15-minute slot)
      const timeSlotHeight = 60; // Each hour slot is 60px high (matches CSS .time-slot height)
      const slotsPerHour = 4; // 15-minute intervals
      const slotHeight = 15; // 15px per 15-minute slot (60px ÷ 4)
      
      // Calculate initial position and snap to 15-minute intervals
      const rect = column.getBoundingClientRect();
      const relativeY = e.clientY - rect.top;
      const rawStartY = Math.max(0, relativeY);
      startY = Math.round(rawStartY / slotHeight) * slotHeight; // Snap to 15-minute grid
      initialStartY = startY;
      
      // Calculate time slot (in 15-minute intervals)
      const timeSlot = Math.floor(startY / slotHeight);
      const startTime = formatTimeSlot(timeSlot);
      
      // Check if there's already an event at this position
      const minEventHeight = slotHeight; // 15 minutes
      if (wouldEventCollide(column, startY, minEventHeight, null)) {
        console.log('Cannot create event here - collision detected');
        return; // Don't create event if there's a collision
      }
      
      // Create event creator
      currentEventCreator = createEventCreator(column, startY, dayIndex, startTime, slotHeight);
      
      // Add document listeners for better tracking
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      
      e.preventDefault();
    });
    
    // Use document-level mousemove for better range and responsiveness
    function handleMouseMove(e) {
      if (!isCreating || !currentEventCreator) return;
      
      // Use requestAnimationFrame for smoother updates
      if (currentEventCreator.animationFrame) {
        cancelAnimationFrame(currentEventCreator.animationFrame);
      }
      
      currentEventCreator.animationFrame = requestAnimationFrame(() => {
        updateEventCreatorPosition(e);
      });
    }
    
    function updateEventCreatorPosition(e) {
      // Cache expensive DOM operations (calculate once per drag session)
      if (!currentEventCreator.cachedData) {
        // Use fixed slot height that matches CSS
        const timeSlotHeight = 60; // Each hour slot is 60px high (matches CSS .time-slot height)
        const slotsPerHour = 4; // 15-minute intervals
        const slotHeight = 15; // 15px per 15-minute slot (60px ÷ 4)
        const containerHeight = 1440; // Fixed height: 24 hours * 60px
        const timeDisplay = currentEventCreator.querySelector('.event-time-display');
        
        currentEventCreator.cachedData = {
          containerHeight,
          slotHeight,
          timeDisplay,
          maxY: containerHeight
        };
      }
      
      const { containerHeight, slotHeight, timeDisplay, maxY } = currentEventCreator.cachedData;
      
      // Calculate current position relative to column and snap to grid
      const rect = column.getBoundingClientRect(); // Fresh rect every frame for precise tracking
      const relativeY = e.clientY - rect.top;
      const rawCurrentY = Math.max(0, relativeY);
      const currentY = Math.round(rawCurrentY / slotHeight) * slotHeight; // Snap to 15-minute grid
      
      // Calculate height and top position with snapping
      const minHeight = slotHeight; // Minimum 15 minutes = 15px
      
      // Determine drag direction and calculate positions
      let snappedTop, snappedHeight;
      
      if (currentY >= initialStartY) {
        // Dragging down
        snappedTop = initialStartY;
        snappedHeight = Math.max(minHeight, currentY - initialStartY);
      } else {
        // Dragging up
        snappedTop = currentY;
        snappedHeight = Math.max(minHeight, initialStartY - currentY);
      }
      
      // Ensure bounds
      snappedTop = Math.max(0, Math.min(snappedTop, maxY - minHeight));
      snappedHeight = Math.min(snappedHeight, maxY - snappedTop);
      
      // Check for collisions with existing events and adjust height if needed
      const adjustedHeight = getMaxAllowedHeight(column, snappedTop, snappedHeight, currentEventCreator);
      if (adjustedHeight !== snappedHeight) {
        snappedHeight = adjustedHeight;
        console.log('Height adjusted due to collision:', adjustedHeight);
      }
      
      // Debug logging
      console.log('Week drag calculation:', {
        initialStartY,
        currentY,
        direction: currentY >= initialStartY ? 'down' : 'up',
        snappedTop,
        snappedHeight,
        slotHeight
      });
      
      console.log('Final week values:', {
        snappedTop,
        snappedHeight,
        startTimeSlot: Math.round(snappedTop / slotHeight),
        endTimeSlot: Math.round((snappedTop + snappedHeight) / slotHeight)
      });
      
      // Update creator position with snapped values
      currentEventCreator.style.top = `${snappedTop}px`;
      currentEventCreator.style.height = `${snappedHeight - 2}px`; // Subtract 2px for gap
      
      // Always update time calculations during drag (remove throttling for debugging)
      console.log('Updating time calculations for week view');
      
      // Calculate time display using snapped values
        // Each 15px represents a 15-minute slot, so divide by 15 to get slot index
        const startTimeSlot = Math.floor(snappedTop / slotHeight);
        const endTimeSlot = Math.ceil((snappedTop + snappedHeight) / slotHeight);
        
        console.log('Time slot calculation:', {
          snappedTop,
          snappedHeight,
          slotHeight,
          startTimeSlot,
          endTimeSlot,
          heightInSlots: snappedHeight / slotHeight
        });
        
        // Cache time formatting to avoid repeated calculations
        const timeKey = `${startTimeSlot}-${endTimeSlot}`;
        if (!currentEventCreator.timeCache) {
          currentEventCreator.timeCache = {};
        }
        
        let startTime, endTime;
        if (currentEventCreator.timeCache[timeKey]) {
          ({ startTime, endTime } = currentEventCreator.timeCache[timeKey]);
        } else {
          startTime = formatTimeSlot(startTimeSlot);
          endTime = formatTimeSlot(endTimeSlot);
          currentEventCreator.timeCache[timeKey] = { startTime, endTime };
        }
        
        if (timeDisplay) {
          timeDisplay.textContent = `${startTime} - ${endTime}`;
          console.log('Week view time display updated:', startTime, '-', endTime);
        }
        
        // Update event data for sidebar sync using snapped values
        if (currentEventCreator && currentEventCreator.eventData) {
          currentEventCreator.eventData.startY = snappedTop;
          currentEventCreator.eventData.height = snappedHeight;
          currentEventCreator.eventData.startTimeSlot = startTimeSlot;
          currentEventCreator.eventData.endTimeSlot = endTimeSlot;
          currentEventCreator.eventData.slotHeight = slotHeight; // Store for later use
        }
        
        // Sync with sidebar time inputs if sidebar is open
        console.log('Syncing sidebar with times:', startTime, endTime);
        syncTimeInputsWithEventCreator(startTime, endTime);
    }
    
    function handleMouseUp(e) {
      if (!isCreating) return;
      
      isCreating = false;
      
      // Restore cursor and selection
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
      
      // Remove document listeners
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      
      if (currentEventCreator && currentEventCreator.eventData) {
        // Prevent the click event from immediately hiding the sidebar
        e.stopPropagation();
        e.preventDefault();
        
        // Capture the eventData to prevent null reference
        const eventData = { ...currentEventCreator.eventData };
        
        // Mark the event creator as "selected" so it doesn't get removed immediately
        currentEventCreator.classList.add('selected-creator');
        
        // Show the add/edit event sidebar
        console.log('Showing sidebar for new week event:', eventData);
        showAddEditEventSidebar(eventData);
      }
    }
  });
  
  // Global click handler to remove event creator when clicking outside
  windowElement.addEventListener('click', (e) => {
    if (sidebarJustOpened) return; // Don't hide sidebar if it was just opened
    
    if (!e.target.closest('.calendar-event-creator') && 
        !e.target.closest('.calendar-day-column') &&
        !e.target.closest('.calendarapp-add-edit-event-section') &&
        !e.target.closest('.calendarapp-pay-for-event-section')) {
      removeCurrentEventCreator();
      hideAddEditEventSidebar();
    }
  });
}

function removeCurrentEventCreator() {
  if (currentEventCreator) {
    currentEventCreator.remove();
    currentEventCreator = null;
  }
}

// --- Event Dragging ---
let draggedEvent = null;
let dragOffset = { x: 0, y: 0 };
let isDragging = false;
let dragStartTime = 0;

function setupEventDragging(eventElement) {
  let mouseDownPos = null;
  let isMouseDown = false;
  let dragStarted = false;
  const dragThreshold = 5; // pixels to move before starting drag
  
  eventElement.addEventListener('mousedown', (e) => {
    isMouseDown = true;
    dragStarted = false;
    mouseDownPos = { x: e.clientX, y: e.clientY };
    
    // Add temporary listeners for mouse move and up
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    
    e.preventDefault();
  });
  
  function handleMouseMove(e) {
    if (!isMouseDown || dragStarted) return;
    
    // Calculate distance moved
    const deltaX = Math.abs(e.clientX - mouseDownPos.x);
    const deltaY = Math.abs(e.clientY - mouseDownPos.y);
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    
    // Start dragging if moved beyond threshold
    if (distance > dragThreshold) {
      dragStarted = true;
      startEventDrag(eventElement, mouseDownPos);
    }
  }
  
  function handleMouseUp(e) {
    // Clean up temporary listeners
    document.removeEventListener('mousemove', handleMouseMove);
    document.removeEventListener('mouseup', handleMouseUp);
    
    if (isMouseDown && !dragStarted) {
      // This was a click without drag - select the event and show sidebar
      e.stopPropagation();
      selectEvent(eventElement);
    }
    
    isMouseDown = false;
    dragStarted = false;
    mouseDownPos = null;
  }
}

function startEventDrag(eventElement, mousePos) {
  if (isDragging) return;
  
  isDragging = true;
  draggedEvent = eventElement;
  dragStartTime = Date.now();
  
  // Remove event creator if it exists
  removeCurrentEventCreator();
  
  // Calculate offset from mouse to event top-left
  const eventRect = eventElement.getBoundingClientRect();
  const column = eventElement.parentElement;
  const columnRect = column.getBoundingClientRect();
  
  dragOffset.x = mousePos.x - eventRect.left;
  dragOffset.y = mousePos.y - eventRect.top;
  
  // Add dragging class for visual feedback
  eventElement.classList.add('dragging');
  eventElement.style.zIndex = '50';
  eventElement.style.pointerEvents = 'none';
  
  // Add global mouse move and up listeners
  document.addEventListener('mousemove', handleEventDrag);
  document.addEventListener('mouseup', endEventDrag);
  
  // Prevent text selection during drag
  document.body.style.userSelect = 'none';
}

function wouldEventCollide(targetColumn, newTop, eventHeight, draggedEvent) {
  // Get all events in the target column except the one being dragged
  const otherEvents = Array.from(targetColumn.querySelectorAll('.calendar-event'))
    .filter(event => event !== draggedEvent);
  
  const newBottom = newTop + eventHeight;
  
  // Check if the new position would overlap with any existing event
  for (const event of otherEvents) {
    const eventTop = parseInt(event.style.top);
    const eventBottom = eventTop + parseInt(event.style.height) + 2; // Add gap
    
    // Check for overlap: events overlap if one starts before the other ends
    const overlaps = (newTop < eventBottom) && (newBottom > eventTop);
    
    if (overlaps) {
      return true; // Collision detected
    }
  }
  
  return false; // No collision
}

function getMaxAllowedHeight(column, startTop, requestedHeight, excludeElement) {
  // Get all events in the column except the one being created/dragged
  const otherEvents = Array.from(column.querySelectorAll('.calendar-event, .calendar-event-creator'))
    .filter(event => event !== excludeElement);
  
  const requestedBottom = startTop + requestedHeight;
  let maxAllowedBottom = requestedBottom;
  
  // Find the closest event that would block expansion
  for (const event of otherEvents) {
    const eventTop = parseInt(event.style.top);
    const eventBottom = eventTop + parseInt(event.style.height) + 2; // Add gap
    
    // If this event starts after our start but before our requested end,
    // we need to stop before it
    if (eventTop >= startTop && eventTop < requestedBottom) {
      maxAllowedBottom = Math.min(maxAllowedBottom, eventTop);
    }
  }
  
  // Calculate the maximum allowed height
  const maxHeight = maxAllowedBottom - startTop;
  const minHeight = 15; // Minimum 15 minutes
  
  return Math.max(minHeight, maxHeight);
}

function wouldAgendaEventCollide(targetRow, newLeft, eventWidth, draggedEvent) {
  // Get all events in the target row except the one being dragged
  const otherEvents = Array.from(targetRow.querySelectorAll('.calendar-event'))
    .filter(event => event !== draggedEvent);
  
  const newRight = newLeft + eventWidth;
  
  // Check if the new position would overlap with any existing event
  for (const event of otherEvents) {
    const eventLeft = parseInt(event.style.left);
    const eventRight = eventLeft + parseInt(event.style.width);
    
    // Check for overlap: events overlap if one starts before the other ends
    const overlaps = (newLeft < eventRight) && (newRight > eventLeft);
    
    if (overlaps) {
      return true; // Collision detected
    }
  }
  
  return false; // No collision
}

function getMaxAllowedAgendaWidth(row, startLeft, requestedWidth, excludeElement) {
  // Get all events in the row except the one being created/dragged
  const otherEvents = Array.from(row.querySelectorAll('.calendar-event, .calendar-event-creator'))
    .filter(event => event !== excludeElement);
  
  const requestedRight = startLeft + requestedWidth;
  let maxAllowedRight = requestedRight;
  
  // Find the closest event that would block expansion
  for (const event of otherEvents) {
    const eventLeft = parseInt(event.style.left);
    const eventRight = eventLeft + parseInt(event.style.width);
    
    // If this event starts after our start but before our requested end,
    // we need to stop before it
    if (eventLeft >= startLeft && eventLeft < requestedRight) {
      maxAllowedRight = Math.min(maxAllowedRight, eventLeft);
    }
  }
  
  // Calculate the maximum allowed width
  const maxWidth = maxAllowedRight - startLeft;
  const minWidth = 30; // Minimum 15 minutes
  
  return Math.max(minWidth, maxWidth);
}

function handleEventDrag(e) {
  if (!isDragging || !draggedEvent) return;
  
  // Detect if we're in agenda view or week view
  const isAgendaView = draggedEvent.closest('.calendar-category-row');
  
  if (isAgendaView) {
    handleAgendaEventDrag(e);
  } else {
    handleWeekEventDrag(e);
  }
}

function handleAgendaEventDrag(e) {
  if (!isDragging || !draggedEvent) return;
  
  // Find the row under the mouse
  const targetRow = draggedEvent.closest('.calendar-category-row');
  if (!targetRow) return;
  
  // Calculate position within the target row
  const rowRect = targetRow.getBoundingClientRect();
  const relativeX = e.clientX - rowRect.left - dragOffset.x;
  
  // Use fixed slot width for consistent snapping (120px per hour / 4 = 30px per 15-minute slot)
  const quarterSlotWidth = 30; // 15-minute interval width
  
  // Snap to 15-minute intervals
  const snappedX = Math.max(0, Math.round(relativeX / quarterSlotWidth) * quarterSlotWidth);
  
  // Get the event's width for collision detection
  const eventWidth = parseInt(draggedEvent.style.width);
  
  // Check for collisions with other events in the target row
  if (!wouldAgendaEventCollide(targetRow, snappedX, eventWidth, draggedEvent)) {
    // Move the event to the new position only if no collision
    draggedEvent.style.left = `${snappedX}px`;
  } else {
    // Collision detected - don't move the event, keep it at current position
    return;
  }
  
  // Update time display
  const startTimeSlot = Math.floor(snappedX / quarterSlotWidth);
  const endTimeSlot = Math.floor((snappedX + eventWidth) / quarterSlotWidth);
  
  // Calculate minute-level precision for the new position
  const startMinuteSlots = startTimeSlot * 15; // Convert 15-minute slots to minutes
  const endMinuteSlots = endTimeSlot * 15;
  
  // Use minute-level precision for display if available
  let startTime, endTime;
  if (draggedEvent.dataset.startMinuteSlots !== undefined) {
    // Event has minute-level precision, update with minute precision
    startTime = minuteSlotsToTimeFormat(startMinuteSlots);
    endTime = minuteSlotsToTimeFormat(endMinuteSlots);
    
    // Update minute-level data
    draggedEvent.dataset.startMinuteSlots = startMinuteSlots;
    draggedEvent.dataset.endMinuteSlots = endMinuteSlots;
  } else {
    // Use legacy 15-minute slot display
    startTime = formatTimeSlot(startTimeSlot);
    endTime = formatTimeSlot(endTimeSlot);
  }
  
  const timeDisplay = draggedEvent.querySelector('.event-time');
  if (timeDisplay) {
    timeDisplay.textContent = `${startTime} - ${endTime}`;
  }
  
  // Update data attributes
  draggedEvent.dataset.startTime = startTimeSlot;
  draggedEvent.dataset.endTime = endTimeSlot;
  
  // Sync with sidebar if it's open and this event is being edited
  const addEditSection = document.querySelector('.calendarapp-add-edit-event-section');
  if (addEditSection && addEditSection.classList.contains('slide-in')) {
    syncTimeInputsWithEventCreator(startTime, endTime);
  }
}

function handleWeekEventDrag(e) {
  if (!isDragging || !draggedEvent) return;
  
  // Find the column under the mouse
  const calendarContainer = draggedEvent.closest('.main-calendar-container');
  const columns = calendarContainer.querySelectorAll('.calendar-day-column');
  
  let targetColumn = null;
  let targetColumnIndex = -1;
  
  // Find which column the mouse is over
  columns.forEach((column, index) => {
    const rect = column.getBoundingClientRect();
    if (e.clientX >= rect.left && e.clientX <= rect.right) {
      targetColumn = column;
      targetColumnIndex = index;
    }
  });
  
  if (!targetColumn) return;
  
  // Calculate position within the target column
  const columnRect = targetColumn.getBoundingClientRect();
  const scrollArea = targetColumn.parentElement.parentElement;
  const relativeY = e.clientY - columnRect.top + scrollArea.scrollTop - dragOffset.y;
  
  // Use fixed slot height for consistent snapping (60px per hour / 4 = 15px per 15-minute slot)
  const slotHeight = 15; // 15px per 15-minute slot
  
  // Snap to 15-minute intervals
  const snappedY = Math.max(0, Math.round(relativeY / slotHeight) * slotHeight);
  
  // Get the event's height for collision detection
  const eventHeight = parseInt(draggedEvent.style.height) + 2; // Add back the gap
  
  // Check for collisions with other events in the target column
  if (!wouldEventCollide(targetColumn, snappedY, eventHeight, draggedEvent)) {
    // Move the event to the new position only if no collision
    if (draggedEvent.parentElement !== targetColumn) {
      // Moving to a different column
      targetColumn.appendChild(draggedEvent);
      draggedEvent.dataset.dayIndex = targetColumnIndex;
    }
    
    // Update position
    draggedEvent.style.top = `${snappedY}px`;
  } else {
    // Collision detected - don't move the event, keep it at current position
    return;
  }
  
  // Update time display
  const height = parseInt(draggedEvent.style.height);
  const actualHeight = height + 2; // Add back the gap for time calculation
  const startTimeSlot = Math.floor(snappedY / slotHeight);
  const endTimeSlot = Math.floor((snappedY + actualHeight) / slotHeight);
  
  // Calculate minute-level precision for the new position
  const startMinuteSlots = startTimeSlot * 15; // Convert 15-minute slots to minutes
  const endMinuteSlots = endTimeSlot * 15;
  
  // Use minute-level precision for display if available
  let startTime, endTime;
  if (draggedEvent.dataset.startMinuteSlots !== undefined) {
    // Event has minute-level precision, update with minute precision
    startTime = minuteSlotsToTimeFormat(startMinuteSlots);
    endTime = minuteSlotsToTimeFormat(endMinuteSlots);
    
    // Update minute-level data
    draggedEvent.dataset.startMinuteSlots = startMinuteSlots;
    draggedEvent.dataset.endMinuteSlots = endMinuteSlots;
  } else {
    // Use legacy 15-minute slot display
    startTime = formatTimeSlot(startTimeSlot);
    endTime = formatTimeSlot(endTimeSlot);
  }
  
  const timeDisplay = draggedEvent.querySelector('.event-time');
  if (timeDisplay) {
    timeDisplay.textContent = `${startTime} - ${endTime}`;
  }
  
  // Update data attributes
  draggedEvent.dataset.startTime = startTimeSlot;
  draggedEvent.dataset.endTime = endTimeSlot;
  
  // Sync with sidebar if it's open and this event is being edited
  const addEditSection = document.querySelector('.calendarapp-add-edit-event-section');
  if (addEditSection && addEditSection.classList.contains('slide-in')) {
    syncTimeInputsWithEventCreator(startTime, endTime);
  }
}

function endEventDrag(e) {
  if (!isDragging || !draggedEvent) return;
  
  isDragging = false;
  
  // Remove dragging visual feedback
  draggedEvent.classList.remove('dragging');
  draggedEvent.style.zIndex = '';
  draggedEvent.style.pointerEvents = '';
  
  // Remove global listeners
  document.removeEventListener('mousemove', handleEventDrag);
  document.removeEventListener('mouseup', endEventDrag);
  
  // Restore text selection
  document.body.style.userSelect = '';
  
  // Clear drag state
  draggedEvent = null;
  dragOffset = { x: 0, y: 0 };
}

function cancelEventDrag() {
  if (!isDragging || !draggedEvent) return;
  
  // Reset event to original position if we stored it
  // For now, just end the drag
  endEventDrag();
}

function createEventCreator(column, startY, dayIndex, startTime, slotHeight) {
  const creator = document.createElement('div');
  creator.className = 'calendar-event-creator';
  creator.style.top = `${startY}px`;
  creator.style.height = `${slotHeight - 2}px`; // Default to 15 minutes minus 2px gap (dynamic)
  creator.style.transition = 'none'; // Disable transition during creation for immediate response
  
  // Calculate initial end time for time range display
  const startTimeSlot = Math.floor(startY / slotHeight);
  const endTimeSlot = startTimeSlot + 1; // Default to 15 minutes (1 slot)
  const endTime = formatTimeSlot(endTimeSlot);
  
  // Show time range like agenda view
  console.log('Creating week event creator with times:', startTime, '-', endTime);
  creator.innerHTML = `
    <div class="event-time-display" style="font-size: 10px; opacity: 0.8; margin-top: 2px;">${startTime} - ${endTime}</div>
  `;
  
  column.appendChild(creator);
  
  // Store the event data for the sidebar
  creator.eventData = {
    column: column,
    startY: startY,
    dayIndex: dayIndex,
    startTime: startTime,
    height: slotHeight, // Initial height (15 minutes, dynamic)
    startTimeSlot: startTimeSlot,
    endTimeSlot: endTimeSlot,
    slotHeight: slotHeight // Store for consistency
  };
  
  // Prevent event bubbling to avoid triggering the global click handler
  creator.addEventListener('click', (e) => {
    e.stopPropagation();
  });
  
  // Initial sync with sidebar if it's open
  setTimeout(() => {
    syncTimeInputsWithEventCreator(startTime, endTime);
  }, 10);
  
  return creator;
}

function createCalendarEvent(column, title, top, height, startTimeSlot, endTimeSlot, dayIndex, startMinuteSlots = null, endMinuteSlots = null) {
  const event = document.createElement('div');
  event.className = 'calendar-event event-blue';
  event.style.top = `${top}px`;
  event.style.height = `${height - 4}px`; // Subtract 4px for gap
  
  // Use minute-level precision if available, otherwise fall back to 15-minute slots
  let startTime, endTime;
  if (startMinuteSlots !== null && endMinuteSlots !== null) {
    startTime = minuteSlotsToTimeFormat(startMinuteSlots);
    endTime = minuteSlotsToTimeFormat(endMinuteSlots);
    
    // Store minute-level data in dataset
    event.dataset.startMinuteSlots = startMinuteSlots;
    event.dataset.endMinuteSlots = endMinuteSlots;
  } else {
    startTime = formatTimeSlot(startTimeSlot);
    endTime = formatTimeSlot(endTimeSlot);
  }
  
  event.innerHTML = `
    <div class="event-title">${title}</div>
    <div class="event-time">${startTime} - ${endTime}</div>
  `;
  
  // Add event data
  event.dataset.eventId = generateEventId();
  event.dataset.dayIndex = dayIndex;
  event.dataset.startTime = startTimeSlot;
  event.dataset.endTime = endTimeSlot;
  event.dataset.title = title;
  
  column.appendChild(event);
  
  // Make event draggable (includes click handling)
  setupEventDragging(event);
  
  return event;
}

function createAgendaEvent(row, title, left, width, startTimeSlot, endTimeSlot, calendar, startMinuteSlots = null, endMinuteSlots = null) {
  const event = document.createElement('div');
  event.className = 'calendar-event event-blue';
  event.style.position = 'absolute';
  event.style.left = `${left}px`;
  event.style.width = `${width}px`;
  event.style.height = 'calc(100% - 8px)';
  event.style.top = '4px';
  
  // Use minute-level precision if available, otherwise fall back to 15-minute slots
  let startTime, endTime;
  if (startMinuteSlots !== null && endMinuteSlots !== null) {
    startTime = minuteSlotsToTimeFormat(startMinuteSlots);
    endTime = minuteSlotsToTimeFormat(endMinuteSlots);
    
    // Store minute-level data in dataset
    event.dataset.startMinuteSlots = startMinuteSlots;
    event.dataset.endMinuteSlots = endMinuteSlots;
  } else {
    startTime = formatTimeSlot(startTimeSlot);
    endTime = formatTimeSlot(endTimeSlot);
  }
  
  event.innerHTML = `
    <div class="event-title">${title}</div>
    <div class="event-time">${startTime} - ${endTime}</div>
  `;
  
  // Add event data
  event.dataset.eventId = generateEventId();
  event.dataset.startTime = startTimeSlot;
  event.dataset.endTime = endTimeSlot;
  event.dataset.title = title;
  event.dataset.calendar = calendar;
  
  row.appendChild(event);
  
  // Make event draggable (includes click handling)
  setupEventDragging(event);
  
  return event;
}

function formatTimeSlot(slot) {
  // Each slot is 15 minutes, calendar starts at 6 AM
  const totalMinutes = slot * 15;
  const hour = (Math.floor(totalMinutes / 60) + 6) % 24; // Add 6 hours offset for 6 AM start
  const minutes = totalMinutes % 60;
  const period = hour >= 12 ? 'PM' : 'AM';
  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
  const displayMinutes = minutes.toString().padStart(2, '0');
  return `${displayHour}:${displayMinutes} ${period}`;
}

function generateEventId() {
  return 'event_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

// --- Event Management ---
function setupEventManagement(windowElement) {
  // Setup global click handler to deselect events and remove event creator
  windowElement.addEventListener('click', (e) => {
    if (!e.target.closest('.calendar-event') && !e.target.closest('.calendar-event-creator')) {
      deselectAllEvents(windowElement);
      // Don't remove event creator here as it's handled in setupEventCreation
    }
  });
  
  // Setup keyboard shortcuts
  windowElement.addEventListener('keydown', (e) => {
    const selectedEvent = windowElement.querySelector('.calendar-event.selected');
    
    if (e.key === 'Delete' && selectedEvent && !isDragging) {
      deleteEvent(selectedEvent);
          } else if (e.key === 'Escape') {
        if (isDragging) {
          // Cancel drag operation
          cancelEventDrag();
        } else {
          deselectAllEvents(windowElement);
          removeCurrentEventCreator(); // Also remove event creator on Escape
        }
      }
  });
}

function selectEvent(eventElement) {
  // Deselect all other events
  const allEvents = eventElement.closest('.main-calendar-container').querySelectorAll('.calendar-event');
  allEvents.forEach(event => event.classList.remove('selected'));
  
  // Select this event
  eventElement.classList.add('selected');
  
  // Show sidebar with event data
  const eventData = extractEventDataFromElement(eventElement);
  if (eventData) {
    // Create a temporary event creator for existing events to enable sync
    createTemporaryEventCreator(eventData);
    
    showAddEditEventSidebar(eventData);
    
    // Populate the title field with existing event title
    const titleInput = document.getElementById('event-title-input');
    const titleElement = eventElement.querySelector('.event-title');
    if (titleInput && titleElement) {
      titleInput.value = titleElement.textContent;
    }
  }
}

function extractEventDataFromElement(eventElement) {
  // Check if this is an agenda view event or week view event
  const isAgendaEvent = eventElement.closest('.calendar-category-row');
  
  if (isAgendaEvent) {
    // Agenda view event - extract horizontal positioning data
    const row = eventElement.parentElement;
    const left = parseInt(eventElement.style.left) || 0;
    const width = parseInt(eventElement.style.width) || 30;
    const calendar = row.dataset.calendar || 'personal';
    
    // Calculate time slots from horizontal position
    const quarterSlotWidth = 30; // 15-minute interval width: 120px ÷ 4 = 30px
    const startTimeSlot = Math.floor(left / quarterSlotWidth);
    const endTimeSlot = Math.floor((left + width) / quarterSlotWidth);
    
    // Get title from the event element
    const titleElement = eventElement.querySelector('.event-title');
    const title = titleElement ? titleElement.textContent : '';
    
    // Check for minute-level data in dataset
    const startMinuteSlots = eventElement.dataset.startMinuteSlots ? parseInt(eventElement.dataset.startMinuteSlots) : null;
    const endMinuteSlots = eventElement.dataset.endMinuteSlots ? parseInt(eventElement.dataset.endMinuteSlots) : null;
    
    return {
      row: row,
      startX: left,
      width: width,
      startTimeSlot: startTimeSlot,
      endTimeSlot: endTimeSlot,
      startMinuteSlots: startMinuteSlots,
      endMinuteSlots: endMinuteSlots,
      startTime: formatTimeSlot(startTimeSlot),
      endTime: formatTimeSlot(endTimeSlot),
      calendar: calendar,
      title: title
    };
  } else {
    // Week view event - extract vertical positioning data
    const column = eventElement.parentElement;
    const dayIndex = parseInt(eventElement.dataset.dayIndex) || 0;
    const top = parseInt(eventElement.style.top) || 0;
    const height = parseInt(eventElement.style.height) + 2 || 60; // Add back the 2px gap
    
    // Use fixed slot height that matches CSS
    const timeSlotHeight = 60; // Each hour slot is 60px high (matches CSS .time-slot height)
    const slotsPerHour = 4; // 15-minute intervals
    const slotHeight = 15; // 15px per 15-minute slot (60px ÷ 4)
    
    const startTimeSlot = Math.floor(top / slotHeight);
    const endTimeSlot = Math.floor((top + height) / slotHeight);
    
    // Get title from the event element
    const titleElement = eventElement.querySelector('.event-title');
    const title = titleElement ? titleElement.textContent : '';
    
    // Check for minute-level data in dataset
    const startMinuteSlots = eventElement.dataset.startMinuteSlots ? parseInt(eventElement.dataset.startMinuteSlots) : null;
    const endMinuteSlots = eventElement.dataset.endMinuteSlots ? parseInt(eventElement.dataset.endMinuteSlots) : null;
    
    return {
      column: column,
      startY: top,
      dayIndex: dayIndex,
      height: height,
      startTimeSlot: startTimeSlot,
      endTimeSlot: endTimeSlot,
      startMinuteSlots: startMinuteSlots,
      endMinuteSlots: endMinuteSlots,
      startTime: formatTimeSlot(startTimeSlot),
      slotHeight: slotHeight,
      title: title
    };
  }
}

function createTemporaryEventCreator(eventData) {
  // Remove any existing event creator
  removeCurrentEventCreator();
  
  // Create a temporary invisible event creator for sync purposes
  const creator = document.createElement('div');
  creator.className = 'calendar-event-creator';
  creator.style.opacity = '0';
  creator.style.pointerEvents = 'none';
  creator.style.zIndex = '-1';
  
  const startTime = formatTimeSlot(eventData.startTimeSlot);
  const endTime = formatTimeSlot(eventData.endTimeSlot);
  
  // Check if this is an agenda event or week event
  if (eventData.row) {
    // Agenda view event
    creator.classList.add('agenda-event-creator');
    creator.style.position = 'absolute';
    creator.style.left = `${eventData.startX}px`;
    creator.style.width = `${eventData.width}px`;
    creator.style.height = 'calc(100% - 8px)';
    creator.style.top = '4px';
    
    creator.innerHTML = `
      <div class="event-time-display">${startTime} - ${endTime}</div>
    `;
    
    // Add to row
    eventData.row.appendChild(creator);
  } else {
    // Week view event
    creator.style.top = `${eventData.startY}px`;
    creator.style.height = `${eventData.height - 2}px`;
    
    creator.innerHTML = `
      <div class="event-time-display">${startTime} - ${endTime}</div>
    `;
    
    // Ensure slotHeight is included for week view
    if (!eventData.slotHeight) {
      const timeSlotHeight = 60; // Each hour slot is 60px high (matches CSS .time-slot height)
      const slotsPerHour = 4; // 15-minute intervals
      eventData.slotHeight = 15; // 15px per 15-minute slot (60px ÷ 4)
    }
    
    // Add to column
    eventData.column.appendChild(creator);
  }
  
  // Store the event data
  creator.eventData = eventData;
  
  // Set as current event creator
  currentEventCreator = creator;
}

// --- Calendar Sidebar Functions ---
let sidebarJustOpened = false;

function showAddEditEventSidebar(eventData) {
  console.log('showAddEditEventSidebar called with:', eventData);
  
  const calendarWindow = document.querySelector('.calendar-app-window');
  if (!calendarWindow) {
    console.log('Calendar window not found');
    return;
  }
  
  const addEditSection = calendarWindow.querySelector('.calendarapp-add-edit-event-section');
  const payForEventSection = calendarWindow.querySelector('.calendarapp-pay-for-event-section');
  
  if (!addEditSection) {
    console.log('Add/edit section not found');
    return;
  }
  
  // Set flag to prevent immediate hiding
  sidebarJustOpened = true;
  setTimeout(() => {
    sidebarJustOpened = false;
  }, 100);
  
  // Hide payment section
  if (payForEventSection) {
    payForEventSection.style.display = 'none';
  }
  
  // Show and slide in the add/edit section
  addEditSection.style.display = 'flex';
  setTimeout(() => {
    addEditSection.classList.add('slide-in');
  }, 10);
  
  // Populate form with event data if provided
  if (eventData) {
    populateEventForm(eventData);
    
    // Set the title if available, otherwise clear it for new events
    const titleInput = addEditSection.querySelector('#event-title-input');
    if (titleInput) {
      titleInput.value = eventData.title || ''; // Clear title for new events
    }
    
    // Sync time inputs with current event creator
    if (eventData.startTimeSlot !== undefined && eventData.endTimeSlot !== undefined) {
      const startTime = formatTimeSlot(eventData.startTimeSlot);
      const endTime = formatTimeSlot(eventData.endTimeSlot);
      setTimeout(() => {
        syncTimeInputsWithEventCreator(startTime, endTime);
      }, 50);
    }
  }
  
  // Setup event listeners for the sidebar
  setupAddEditEventSidebar(addEditSection);
}

function hideAddEditEventSidebar() {
  const calendarWindow = document.querySelector('.calendar-app-window');
  if (!calendarWindow) return;
  
  const addEditSection = calendarWindow.querySelector('.calendarapp-add-edit-event-section');
  if (!addEditSection) return;
  
  // Slide out
  addEditSection.classList.remove('slide-in');
  
  // Hide after animation
  setTimeout(() => {
    addEditSection.style.display = 'none';
  }, 300);
  
  // Remove any current event creator (force removal even if selected)
  if (currentEventCreator) {
    currentEventCreator.remove();
    currentEventCreator = null;
  }
}

function showPayForEventSidebar() {
  const calendarWindow = document.querySelector('.calendar-app-window');
  if (!calendarWindow) return;
  
  const addEditSection = calendarWindow.querySelector('.calendarapp-add-edit-event-section');
  const payForEventSection = calendarWindow.querySelector('.calendarapp-pay-for-event-section');
  
  if (!payForEventSection) return;
  
  // Hide add/edit section
  if (addEditSection) {
    addEditSection.classList.remove('slide-in');
    setTimeout(() => {
      addEditSection.style.display = 'none';
    }, 300);
  }
  
  // Show payment section after a delay
  setTimeout(() => {
    payForEventSection.style.display = 'flex';
    setTimeout(() => {
      payForEventSection.classList.add('slide-in');
    }, 10);
  }, 300);
}

function populateEventForm(eventData) {
  if (!eventData) {
    // If no event data, set default values (ensure times are within 6 AM - 6 AM range)
    const now = new Date();
    let defaultHour = now.getHours();
    
    // If current time is before 6 AM, default to 9 AM
    if (defaultHour < 6) {
      defaultHour = 9;
    }
    
    const defaultStartTime = `${String(defaultHour).padStart(2, '0')}:00`;
    const defaultEndTime = `${String(defaultHour + 1).padStart(2, '0')}:00`;
    const defaultDate = now.toISOString().split('T')[0];
    
    const titleInput = document.getElementById('event-title-input');
    const dateInput = document.getElementById('event-date-input');
    const startTimeInput = document.getElementById('event-start-time-input');
    const endTimeInput = document.getElementById('event-end-time-input');
    
    if (titleInput) titleInput.value = '';
    if (dateInput) dateInput.value = defaultDate;
    if (startTimeInput) startTimeInput.value = defaultStartTime;
    if (endTimeInput) endTimeInput.value = defaultEndTime;
    
    if (titleInput) {
      setTimeout(() => titleInput.focus(), 100);
    }
    return;
  }
  
  // Calculate time from event data
  let startTime, endTime, eventDate;
  
  // Check if we have minute-level precision data first
  if (eventData.startMinuteSlots !== undefined && eventData.endMinuteSlots !== undefined) {
    // Use minute-level precision data
    startTime = minuteSlotsToTimeFormat(eventData.startMinuteSlots);
    endTime = minuteSlotsToTimeFormat(eventData.endMinuteSlots);
    
    // For events with minute slots, use today's date
    eventDate = new Date();
  } else if (eventData.startTimeSlot !== undefined && eventData.endTimeSlot !== undefined) {
    // Agenda view event - use time slot data (legacy 15-minute intervals)
    startTime = formatTimeSlot(eventData.startTimeSlot);
    endTime = formatTimeSlot(eventData.endTimeSlot);
    
    // For agenda view, use today's date
    eventDate = new Date();
  } else {
    // Week view event - use slot-based data with dynamic slot height
    const slotHeight = eventData.slotHeight || 15; // Use stored slot height or fallback to 15px
    const startTimeSlot = Math.floor(eventData.startY / slotHeight);
    const height = eventData.height || (slotHeight * 4); // Use stored height or default to 1 hour
    const endTimeSlot = startTimeSlot + Math.floor(height / slotHeight);
    
    startTime = formatTimeSlot(startTimeSlot);
    endTime = formatTimeSlot(endTimeSlot);
    
    // Get current date for the day column
    const today = new Date();
    eventDate = new Date(today);
    
    // Only add dayIndex if it's a valid number
    if (typeof eventData.dayIndex === 'number' && !isNaN(eventData.dayIndex)) {
      eventDate.setDate(today.getDate() + eventData.dayIndex);
    }
  }
  
  // Populate form fields
  const titleInput = document.getElementById('event-title-input');
  const dateInput = document.getElementById('event-date-input');
  const startTimeInput = document.getElementById('event-start-time-input');
  const endTimeInput = document.getElementById('event-end-time-input');
  
  // Clear title for new events (when no title is provided)
  if (titleInput) titleInput.value = eventData.title || '';
  
  // Ensure eventDate is valid before using toISOString
  if (dateInput && eventDate && !isNaN(eventDate.getTime())) {
    dateInput.value = eventDate.toISOString().split('T')[0];
  } else if (dateInput) {
    // Fallback to today's date if eventDate is invalid
    dateInput.value = new Date().toISOString().split('T')[0];
  }
  
  if (startTimeInput) startTimeInput.value = convertTo24HourFormat(startTime);
  if (endTimeInput) endTimeInput.value = convertTo24HourFormat(endTime);
  
  // Store the height in event data for future reference (only for week view)
      if (eventData.startTimeSlot === undefined) {
    // Week view - store slot-based data with dynamic slot height
    const slotHeight = eventData.slotHeight || 15; // Use stored slot height or fallback to 15px
    const height = eventData.height || (slotHeight * 4); // Use stored height or default to 1 hour
    const startTimeSlot = Math.floor(eventData.startY / slotHeight);
    const endTimeSlot = startTimeSlot + Math.floor(height / slotHeight);
    
    eventData.height = height;
    eventData.startTimeSlot = startTimeSlot;
    eventData.endTimeSlot = endTimeSlot;
  }
  
  // Focus on title input
  if (titleInput) {
    setTimeout(() => titleInput.focus(), 100);
  }
}

function setupAddEditEventSidebar(sidebarElement) {
  // Avoid setting up listeners multiple times
  if (sidebarElement.dataset.listenersSetup === 'true') {
    return;
  }
  sidebarElement.dataset.listenersSetup = 'true';
  
  // Close button
  const closeBtn = sidebarElement.querySelector('.calendarapp-close-event-sidebar');
  if (closeBtn) {
    closeBtn.addEventListener('click', hideAddEditEventSidebar);
  }
  
  // Payment method buttons
  const paymentBtns = sidebarElement.querySelectorAll('.calendarapp-payment-btn');
  paymentBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      // Remove active class from all buttons
      paymentBtns.forEach(b => b.classList.remove('active'));
      // Add active class to clicked button
      this.classList.add('active');
      
      // If "Paid" is selected, show payment section
      if (this.dataset.paymentType === 'paid') {
        setTimeout(() => {
          showPayForEventSidebar();
        }, 500);
      }
    });
  });
  
  // Schedule event button
  const scheduleBtn = sidebarElement.querySelector('.calendarapp-schedule-event-btn');
  if (scheduleBtn) {
    scheduleBtn.addEventListener('click', function() {
      const paymentType = sidebarElement.querySelector('.calendarapp-payment-btn.active')?.dataset.paymentType || 'free';
      
      if (paymentType === 'free') {
        // Create the event directly
        createEventFromSidebar();
      } else {
        // Show payment section
        showPayForEventSidebar();
      }
    });
  }
  
  // All day toggle
  const allDayToggle = document.getElementById('all-day-toggle');
  const startTimeInput = document.getElementById('event-start-time-input');
  const endTimeInput = document.getElementById('event-end-time-input');
  
  if (allDayToggle && startTimeInput && endTimeInput) {
    allDayToggle.addEventListener('change', function() {
      if (this.checked) {
        startTimeInput.disabled = true;
        endTimeInput.disabled = true;
        startTimeInput.style.opacity = '0.5';
        endTimeInput.style.opacity = '0.5';
      } else {
        startTimeInput.disabled = false;
        endTimeInput.disabled = false;
        startTimeInput.style.opacity = '1';
        endTimeInput.style.opacity = '1';
      }
    });
  }
  
  // Time input sync with event creator
  if (startTimeInput && endTimeInput) {
    startTimeInput.addEventListener('input', syncEventCreatorWithTimeInputs);
    endTimeInput.addEventListener('input', syncEventCreatorWithTimeInputs);
    startTimeInput.addEventListener('change', syncEventCreatorWithTimeInputs);
    endTimeInput.addEventListener('change', syncEventCreatorWithTimeInputs);
  }
  
  // Calendar dropdown functionality
  setupCalendarDropdown(sidebarElement);
}

function setupCalendarDropdown(sidebarElement) {
  const dropdownContainer = sidebarElement.querySelector('.calendarapp-calendar-dropdown-container');
  const dropdownBtn = sidebarElement.querySelector('.calendarapp-calendar-dropdown-btn');
  const dropdownMenu = sidebarElement.querySelector('.calendarapp-calendar-dropdown-menu');
  const selectedCalendar = sidebarElement.querySelector('.calendarapp-selected-calendar');
  const calendarOptions = sidebarElement.querySelectorAll('.calendarapp-calendar-option');
  
  if (!dropdownContainer || !dropdownBtn || !dropdownMenu) return;
  
  // Toggle dropdown on button click
  dropdownBtn.addEventListener('click', function(e) {
    e.stopPropagation();
    
    if (dropdownContainer.classList.contains('open')) {
      dropdownContainer.classList.remove('open');
    } else {
      dropdownContainer.classList.add('open');
    }
  });
  
  // Handle calendar option selection
  calendarOptions.forEach(option => {
    option.addEventListener('click', function() {
      // Remove selected class from all options
      calendarOptions.forEach(opt => opt.classList.remove('selected'));
      
      // Add selected class to clicked option
      this.classList.add('selected');
      
      // Update the selected calendar display
      const calendarName = this.querySelector('span').textContent;
      const calendarColor = this.dataset.color;
      
      // Update the button display
      selectedCalendar.querySelector('span').textContent = calendarName;
      selectedCalendar.querySelector('i').style.color = calendarColor;
      
      // Close dropdown
      dropdownContainer.classList.remove('open');
    });
  });
  
  // Close dropdown when clicking outside
  document.addEventListener('click', function(e) {
    if (!dropdownContainer.contains(e.target)) {
      dropdownContainer.classList.remove('open');
    }
  });
  
  // Set initial selected state for Personal calendar
  const personalOption = sidebarElement.querySelector('.calendarapp-calendar-option[data-calendar="personal"]');
  if (personalOption) {
    personalOption.classList.add('selected');
  }
}

function createEventFromSidebar() {
  const titleInput = document.getElementById('event-title-input');
  const title = titleInput?.value.trim();
  
  if (!title) {
    alert('Please enter an event title');
    return;
  }
  
  // Get the current event creator data or use form data
  if (currentEventCreator && currentEventCreator.eventData) {
    const eventData = currentEventCreator.eventData;
    
    // Check if this is an agenda view event or week view event
    if (eventData.row) {
      // Agenda view event
      const left = eventData.startX;
      const width = eventData.width;
      const startTimeSlot = eventData.startTimeSlot;
      const endTimeSlot = eventData.endTimeSlot;
      const calendar = eventData.calendar || 'personal';
      
      // Pass minute-level data if available
      const startMinuteSlots = eventData.startMinuteSlots;
      const endMinuteSlots = eventData.endMinuteSlots;
      
      // Create the agenda event
      createAgendaEvent(eventData.row, title, left, width, startTimeSlot, endTimeSlot, calendar, startMinuteSlots, endMinuteSlots);
    } else if (eventData.column) {
      // Week view event
      const top = eventData.startY;
      const slotHeight = eventData.slotHeight || 15; // Use stored slot height or fallback to 15px
      const height = eventData.height || (slotHeight * 4); // Use stored height or default to 1 hour
      const startTimeSlot = eventData.startTimeSlot || Math.floor(top / slotHeight);
      const endTimeSlot = eventData.endTimeSlot || Math.floor((top + height) / slotHeight);
      
      // Pass minute-level data if available
      const startMinuteSlots = eventData.startMinuteSlots;
      const endMinuteSlots = eventData.endMinuteSlots;
      
      // Create the calendar event
      createCalendarEvent(eventData.column, title, top, height, startTimeSlot, endTimeSlot, eventData.dayIndex, startMinuteSlots, endMinuteSlots);
    }
  } else {
    // Create event from form data when no drag-created event exists
    createEventFromFormData(title);
  }
  
  // Hide the sidebar
  hideAddEditEventSidebar();
}

function createEventFromFormData(title) {
  // Get form values
  const dateInput = document.getElementById('event-date-input');
  const startTimeInput = document.getElementById('event-start-time-input');
  const endTimeInput = document.getElementById('event-end-time-input');
  
  if (!dateInput?.value || !startTimeInput?.value || !endTimeInput?.value) {
    alert('Please fill in all required fields');
    return;
  }
  
  // For now, just create a default event on the first day column
  const calendarWindow = document.querySelector('.calendar-app-window');
  const firstColumn = calendarWindow?.querySelector('.calendar-day-column');
  
  if (firstColumn) {
    // Convert time to minute-based slots for precise positioning
    const startTime = startTimeInput.value;
    const [startHours, startMinutes] = startTime.split(':').map(Number);
    const startMinuteSlots = timeToMinuteSlots(startHours, startMinutes);
    
    const endTime = endTimeInput.value;
    const [endHours, endMinutes] = endTime.split(':').map(Number);
    const endMinuteSlots = timeToMinuteSlots(endHours, endMinutes);
    
    // Convert to pixel positions for visual display
    const top = minuteSlotsToPixels(startMinuteSlots);
    const height = minuteSlotsToPixels(endMinuteSlots - startMinuteSlots);
    
    // Also calculate legacy time slots for compatibility
    const adjustedStartTimeSlot = Math.floor(startMinuteSlots / 15);
    const adjustedEndTimeSlot = Math.floor(endMinuteSlots / 15);
    
    // Create the calendar event with minute-level precision
    createCalendarEvent(firstColumn, title, top, height, adjustedStartTimeSlot, adjustedEndTimeSlot, 0, startMinuteSlots, endMinuteSlots);
  }
}

// Sync time inputs in sidebar with event creator
function syncTimeInputsWithEventCreator(startTime, endTime) {
  console.log('syncTimeInputsWithEventCreator called with:', startTime, endTime);
  const startTimeInput = document.getElementById('event-start-time-input');
  const endTimeInput = document.getElementById('event-end-time-input');
  
  console.log('Time inputs found:', !!startTimeInput, !!endTimeInput);
  
  if (startTimeInput && endTimeInput) {
    // Only update if the sidebar is visible
    const addEditSection = document.querySelector('.calendarapp-add-edit-event-section');
    const isVisible = addEditSection && addEditSection.classList.contains('slide-in');
    console.log('Sidebar visible:', isVisible);
    
    if (isVisible) {
      // Convert from "2:30 AM" format to "14:30" format for HTML time inputs
      const convertedStart = convertTo24HourFormat(startTime);
      const convertedEnd = convertTo24HourFormat(endTime);
      console.log('Converting times:', startTime, '->', convertedStart, '|', endTime, '->', convertedEnd);
      
      startTimeInput.value = convertedStart;
      endTimeInput.value = convertedEnd;
      console.log('Time inputs updated successfully');
    }
  }
}

// Convert time from "2:30 AM" format to "14:30" format
function convertTo24HourFormat(timeString) {
  if (!timeString || timeString === '--:-- --') return '';
  
  const match = timeString.match(/(\d{1,2}):(\d{2})\s*(AM|PM)/i);
  if (!match) return '';
  
  let hours = parseInt(match[1]);
  const minutes = match[2];
  const period = match[3].toUpperCase();
  
  if (period === 'AM' && hours === 12) {
    hours = 0;
  } else if (period === 'PM' && hours !== 12) {
    hours += 12;
  }
  
  return `${String(hours).padStart(2, '0')}:${minutes}`;
}

// Convert time to minute-based slots (for precise time input handling)
function timeToMinuteSlots(hours, minutes) {
  // Convert to total minutes from 6 AM start
  const totalMinutes = (hours - 6) * 60 + minutes;
  // Handle times before 6 AM (next day)
  return totalMinutes < 0 ? totalMinutes + (24 * 60) : totalMinutes;
}

// Convert minute slots back to time format for display
function minuteSlotsToTimeFormat(minuteSlots) {
  // Calculate hours and minutes from 6 AM start
  const totalMinutes = minuteSlots;
  const hour = (Math.floor(totalMinutes / 60) + 6) % 24;
  const minutes = totalMinutes % 60;
  const period = hour >= 12 ? 'PM' : 'AM';
  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
  const displayMinutes = minutes.toString().padStart(2, '0');
  return `${displayHour}:${displayMinutes} ${period}`;
}

// Convert minute slots to pixel position (1 minute = 1 pixel for fine control)
function minuteSlotsToPixels(minuteSlots) {
  // Convert minutes to 15-minute slot equivalent for visual positioning
  return (minuteSlots / 15) * 15; // 15px per 15-minute visual slot
}

// Sync event creator with time inputs
function syncEventCreatorWithTimeInputs() {
  if (!currentEventCreator || !currentEventCreator.eventData) return;
  
  const startTimeInput = document.getElementById('event-start-time-input');
  const endTimeInput = document.getElementById('event-end-time-input');
  
  if (!startTimeInput?.value || !endTimeInput?.value) return;
  
  // Convert time inputs to minute-based slots (accounting for 6 AM start)
  const startTime = startTimeInput.value;
  const [startHours, startMinutes] = startTime.split(':').map(Number);
  const startMinuteSlots = timeToMinuteSlots(startHours, startMinutes);
  
  const endTime = endTimeInput.value;
  const [endHours, endMinutes] = endTime.split(':').map(Number);
  const endMinuteSlots = timeToMinuteSlots(endHours, endMinutes);
  
  // Convert to pixel positions for visual display
  const top = minuteSlotsToPixels(startMinuteSlots);
  const height = minuteSlotsToPixels(endMinuteSlots - startMinuteSlots);
  
  if (height > 0) {
    // Update event creator position
    currentEventCreator.style.top = `${top}px`;
    currentEventCreator.style.height = `${height - 2}px`;
    
    // Update time display using minute-level precision
    const formattedStartTime = minuteSlotsToTimeFormat(startMinuteSlots);
    const formattedEndTime = minuteSlotsToTimeFormat(endMinuteSlots);
    const timeDisplay = currentEventCreator.querySelector('.event-time-display');
    if (timeDisplay) {
      timeDisplay.textContent = `${formattedStartTime} - ${formattedEndTime}`;
    }
    
    // Update event data with minute-level precision
    currentEventCreator.eventData.startY = top;
    currentEventCreator.eventData.height = height;
    currentEventCreator.eventData.startMinuteSlots = startMinuteSlots;
    currentEventCreator.eventData.endMinuteSlots = endMinuteSlots;
    
    // Also update legacy time slot data for compatibility
    currentEventCreator.eventData.startTimeSlot = Math.floor(startMinuteSlots / 15);
    currentEventCreator.eventData.endTimeSlot = Math.floor(endMinuteSlots / 15);
  }
}

function setupCalendarSidebar(windowElement) {
  // Setup New Event button in sidebar to show add event form
  const newEventBtn = windowElement.querySelector('.compose-btn');
  if (newEventBtn) {
    newEventBtn.addEventListener('click', () => {
      // Show the add/edit event sidebar without event data
      showAddEditEventSidebar(null);
    });
  }
  
  // Setup keyboard shortcuts
  windowElement.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      hideAddEditEventSidebar();
    }
  });
}

function deselectAllEvents(windowElement) {
  const allEvents = windowElement.querySelectorAll('.calendar-event.selected');
  allEvents.forEach(event => event.classList.remove('selected'));
}

function deleteEvent(eventElement) {
  if (confirm('Delete this event?')) {
    eventElement.remove();
  }
}

// --- Initialize Existing Events ---
function initializeExistingEvents(windowElement) {
  const existingEvents = windowElement.querySelectorAll('.calendar-event');
  
  existingEvents.forEach(event => {
    // Make existing events draggable (includes click handling)
    setupEventDragging(event);
  });
}

// --- Current Time Indicator ---
function setupCurrentTimeIndicator(windowElement) {
  const dayColumns = windowElement.querySelectorAll('.calendar-day-column');
  const today = new Date();
  const todayDateString = today.toDateString();
  
  // Find today's column (this is simplified - in a real app you'd match by date)
  const todayColumn = Array.from(dayColumns).find((column, index) => {
    // For demo purposes, assume the "today" column is the one with existing events
    return column.querySelector('.calendar-event');
  });
  
  if (todayColumn) {
    updateCurrentTimeIndicator(todayColumn);
    
    // Update every minute
    setInterval(() => {
      updateCurrentTimeIndicator(todayColumn);
    }, 60000);
  }
}

function updateCurrentTimeIndicator(column) {
  // Remove existing indicator
  const existingIndicator = column.querySelector('.current-time-indicator');
  if (existingIndicator) {
    existingIndicator.remove();
  }
  
  const now = new Date();
  const hours = now.getHours();
  const minutes = now.getMinutes();
  
  // Only show indicator if current time is within calendar range (6 AM - 6 AM next day)
  if (hours < 6) {
    // If before 6 AM, position at the end of calendar (next day)
    const adjustedHours = hours + 24; // Add 24 hours for next day
    const topPosition = ((adjustedHours - 6) * 60) + minutes; // Subtract 6 AM offset
    
    const indicator = document.createElement('div');
    indicator.className = 'current-time-indicator';
    indicator.style.top = `${topPosition}px`;
    
    column.appendChild(indicator);
  } else {
    // Normal case: after 6 AM
    const topPosition = ((hours - 6) * 60) + minutes; // Subtract 6 AM offset
    
    const indicator = document.createElement('div');
    indicator.className = 'current-time-indicator';
    indicator.style.top = `${topPosition}px`;
    
    column.appendChild(indicator);
  }
}

// --- POS Number Pad Functionality ---
function setupPOSNumberPad() {
  // Get the keyboard button and number pad elements
  const keyboardBtn = document.querySelector('.point-of-sale-keyboard-btn');
  const numberPad = document.getElementById('pos-number-pad');
  
  if (!keyboardBtn || !numberPad) {
    return; // Elements not found, exit
  }
  
  let isNumberPadVisible = false;
  let currentInput = null; // Track which input field is currently focused
  
  // Function to show/hide number pad
  function toggleNumberPad() {
    isNumberPadVisible = !isNumberPadVisible;
    
    if (isNumberPadVisible) {
      numberPad.style.display = 'block';
      // Add a slight animation
      numberPad.style.opacity = '0';
      setTimeout(() => {
        numberPad.style.opacity = '1';
      }, 10);
    } else {
      numberPad.style.opacity = '0';
      setTimeout(() => {
        numberPad.style.display = 'none';
      }, 200);
    }
  }
  
  // Function to handle number pad button clicks
  function handleNumberPadClick(value, action) {
    if (action === 'confirm') {
      // Hide number pad on confirm
      toggleNumberPad();
      return;
    }
    
    // Find the currently focused input or the first available input
    if (!currentInput) {
      // Look for common input fields in POS system
      const possibleInputs = document.querySelectorAll(
        'input[type="text"], input[type="number"], .pos-discount-input, .customer-form-input'
      );
      
      // Find the first visible and enabled input
      for (let input of possibleInputs) {
        if (input.offsetParent !== null && !input.disabled) {
          currentInput = input;
          input.focus();
          break;
        }
      }
    }
    
    if (currentInput) {
      // Insert the value at cursor position
      const start = currentInput.selectionStart;
      const end = currentInput.selectionEnd;
      const currentValue = currentInput.value;
      
      const newValue = currentValue.substring(0, start) + value + currentValue.substring(end);
      currentInput.value = newValue;
      
      // Move cursor to after inserted value
      const newCursorPos = start + value.length;
      currentInput.setSelectionRange(newCursorPos, newCursorPos);
      
      // Trigger input event to notify any listeners
      currentInput.dispatchEvent(new Event('input', { bubbles: true }));
    }
  }
  
  // Add click event listener to keyboard button
  keyboardBtn.addEventListener('click', function(e) {
    e.preventDefault();
    e.stopPropagation();
    toggleNumberPad();
  });
  
  // Add click event listeners to number pad buttons
  const numberPadButtons = numberPad.querySelectorAll('.number-pad-btn');
  numberPadButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const number = this.getAttribute('data-number');
      const action = this.getAttribute('data-action');
      
      if (number) {
        handleNumberPadClick(number);
      } else if (action) {
        handleNumberPadClick(null, action);
      }
    });
  });
  
  // Track input focus to know which field to input to
  document.addEventListener('focusin', function(e) {
    if (e.target.matches('input[type="text"], input[type="number"], .pos-discount-input, .customer-form-input')) {
      currentInput = e.target;
    }
  });
  
  // Handle keyboard numpad input
  document.addEventListener('keydown', function(e) {
    // Only handle numpad keys when number pad is visible
    if (!isNumberPadVisible) return;
    
    const key = e.key;
    const code = e.code;
    
    // Handle numpad numbers (0-9)
    if (code.startsWith('Numpad') && /^\d$/.test(key)) {
      e.preventDefault();
      handleNumberPadClick(key);
    }
    // Handle numpad decimal point
    else if (code === 'NumpadDecimal' || (code === 'Period' && e.location === 3)) {
      e.preventDefault();
      handleNumberPadClick('.');
    }
    // Handle numpad enter for confirm
    else if (code === 'NumpadEnter' || (code === 'Enter' && e.location === 3)) {
      e.preventDefault();
      handleNumberPadClick(null, 'confirm');
    }
    // Handle escape to close number pad
    else if (key === 'Escape') {
      e.preventDefault();
      if (isNumberPadVisible) {
        toggleNumberPad();
      }
    }
  });
  
  // Close number pad when clicking outside
  document.addEventListener('click', function(e) {
    if (isNumberPadVisible && activeNumberPad &&
        !activeNumberPad.contains(e.target) && 
        !keyboardBtn.contains(e.target)) {
      toggleNumberPad();
    }
  });
}

// Initialize POS Number Pad when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  setupPOSNumberPad();
  
  // Also add global event delegation for keyboard button clicks
  document.addEventListener('click', function(e) {
    if (e.target.closest('.point-of-sale-keyboard-btn')) {
      console.log('Global keyboard button click detected');
      handleGlobalKeyboardClick(e);
    }
  });
});

// Global handler for keyboard button clicks (fallback)
function handleGlobalKeyboardClick(e) {
  e.preventDefault();
  e.stopPropagation();
  
  const button = e.target.closest('.point-of-sale-keyboard-btn');
  const posWindow = button.closest('.point-of-sale-app-window');
  
  if (!posWindow) {
    console.log('No POS window found for keyboard button');
    return;
  }
  
  // Find the visible number pad in this window
  const numberPads = posWindow.querySelectorAll('.pos-number-pad');
  let visibleNumberPad = null;
  
  for (let pad of numberPads) {
    const section = pad.closest('.pos-order-footer');
    if (section && section.offsetParent !== null) {
      visibleNumberPad = pad;
      break;
    }
  }
  
  if (!visibleNumberPad && numberPads.length > 0) {
    visibleNumberPad = numberPads[0]; // Fallback to first pad
  }
  
  if (visibleNumberPad) {
    console.log('Toggling number pad visibility');
    const isVisible = visibleNumberPad.style.display === 'block';
    
    if (isVisible) {
      visibleNumberPad.style.opacity = '0';
      setTimeout(() => {
        visibleNumberPad.style.display = 'none';
      }, 200);
    } else {
      visibleNumberPad.style.display = 'block';
      visibleNumberPad.style.opacity = '0';
      setTimeout(() => {
        visibleNumberPad.style.opacity = '1';
      }, 10);
    }
  } else {
    console.log('No number pad found to toggle');
  }
}

// Also initialize when the POS app window is opened
function initializePOSApp(windowElement) {
  // Setup number pad functionality for this specific POS window
  const keyboardBtn = windowElement.querySelector('.point-of-sale-keyboard-btn');
  const numberPads = windowElement.querySelectorAll('.pos-number-pad');
  
  if (!keyboardBtn || numberPads.length === 0) {
    console.log('POS Number pad initialization failed:', {
      keyboardBtn: !!keyboardBtn,
      numberPadsCount: numberPads.length
    });
    return;
  }
  
  console.log('Initializing POS number pad with', numberPads.length, 'pads found');
  
  let isNumberPadVisible = false;
  let currentInput = null;
  let activeNumberPad = null;
  
  function getVisibleNumberPad() {
    // Find the number pad in the currently visible section
    for (let pad of numberPads) {
      const section = pad.closest('.pos-order-footer');
      if (section && section.offsetParent !== null) {
        return pad;
      }
    }
    // Fallback to first number pad if none are clearly visible
    return numberPads[0];
  }
  
  function toggleNumberPad() {
    activeNumberPad = getVisibleNumberPad();
    if (!activeNumberPad) return;
    
    isNumberPadVisible = !isNumberPadVisible;
    
    if (isNumberPadVisible) {
      activeNumberPad.style.display = 'block';
      activeNumberPad.style.opacity = '0';
      setTimeout(() => {
        activeNumberPad.style.opacity = '1';
      }, 10);
    } else {
      activeNumberPad.style.opacity = '0';
      setTimeout(() => {
        activeNumberPad.style.display = 'none';
      }, 200);
    }
  }
  
  function handleNumberPadClick(value, action) {
    if (action === 'confirm') {
      toggleNumberPad();
      return;
    }
    
    if (!currentInput) {
      const possibleInputs = windowElement.querySelectorAll(
        'input[type="text"], input[type="number"], .pos-discount-input, .customer-form-input'
      );
      
      for (let input of possibleInputs) {
        if (input.offsetParent !== null && !input.disabled) {
          currentInput = input;
          input.focus();
          break;
        }
      }
    }
    
    if (currentInput) {
      const start = currentInput.selectionStart;
      const end = currentInput.selectionEnd;
      const currentValue = currentInput.value;
      
      const newValue = currentValue.substring(0, start) + value + currentValue.substring(end);
      currentInput.value = newValue;
      
      const newCursorPos = start + value.length;
      currentInput.setSelectionRange(newCursorPos, newCursorPos);
      
      currentInput.dispatchEvent(new Event('input', { bubbles: true }));
    }
  }
  
  keyboardBtn.addEventListener('click', function(e) {
    e.preventDefault();
    e.stopPropagation();
    console.log('Keyboard button clicked');
    toggleNumberPad();
  });
  
  // Add event listeners to all number pad buttons
  numberPads.forEach(numberPad => {
    const numberPadButtons = numberPad.querySelectorAll('.number-pad-btn');
    numberPadButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const number = this.getAttribute('data-number');
        const action = this.getAttribute('data-action');
        
        if (number) {
          handleNumberPadClick(number);
        } else if (action) {
          handleNumberPadClick(null, action);
        }
      });
    });
  });
  
  windowElement.addEventListener('focusin', function(e) {
    if (e.target.matches('input[type="text"], input[type="number"], .pos-discount-input, .customer-form-input')) {
      currentInput = e.target;
    }
  });
  
  windowElement.addEventListener('keydown', function(e) {
    if (!isNumberPadVisible) return;
    
    const key = e.key;
    const code = e.code;
    
    if (code.startsWith('Numpad') && /^\d$/.test(key)) {
      e.preventDefault();
      handleNumberPadClick(key);
    }
    else if (code === 'NumpadDecimal' || (code === 'Period' && e.location === 3)) {
      e.preventDefault();
      handleNumberPadClick('.');
    }
    else if (code === 'NumpadEnter' || (code === 'Enter' && e.location === 3)) {
      e.preventDefault();
      handleNumberPadClick(null, 'confirm');
    }
    else if (key === 'Escape') {
      e.preventDefault();
      if (isNumberPadVisible) {
        toggleNumberPad();
      }
    }
  });
  
  document.addEventListener('click', function(e) {
    if (isNumberPadVisible && 
        !numberPad.contains(e.target) && 
        !keyboardBtn.contains(e.target)) {
      toggleNumberPad();
    }
  });
}

// --- ENHANCED MOBILE SWIPE DETECTION FOR WIDGETS SCREEN AND APP SIDEBARS ---
// Robust mobile swipe detection system with improved debugging and reliability
document.addEventListener('DOMContentLoaded', function() {
  const MOBILE_BREAKPOINT = 1023;
  
  // Enhanced mobile detection
  function isMobile() {
    return window.innerWidth <= MOBILE_BREAKPOINT;
  }
  
  // Function to check if any apps are currently open
  function hasOpenApps() {
    if (typeof openWindows === 'undefined') return false;
    const openApps = Object.keys(openWindows).filter(id => {
      const win = openWindows[id];
      return win && win.element && !win.element.classList.contains('minimized');
    });
    return openApps.length > 0;
  }
  
  // Function to get the active (top-most) window element
  function getActiveWindow() {
    if (typeof activeWindow !== 'undefined' && activeWindow) {
      return activeWindow;
    }
    // Fallback: find the topmost non-minimized window
    const openApps = Object.keys(openWindows).filter(id => {
      const win = openWindows[id];
      return win && win.element && !win.element.classList.contains('minimized');
    });
    if (openApps.length > 0) {
      return openWindows[openApps[openApps.length - 1]].element;
    }
    return null;
  }
  
  // Function to toggle app sidebar
  function toggleAppSidebar(windowElement, show) {
    if (!windowElement) {
      console.log('Mobile swipe: toggleAppSidebar called with null window element');
      return false;
    }
    
    // Don't toggle sidebar for settings app - it has its own navigation
    if (windowElement.classList.contains('settings-app-window')) {
      console.log('Mobile swipe: Skipping sidebar toggle for settings app');
      return false;
    }
    
    const sidebar = windowElement.querySelector('.window-sidebar');
    const overlay = windowElement.querySelector('.sidebar-overlay');
    const contentArea = windowElement.querySelector('.window-main-content, .settings-content, .app-store-main-content');
    
    if (sidebar && overlay) {
      if (show) {
        // Use the same classes as menu-toggle functionality
        sidebar.classList.add('show');
        overlay.classList.add('show');
        if (contentArea) {
          contentArea.classList.add('sidebar-push-active');
        }
        // Add interaction blocking like menu-toggle does
        windowElement.classList.add('sidebar-block-interaction');
        console.log('Mobile swipe: App sidebar opened');
        return true;
      } else {
        // Remove the same classes as menu-toggle functionality
        sidebar.classList.remove('show');
        overlay.classList.remove('show');
        if (contentArea) {
          contentArea.classList.remove('sidebar-push-active');
        }
        // Remove interaction blocking
        windowElement.classList.remove('sidebar-block-interaction');
        console.log('Mobile swipe: App sidebar closed');
        return true;
      }
    } else {
      console.log('Mobile swipe: Required sidebar elements not found', {
        sidebar: !!sidebar,
        overlay: !!overlay,
        contentArea: !!contentArea
      });
      return false;
    }
  }
  
  // Only initialize on mobile devices
  if (!isMobile()) {
    console.log('Mobile swipe: Not mobile device, skipping initialization');
    return;
  }
  
  const mainContentArea = document.querySelector('.main-content-area');
  const desktopArea = document.querySelector('.desktop-area');
  const widgetsScreen = document.getElementById('widgets-screen');
  const notificationsScreen = document.getElementById('notifications-screen');
  
  if (!mainContentArea || !desktopArea || !widgetsScreen || !notificationsScreen) {
    console.warn('Mobile swipe: Required elements not found', {
      mainContentArea: !!mainContentArea,
      desktopArea: !!desktopArea,
      widgetsScreen: !!widgetsScreen,
      notificationsScreen: !!notificationsScreen
    });
    return;
  }
  
  console.log('Mobile swipe: All required elements found, initializing...');
  
  let currentState = 'desktop'; // 'notifications', 'desktop', or 'widgets'
  let isTransitioning = false;
  let touchStartX = 0;
  let touchStartY = 0;
  let touchStartTime = 0;
  let lastTouchX = 0;
  let isDragging = false;
  let hasMoved = false;
  let appSidebarOpen = false;
  
  const SWIPE_THRESHOLD = 50; // Minimum distance for swipe
  const SWIPE_VELOCITY_THRESHOLD = 0.3; // Minimum velocity for swipe
  const MAX_VERTICAL_DRIFT = 100; // Maximum vertical movement allowed
  const TRANSITION_DURATION = 350; // CSS transition duration
  
  // Enhanced mobile state update with better logging
  function updateMobileState(state) {
    if (isTransitioning) {
      console.log('Mobile swipe: Transition in progress, ignoring state change');
      return;
    }
    
    console.log(`Mobile swipe: Updating state from ${currentState} to ${state}`);
    isTransitioning = true;
    currentState = state;
    
    // Remove existing state classes
    document.body.classList.remove('mobile-icons-active', 'mobile-widgets-active', 'mobile-notifications-active');
    
    // Add new state class
    if (state === 'widgets') {
      document.body.classList.add('mobile-widgets-active');
      console.log('Mobile swipe: Added mobile-widgets-active class');
    } else if (state === 'notifications') {
      document.body.classList.add('mobile-notifications-active');
      console.log('Mobile swipe: Added mobile-notifications-active class');
    } else {
      document.body.classList.add('mobile-icons-active');
      console.log('Mobile swipe: Added mobile-icons-active class');
    }
    
    // Reset transition flag after animation completes
    setTimeout(() => {
      isTransitioning = false;
      console.log('Mobile swipe: Transition completed');
    }, TRANSITION_DURATION);
    
    // Safety timeout in case transition gets stuck
    setTimeout(() => {
      if (isTransitioning) {
        isTransitioning = false;
        console.log('Mobile swipe: Transition safety timeout triggered');
      }
    }, TRANSITION_DURATION * 2);
  }
  
  // Enhanced touch start handler
  function handleTouchStart(e) {
    if (isTransitioning) {
      console.log('Mobile swipe: Touch start ignored - transitioning');
      return;
    }
    
    const touch = e.touches[0];
    touchStartX = touch.clientX;
    touchStartY = touch.clientY;
    touchStartTime = Date.now();
    lastTouchX = touchStartX;
    isDragging = false;
    hasMoved = false;
    
    console.log(`Mobile swipe: Touch start at (${touchStartX}, ${touchStartY}) in state: ${currentState}`);
  }
  
  // Enhanced touch move handler
  function handleTouchMove(e) {
    if (isTransitioning) return;
    
    const touch = e.touches[0];
    const currentX = touch.clientX;
    const currentY = touch.clientY;
    
    const deltaX = currentX - touchStartX;
    const deltaY = currentY - touchStartY;
    
    // Check if this is a horizontal swipe
    if (!isDragging && Math.abs(deltaX) > 10) {
      if (Math.abs(deltaY) < MAX_VERTICAL_DRIFT) {
        isDragging = true;
        hasMoved = true;
        console.log(`Mobile swipe: Started dragging - deltaX: ${deltaX}, deltaY: ${deltaY}`);
      }
    }
    
    lastTouchX = currentX;
  }
  
  // Enhanced touch end handler with better swipe detection
  function handleTouchEnd(e) {
    if (isTransitioning || !hasMoved) {
      console.log('Mobile swipe: Touch end ignored - transitioning or no movement');
      return;
    }
    
    const touchEndTime = Date.now();
    const touchDuration = touchEndTime - touchStartTime;
    const deltaX = lastTouchX - touchStartX;
    const deltaY = Math.abs(e.changedTouches[0].clientY - touchStartY);
    
    console.log(`Mobile swipe: Touch end - deltaX: ${deltaX}, deltaY: ${deltaY}, duration: ${touchDuration}ms`);
    
    // Check if vertical movement is within acceptable range
    if (deltaY > MAX_VERTICAL_DRIFT) {
      console.log('Mobile swipe: Vertical drift too large, ignoring');
      isDragging = false;
      hasMoved = false;
      return;
    }
    
    const velocity = Math.abs(deltaX) / touchDuration;
    const distance = Math.abs(deltaX);
    
    console.log(`Mobile swipe: Distance: ${distance}px, Velocity: ${velocity}px/ms`);
    
    // Determine if this is a valid swipe
    const isValidSwipe = distance > SWIPE_THRESHOLD || velocity > SWIPE_VELOCITY_THRESHOLD;
    
    if (isValidSwipe && isDragging) {
      console.log(`Mobile swipe: Valid swipe detected - deltaX: ${deltaX}, current state: ${currentState}`);
      
      const appsOpen = hasOpenApps();
      console.log(`Mobile swipe: Apps open: ${appsOpen}`);
      
      if (appsOpen) {
        // Sync sidebar state before processing swipe
        syncSidebarState();
        
        // When an app is open, check if it's settings app with special behavior
        const activeWindow = getActiveWindow();
        const isSettingsApp = activeWindow && activeWindow.classList.contains('settings-app-window');
        
        if (isSettingsApp) {
          // Special handling for settings app
          const isShowingPanel = activeWindow.classList.contains('show-panel');
          console.log(`Mobile swipe: Settings app detected - isShowingPanel: ${isShowingPanel}, deltaX: ${deltaX}`);
          
          if (deltaX > 0 && isShowingPanel) {
            // Swipe right when panel is shown - go back to sidebar
            const headerBackBtn = activeWindow.querySelector('.window-header .back-btn');
            console.log(`Mobile swipe: Settings app back button found: ${!!headerBackBtn}`);
            if (headerBackBtn) {
              headerBackBtn.click();
              console.log('Mobile swipe: Settings app - went back to sidebar');
            }
          } else {
            console.log('Mobile swipe: Settings app - no action (not showing panel or wrong swipe direction)');
          }
          // For settings app, don't handle sidebar toggle - only back navigation
        } else {
          // Regular app behavior - handle sidebar toggle
          if (deltaX > 0) {
            // Swipe right (left to right) - open sidebar
            if (!appSidebarOpen) {
              const success = toggleAppSidebar(activeWindow, true);
              if (success) {
                appSidebarOpen = true;
                console.log('Mobile swipe: Opened app sidebar');
              } else {
                console.log('Mobile swipe: Failed to open app sidebar');
              }
            } else {
              console.log('Mobile swipe: App sidebar already open, ignoring swipe right');
            }
          } else if (deltaX < 0) {
            // Swipe left - close sidebar if it's open
            if (appSidebarOpen) {
              const success = toggleAppSidebar(activeWindow, false);
              if (success) {
                appSidebarOpen = false;
                console.log('Mobile swipe: Closed app sidebar');
              } else {
                console.log('Mobile swipe: Failed to close app sidebar');
                // Force reset the state if toggle failed
                appSidebarOpen = false;
              }
            } else {
              console.log('Mobile swipe: App sidebar already closed, ignoring swipe left');
            }
          }
        }
      } else {
        // When on home screen (no apps open), allow normal navigation
        if (deltaX > 0) {
          // Swipe right
          if (currentState === 'widgets') {
            console.log('Mobile swipe: Swiping right from widgets to desktop');
            updateMobileState('desktop');
          } else if (currentState === 'desktop') {
            console.log('Mobile swipe: Swiping right from desktop to notifications');
            updateMobileState('notifications');
          }
        } else if (deltaX < 0) {
          // Swipe left
          if (currentState === 'notifications') {
            console.log('Mobile swipe: Swiping left from notifications to desktop');
            updateMobileState('desktop');
          } else if (currentState === 'desktop') {
            console.log('Mobile swipe: Swiping left from desktop to widgets');
            updateMobileState('widgets');
          }
        }
      }
    } else {
      console.log('Mobile swipe: Not a valid swipe');
    }
    
    // Always reset touch state to prevent getting stuck
    isDragging = false;
    hasMoved = false;
    isTransitioning = false; // Also reset transition flag if touch sequence completes
  }
  
  // Reset function to clear stuck states
  function resetTouchState() {
    isDragging = false;
    hasMoved = false;
    touchStartX = 0;
    touchStartY = 0;
    touchStartTime = 0;
    lastTouchX = 0;
    console.log('Mobile swipe: Touch state reset');
  }
  
  // Scroll handler removed - using pure transform approach to prevent multiple empty screens
  
  // Add event listeners with better error handling
  try {
    mainContentArea.addEventListener('touchstart', handleTouchStart, { passive: true });
    mainContentArea.addEventListener('touchmove', handleTouchMove, { passive: true });
    mainContentArea.addEventListener('touchend', handleTouchEnd, { passive: true });
    
    // Add touchcancel listener to handle interrupted touches
    mainContentArea.addEventListener('touchcancel', function(e) {
      console.log('Mobile swipe: Touch cancelled, resetting state');
      resetTouchState();
    }, { passive: true });
    
    console.log('Mobile swipe: Event listeners attached successfully');
  } catch (error) {
    console.error('Mobile swipe: Error attaching event listeners:', error);
  }

  // Add click handler for sidebar overlay to close sidebar
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('sidebar-overlay') && 
        e.target.classList.contains('show')) {
      closeAppSidebar();
    }
  });

  // Monitor for app state changes to close sidebar when needed
  const originalOpenApp = window.openApp;
  const originalCloseWindow = window.closeWindow;
  
  // Override openApp to close sidebar when switching apps
  if (typeof originalOpenApp === 'function') {
    window.openApp = function(...args) {
      closeAppSidebar();
      return originalOpenApp.apply(this, args);
    };
  }
  
  // Monitor for window close/minimize events via MutationObserver
  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
        // Check if any windows were removed (app closed)
        mutation.removedNodes.forEach(function(node) {
          if (node.nodeType === Node.ELEMENT_NODE && node.classList && 
              node.classList.contains('window')) {
            closeAppSidebar();
          }
        });
      } else if (mutation.type === 'attributes' && 
                 mutation.attributeName === 'class' &&
                 mutation.target.classList.contains('window')) {
        // Check if a window was minimized
        if (mutation.target.classList.contains('minimized')) {
          // Check if no apps are visible anymore
          setTimeout(() => {
            if (!hasOpenApps()) {
              closeAppSidebar();
            }
          }, 100);
        }
      }
    });
  });
  
  // Start observing
  observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: true,
    attributeFilter: ['class']
  });
  
  // Function to check and sync the actual sidebar state
  function syncSidebarState() {
    const activeWindow = getActiveWindow();
    if (!activeWindow || activeWindow.classList.contains('settings-app-window')) {
      // No active window or settings app - force close state
      appSidebarOpen = false;
      return false;
    }
    
    const sidebar = activeWindow.querySelector('.window-sidebar');
    const actuallyOpen = sidebar && sidebar.classList.contains('show');
    
    if (appSidebarOpen !== actuallyOpen) {
      console.log(`Mobile swipe: Sidebar state sync - was ${appSidebarOpen}, actually ${actuallyOpen}`);
      appSidebarOpen = actuallyOpen;
    }
    
    return appSidebarOpen;
  }

  // Function to close app sidebar when switching contexts
  function closeAppSidebar() {
    // First sync the state to get accurate info
    syncSidebarState();
    
    if (appSidebarOpen) {
      const activeWindow = getActiveWindow();
      const isSettingsApp = activeWindow && activeWindow.classList.contains('settings-app-window');
      
      if (!isSettingsApp && activeWindow) {
        // Only close sidebar for non-settings apps
        const success = toggleAppSidebar(activeWindow, false);
        if (success || !activeWindow) {
          appSidebarOpen = false;
          console.log('Mobile swipe: Closed app sidebar on context switch');
        }
      } else if (!activeWindow) {
        // No active window, force reset the state
        appSidebarOpen = false;
        console.log('Mobile swipe: Reset sidebar state - no active window');
      }
    }
  }

  // Enhanced window resize handler
  function handleResize() {
    if (!isMobile()) {
      console.log('Mobile swipe: Switched to desktop, removing mobile classes and event listeners');
      // Remove mobile classes when switching to desktop
      document.body.classList.remove('mobile-icons-active', 'mobile-widgets-active', 'mobile-notifications-active');
      // Close any open app sidebar
      closeAppSidebar();
      // Remove event listeners
      mainContentArea.removeEventListener('touchstart', handleTouchStart);
      mainContentArea.removeEventListener('touchmove', handleTouchMove);
      mainContentArea.removeEventListener('touchend', handleTouchEnd);
    }
  }
  
  window.addEventListener('resize', handleResize);
  
  // Add event listeners for state cleanup
  window.addEventListener('blur', function() {
    resetTouchState();
    console.log('Mobile swipe: Window lost focus, resetting touch state');
  });
  
  window.addEventListener('visibilitychange', function() {
    if (document.hidden) {
      resetTouchState();
      console.log('Mobile swipe: Page hidden, resetting touch state');
    }
  });
  
  // Add orientation change listener for additional cleanup
  window.addEventListener('orientationchange', function() {
    setTimeout(() => {
      resetTouchState();
      syncSidebarState();
      console.log('Mobile swipe: Orientation changed, resetting state');
    }, 100);
  });
  
  // Initialize with desktop state
  updateMobileState('desktop');
  
  // Initialize notifications screen
  renderNotificationsScreen();
  
  // Add some sample notifications for testing
  if (notifications.length === 0) {
    addNotification({
      title: 'Welcome to the Dashboard',
      desc: 'Your new OS-style dashboard is ready to use!',
      meta: '2 minutes ago',
      iconClass: 'fa-rocket',
      iconBgClass: 'notif-bg-blue',
      avatar: 'img/avatar.png',
      unread: true
    });
    
    addNotification({
      title: 'System Update Available',
      desc: 'A new system update is available for download.',
      meta: '1 hour ago',
      iconClass: 'fa-download',
      iconBgClass: 'notif-bg-green',
      avatar: 'img/avatar.png',
      unread: true
    });
    
    addNotification({
      title: 'New Message',
      desc: 'You have received a new message from John Doe.',
      meta: '3 hours ago',
      iconClass: 'fa-envelope',
      iconBgClass: 'notif-bg-orange',
      avatar: 'img/avatar.png',
      unread: false
    });
  }
  
  console.log('Mobile swipe detection initialized successfully');
  
  // Add debug function to window for testing
  window.debugMobileSwipe = function() {
    const activeWindow = getActiveWindow();
    return {
      currentState,
      isTransitioning,
      appSidebarOpen,
      isDragging,
      hasMoved,
      isMobile: isMobile(),
      hasOpenApps: hasOpenApps(),
      activeWindow: activeWindow ? activeWindow.className : 'none',
      elements: {
        mainContentArea: !!mainContentArea,
        desktopArea: !!desktopArea,
        widgetsScreen: !!widgetsScreen,
        notificationsScreen: !!notificationsScreen
      },
      classes: {
        mobileIconsActive: document.body.classList.contains('mobile-icons-active'),
        mobileWidgetsActive: document.body.classList.contains('mobile-widgets-active'),
        mobileNotificationsActive: document.body.classList.contains('mobile-notifications-active')
      },
      sidebarState: activeWindow ? {
        hasSidebar: !!activeWindow.querySelector('.window-sidebar'),
        sidebarVisible: activeWindow.querySelector('.window-sidebar')?.classList.contains('show'),
        overlayVisible: activeWindow.querySelector('.sidebar-overlay')?.classList.contains('show')
      } : null
    };
  };
  
  // Add function to manually reset if needed
  window.resetMobileSwipe = function() {
    resetTouchState();
    syncSidebarState();
    isTransitioning = false;
    console.log('Mobile swipe: Manual reset performed');
    return window.debugMobileSwipe();
  };
});

// =============================
// ORIENTATION CONTROL
// Force portrait mode on mobile phones, allow rotation on tablets
// =============================

(function() {
  'use strict';
  
  // Device detection
  function isMobilePhone() {
    return window.innerWidth <= 767;
  }
  
  function isTablet() {
    return window.innerWidth >= 768 && window.innerWidth <= 1023;
  }
  
  function isDesktop() {
    return window.innerWidth >= 1024;
  }
  
  // Orientation detection
  function isLandscape() {
    return window.innerWidth > window.innerHeight;
  }
  
  function isPortrait() {
    return window.innerHeight > window.innerWidth;
  }
  
  // Screen orientation lock (if supported)
  function lockToPortrait() {
    if (screen.orientation && screen.orientation.lock) {
      screen.orientation.lock('portrait').catch(err => {
        console.log('Screen orientation lock not supported or failed:', err);
      });
    }
  }
  
  function unlockOrientation() {
    if (screen.orientation && screen.orientation.unlock) {
      screen.orientation.unlock();
    }
  }
  
  // Force portrait overlay for mobile phones in landscape
  function createPortraitOverlay() {
    let overlay = document.querySelector('.force-portrait-mode');
    if (!overlay) {
      overlay = document.createElement('div');
      overlay.className = 'force-portrait-mode';
      overlay.innerHTML = `
        <div style="display: flex; flex-direction: column; align-items: center; gap: 20px;">
          <div style="font-size: 48px;">📱</div>
          <h2 style="margin: 0; font-size: 24px;">Please rotate your device</h2>
          <p style="margin: 0; opacity: 0.8;">This app works best in portrait mode on mobile devices</p>
        </div>
      `;
      document.body.appendChild(overlay);
    }
    return overlay;
  }
  
  function removePortraitOverlay() {
    const overlay = document.querySelector('.force-portrait-mode');
    if (overlay) {
      overlay.remove();
    }
  }
  
  // Create landscape warning overlay
  function createLandscapeWarning() {
    let warning = document.querySelector('.force-landscape-warning');
    if (!warning) {
      warning = document.createElement('div');
      warning.className = 'force-landscape-warning';
      warning.innerHTML = `
        <div style="display: flex; flex-direction: column; align-items: center; gap: 20px; text-align: center;">
          <div style="font-size: 64px;">📱</div>
          <h2 style="margin: 0; font-size: 28px; font-weight: 600;">Please rotate your device</h2>
          <p style="margin: 0; opacity: 0.9; font-size: 18px; max-width: 300px; line-height: 1.4;">
            This application is optimized for portrait mode on mobile devices
          </p>
          <div style="margin-top: 20px; font-size: 48px; animation: bounce 2s infinite;">
            ↻
          </div>
        </div>
      `;
      document.body.appendChild(warning);
      
      // Add bounce animation
      const style = document.createElement('style');
      style.textContent = `
        @keyframes bounce {
          0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
          40% { transform: translateY(-10px); }
          60% { transform: translateY(-5px); }
        }
      `;
      document.head.appendChild(style);
    }
    return warning;
  }
  
  function removeLandscapeWarning() {
    const warning = document.querySelector('.force-landscape-warning');
    if (warning) {
      warning.remove();
    }
  }

  // Main orientation handler
  function handleOrientationChange() {
    const actualWidth = Math.max(window.innerWidth, window.outerWidth || 0);
    const actualHeight = Math.max(window.innerHeight, window.outerHeight || 0);
    
    console.log('Orientation change detected:', {
      width: actualWidth,
      height: actualHeight,
      innerWidth: window.innerWidth,
      innerHeight: window.innerHeight,
      isMobilePhone: isMobilePhone(),
      isTablet: isTablet(),
      isDesktop: isDesktop(),
      isLandscape: isLandscape(),
      isPortrait: isPortrait(),
      orientation: screen.orientation ? screen.orientation.angle : 'unknown'
    });
    
    if (isMobilePhone()) {
      // Mobile phones: Show warning overlay in landscape
      if (isLandscape()) {
        console.log('Mobile phone in landscape - showing warning overlay');
        createLandscapeWarning();
        document.body.classList.add('orientation-locked');
        document.body.style.overflow = 'hidden';
        
        // Try to lock orientation
        if (screen.orientation && screen.orientation.lock) {
          screen.orientation.lock('portrait').catch(err => {
            console.log('Cannot lock orientation:', err);
          });
        }
      } else {
        console.log('Mobile phone in portrait - removing overlay');
        removeLandscapeWarning();
        removePortraitOverlay();
        document.body.classList.remove('orientation-locked');
        document.body.style.overflow = '';
      }
    } else if (isTablet()) {
      // Tablets: Allow both orientations
      console.log('Tablet device - allowing both orientations');
      removeLandscapeWarning();
      removePortraitOverlay();
      unlockOrientation();
      document.body.classList.remove('orientation-locked');
      document.body.style.overflow = '';
      
      // Update tablet-specific responsive layouts (handled by CSS)
      if (isLandscape()) {
        document.body.classList.add('tablet-landscape');
        document.body.classList.remove('tablet-portrait');
      } else {
        document.body.classList.add('tablet-portrait');
        document.body.classList.remove('tablet-landscape');
      }
    } else {
      // Desktop: No restrictions
      console.log('Desktop device - no orientation restrictions');
      removeLandscapeWarning();
      removePortraitOverlay();
      unlockOrientation();
      document.body.classList.remove('orientation-locked', 'tablet-landscape', 'tablet-portrait');
      document.body.style.overflow = '';
    }
  }
  
  // Initialize orientation control
  function initOrientationControl() {
    console.log('Initializing orientation control');
    
    // Handle initial load
    handleOrientationChange();
    
    // Listen for orientation changes
    window.addEventListener('orientationchange', () => {
      // Small delay to ensure new dimensions are available
      setTimeout(handleOrientationChange, 100);
    });
    
    // Also listen for resize events (for desktop/browser testing)
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(handleOrientationChange, 250);
    });
    
    // Listen for window focus (in case user switches apps and comes back)
    window.addEventListener('focus', handleOrientationChange);
  }
  
  // Enhanced viewport meta tag control
  function updateViewportMeta() {
    let viewport = document.querySelector('meta[name="viewport"]');
    if (!viewport) {
      viewport = document.createElement('meta');
      viewport.name = 'viewport';
      document.head.appendChild(viewport);
    }
    
    if (isMobilePhone()) {
      // Lock viewport for mobile phones
      viewport.content = 'width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0, minimum-scale=1.0, orientation=portrait';
    } else if (isTablet()) {
      // Allow scaling for tablets but maintain responsive design
      viewport.content = 'width=device-width, initial-scale=1.0, user-scalable=yes, maximum-scale=2.0, minimum-scale=0.5';
    } else {
      // Standard viewport for desktop
      viewport.content = 'width=device-width, initial-scale=1.0';
    }
  }
  
  // Add debug function for orientation
  window.debugOrientation = function() {
    return {
      dimensions: {
        width: window.innerWidth,
        height: window.innerHeight,
        ratio: (window.innerWidth / window.innerHeight).toFixed(2)
      },
      device: {
        isMobilePhone: isMobilePhone(),
        isTablet: isTablet(),
        isDesktop: isDesktop()
      },
      orientation: {
        isLandscape: isLandscape(),
        isPortrait: isPortrait(),
        angle: screen.orientation ? screen.orientation.angle : 'unknown'
      },
      features: {
        orientationLock: !!(screen.orientation && screen.orientation.lock),
        orientationAPI: !!screen.orientation
      },
      classes: {
        orientationLocked: document.body.classList.contains('orientation-locked'),
        tabletLandscape: document.body.classList.contains('tablet-landscape'),
        tabletPortrait: document.body.classList.contains('tablet-portrait')
      }
    };
  };
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initOrientationControl);
  } else {
    initOrientationControl();
  }
  
  console.log('Orientation control module loaded');
})();